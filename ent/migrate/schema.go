// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// PortfoliosColumns holds the columns for the "portfolios" table.
	PortfoliosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "symbol", Type: field.TypeString, Size: 10},
		{Name: "quantity", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "numeric(15,4)"}},
		{Name: "average_price", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "numeric(12,4)"}},
		{Name: "current_price", Type: field.TypeOther, Nullable: true, SchemaType: map[string]string{"postgres": "numeric(12,4)"}},
		{Name: "market_value", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "numeric(15,4)"}},
		{Name: "total_cost", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "numeric(15,4)"}},
		{Name: "unrealized_pnl", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "numeric(15,4)"}},
		{Name: "realized_pnl", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "numeric(15,4)"}},
		{Name: "last_updated", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// PortfoliosTable holds the schema information for the "portfolios" table.
	PortfoliosTable = &schema.Table{
		Name:       "portfolios",
		Columns:    PortfoliosColumns,
		PrimaryKey: []*schema.Column{PortfoliosColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "portfolios_users_portfolios",
				Columns:    []*schema.Column{PortfoliosColumns[12]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "portfolio_user_id",
				Unique:  false,
				Columns: []*schema.Column{PortfoliosColumns[12]},
			},
			{
				Name:    "portfolio_symbol",
				Unique:  false,
				Columns: []*schema.Column{PortfoliosColumns[1]},
			},
			{
				Name:    "portfolio_user_id_symbol",
				Unique:  true,
				Columns: []*schema.Column{PortfoliosColumns[12], PortfoliosColumns[1]},
			},
		},
	}
	// StrategiesColumns holds the columns for the "strategies" table.
	StrategiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "strategy_id", Type: field.TypeString, Size: 50},
		{Name: "name", Type: field.TypeString, Size: 100},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "symbol", Type: field.TypeString, Size: 10},
		{Name: "user_inputs", Type: field.TypeJSON},
		{Name: "settings", Type: field.TypeJSON},
		{Name: "active", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "template_id", Type: field.TypeUUID, Nullable: true},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// StrategiesTable holds the schema information for the "strategies" table.
	StrategiesTable = &schema.Table{
		Name:       "strategies",
		Columns:    StrategiesColumns,
		PrimaryKey: []*schema.Column{StrategiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "strategies_strategy_templates_strategies",
				Columns:    []*schema.Column{StrategiesColumns[10]},
				RefColumns: []*schema.Column{StrategyTemplatesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "strategies_users_strategies",
				Columns:    []*schema.Column{StrategiesColumns[11]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "strategy_user_id",
				Unique:  false,
				Columns: []*schema.Column{StrategiesColumns[11]},
			},
			{
				Name:    "strategy_symbol",
				Unique:  false,
				Columns: []*schema.Column{StrategiesColumns[4]},
			},
			{
				Name:    "strategy_template_id",
				Unique:  false,
				Columns: []*schema.Column{StrategiesColumns[10]},
			},
			{
				Name:    "strategy_active",
				Unique:  false,
				Columns: []*schema.Column{StrategiesColumns[7]},
			},
			{
				Name:    "strategy_user_id_strategy_id",
				Unique:  true,
				Columns: []*schema.Column{StrategiesColumns[11], StrategiesColumns[1]},
			},
		},
	}
	// StrategyExecutionsColumns holds the columns for the "strategy_executions" table.
	StrategyExecutionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "symbol", Type: field.TypeString, Size: 10},
		{Name: "action", Type: field.TypeEnum, Enums: []string{"BUY", "SELL", "HOLD"}},
		{Name: "price", Type: field.TypeOther, Nullable: true, SchemaType: map[string]string{"postgres": "numeric(12,4)"}},
		{Name: "quantity", Type: field.TypeInt, Nullable: true},
		{Name: "reasoning", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "executed_at", Type: field.TypeTime, Nullable: true},
		{Name: "strategy_id", Type: field.TypeUUID, Nullable: true},
	}
	// StrategyExecutionsTable holds the schema information for the "strategy_executions" table.
	StrategyExecutionsTable = &schema.Table{
		Name:       "strategy_executions",
		Columns:    StrategyExecutionsColumns,
		PrimaryKey: []*schema.Column{StrategyExecutionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "strategy_executions_strategies_executions",
				Columns:    []*schema.Column{StrategyExecutionsColumns[7]},
				RefColumns: []*schema.Column{StrategiesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "strategyexecution_strategy_id",
				Unique:  false,
				Columns: []*schema.Column{StrategyExecutionsColumns[7]},
			},
			{
				Name:    "strategyexecution_symbol",
				Unique:  false,
				Columns: []*schema.Column{StrategyExecutionsColumns[1]},
			},
			{
				Name:    "strategyexecution_executed_at",
				Unique:  false,
				Columns: []*schema.Column{StrategyExecutionsColumns[6]},
			},
		},
	}
	// StrategyPerformancesColumns holds the columns for the "strategy_performances" table.
	StrategyPerformancesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "total_return", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "numeric(15,4)"}},
		{Name: "win_rate", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "numeric(5,2)"}},
		{Name: "profit_loss", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "numeric(15,4)"}},
		{Name: "trade_count", Type: field.TypeInt64, Default: 0},
		{Name: "last_trade_time", Type: field.TypeTime, Nullable: true},
		{Name: "max_drawdown", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "numeric(8,4)"}},
		{Name: "sharpe_ratio", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "numeric(8,4)"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "strategy_id", Type: field.TypeUUID, Unique: true},
	}
	// StrategyPerformancesTable holds the schema information for the "strategy_performances" table.
	StrategyPerformancesTable = &schema.Table{
		Name:       "strategy_performances",
		Columns:    StrategyPerformancesColumns,
		PrimaryKey: []*schema.Column{StrategyPerformancesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "strategy_performances_strategies_performance",
				Columns:    []*schema.Column{StrategyPerformancesColumns[10]},
				RefColumns: []*schema.Column{StrategiesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// StrategyStatusColumns holds the columns for the "strategy_status" table.
	StrategyStatusColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"active", "inactive", "paused", "error"}, Default: "inactive"},
		{Name: "last_execution", Type: field.TypeTime, Nullable: true},
		{Name: "execution_count", Type: field.TypeInt64, Default: 0},
		{Name: "error_message", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "uptime_seconds", Type: field.TypeInt64, Default: 0},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "strategy_id", Type: field.TypeUUID, Unique: true},
	}
	// StrategyStatusTable holds the schema information for the "strategy_status" table.
	StrategyStatusTable = &schema.Table{
		Name:       "strategy_status",
		Columns:    StrategyStatusColumns,
		PrimaryKey: []*schema.Column{StrategyStatusColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "strategy_status_strategies_status",
				Columns:    []*schema.Column{StrategyStatusColumns[8]},
				RefColumns: []*schema.Column{StrategiesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// StrategyTemplatesColumns holds the columns for the "strategy_templates" table.
	StrategyTemplatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString, Size: 100},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "category", Type: field.TypeString, Size: 50},
		{Name: "template_config", Type: field.TypeJSON},
		{Name: "input_schema", Type: field.TypeJSON},
		{Name: "version", Type: field.TypeString, Size: 10, Default: "1.0.0"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// StrategyTemplatesTable holds the schema information for the "strategy_templates" table.
	StrategyTemplatesTable = &schema.Table{
		Name:       "strategy_templates",
		Columns:    StrategyTemplatesColumns,
		PrimaryKey: []*schema.Column{StrategyTemplatesColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString, Size: 100, Default: "Unknown User"},
		{Name: "nickname", Type: field.TypeString, Size: 50, Default: "Unknown"},
		{Name: "email", Type: field.TypeString, Unique: true, Size: 255},
		{Name: "password", Type: field.TypeString, Size: 255, Default: ""},
		{Name: "is_valid", Type: field.TypeBool, Default: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_email",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[3]},
			},
			{
				Name:    "user_nickname",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[2]},
			},
			{
				Name:    "user_is_valid",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[5]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		PortfoliosTable,
		StrategiesTable,
		StrategyExecutionsTable,
		StrategyPerformancesTable,
		StrategyStatusTable,
		StrategyTemplatesTable,
		UsersTable,
	}
)

func init() {
	PortfoliosTable.ForeignKeys[0].RefTable = UsersTable
	StrategiesTable.ForeignKeys[0].RefTable = StrategyTemplatesTable
	StrategiesTable.ForeignKeys[1].RefTable = UsersTable
	StrategyExecutionsTable.ForeignKeys[0].RefTable = StrategiesTable
	StrategyPerformancesTable.ForeignKeys[0].RefTable = StrategiesTable
	StrategyStatusTable.ForeignKeys[0].RefTable = StrategiesTable
}
