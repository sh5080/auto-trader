// Code generated by ent, DO NOT EDIT.

package portfolio

import (
	"auto-trader/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldUserID, v))
}

// Symbol applies equality check predicate on the "symbol" field. It's identical to SymbolEQ.
func Symbol(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldSymbol, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldQuantity, v))
}

// AveragePrice applies equality check predicate on the "average_price" field. It's identical to AveragePriceEQ.
func AveragePrice(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldAveragePrice, v))
}

// CurrentPrice applies equality check predicate on the "current_price" field. It's identical to CurrentPriceEQ.
func CurrentPrice(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldCurrentPrice, v))
}

// MarketValue applies equality check predicate on the "market_value" field. It's identical to MarketValueEQ.
func MarketValue(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldMarketValue, v))
}

// TotalCost applies equality check predicate on the "total_cost" field. It's identical to TotalCostEQ.
func TotalCost(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldTotalCost, v))
}

// UnrealizedPnl applies equality check predicate on the "unrealized_pnl" field. It's identical to UnrealizedPnlEQ.
func UnrealizedPnl(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldUnrealizedPnl, v))
}

// RealizedPnl applies equality check predicate on the "realized_pnl" field. It's identical to RealizedPnlEQ.
func RealizedPnl(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldRealizedPnl, v))
}

// LastUpdated applies equality check predicate on the "last_updated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldLastUpdated, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotIn(FieldUserID, vs...))
}

// SymbolEQ applies the EQ predicate on the "symbol" field.
func SymbolEQ(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldSymbol, v))
}

// SymbolNEQ applies the NEQ predicate on the "symbol" field.
func SymbolNEQ(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNEQ(FieldSymbol, v))
}

// SymbolIn applies the In predicate on the "symbol" field.
func SymbolIn(vs ...string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIn(FieldSymbol, vs...))
}

// SymbolNotIn applies the NotIn predicate on the "symbol" field.
func SymbolNotIn(vs ...string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotIn(FieldSymbol, vs...))
}

// SymbolGT applies the GT predicate on the "symbol" field.
func SymbolGT(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGT(FieldSymbol, v))
}

// SymbolGTE applies the GTE predicate on the "symbol" field.
func SymbolGTE(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGTE(FieldSymbol, v))
}

// SymbolLT applies the LT predicate on the "symbol" field.
func SymbolLT(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLT(FieldSymbol, v))
}

// SymbolLTE applies the LTE predicate on the "symbol" field.
func SymbolLTE(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLTE(FieldSymbol, v))
}

// SymbolContains applies the Contains predicate on the "symbol" field.
func SymbolContains(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldContains(FieldSymbol, v))
}

// SymbolHasPrefix applies the HasPrefix predicate on the "symbol" field.
func SymbolHasPrefix(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldHasPrefix(FieldSymbol, v))
}

// SymbolHasSuffix applies the HasSuffix predicate on the "symbol" field.
func SymbolHasSuffix(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldHasSuffix(FieldSymbol, v))
}

// SymbolEqualFold applies the EqualFold predicate on the "symbol" field.
func SymbolEqualFold(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEqualFold(FieldSymbol, v))
}

// SymbolContainsFold applies the ContainsFold predicate on the "symbol" field.
func SymbolContainsFold(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldContainsFold(FieldSymbol, v))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLTE(FieldQuantity, v))
}

// AveragePriceEQ applies the EQ predicate on the "average_price" field.
func AveragePriceEQ(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldAveragePrice, v))
}

// AveragePriceNEQ applies the NEQ predicate on the "average_price" field.
func AveragePriceNEQ(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNEQ(FieldAveragePrice, v))
}

// AveragePriceIn applies the In predicate on the "average_price" field.
func AveragePriceIn(vs ...decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIn(FieldAveragePrice, vs...))
}

// AveragePriceNotIn applies the NotIn predicate on the "average_price" field.
func AveragePriceNotIn(vs ...decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotIn(FieldAveragePrice, vs...))
}

// AveragePriceGT applies the GT predicate on the "average_price" field.
func AveragePriceGT(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGT(FieldAveragePrice, v))
}

// AveragePriceGTE applies the GTE predicate on the "average_price" field.
func AveragePriceGTE(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGTE(FieldAveragePrice, v))
}

// AveragePriceLT applies the LT predicate on the "average_price" field.
func AveragePriceLT(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLT(FieldAveragePrice, v))
}

// AveragePriceLTE applies the LTE predicate on the "average_price" field.
func AveragePriceLTE(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLTE(FieldAveragePrice, v))
}

// CurrentPriceEQ applies the EQ predicate on the "current_price" field.
func CurrentPriceEQ(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldCurrentPrice, v))
}

// CurrentPriceNEQ applies the NEQ predicate on the "current_price" field.
func CurrentPriceNEQ(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNEQ(FieldCurrentPrice, v))
}

// CurrentPriceIn applies the In predicate on the "current_price" field.
func CurrentPriceIn(vs ...decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIn(FieldCurrentPrice, vs...))
}

// CurrentPriceNotIn applies the NotIn predicate on the "current_price" field.
func CurrentPriceNotIn(vs ...decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotIn(FieldCurrentPrice, vs...))
}

// CurrentPriceGT applies the GT predicate on the "current_price" field.
func CurrentPriceGT(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGT(FieldCurrentPrice, v))
}

// CurrentPriceGTE applies the GTE predicate on the "current_price" field.
func CurrentPriceGTE(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGTE(FieldCurrentPrice, v))
}

// CurrentPriceLT applies the LT predicate on the "current_price" field.
func CurrentPriceLT(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLT(FieldCurrentPrice, v))
}

// CurrentPriceLTE applies the LTE predicate on the "current_price" field.
func CurrentPriceLTE(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLTE(FieldCurrentPrice, v))
}

// CurrentPriceIsNil applies the IsNil predicate on the "current_price" field.
func CurrentPriceIsNil() predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIsNull(FieldCurrentPrice))
}

// CurrentPriceNotNil applies the NotNil predicate on the "current_price" field.
func CurrentPriceNotNil() predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotNull(FieldCurrentPrice))
}

// MarketValueEQ applies the EQ predicate on the "market_value" field.
func MarketValueEQ(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldMarketValue, v))
}

// MarketValueNEQ applies the NEQ predicate on the "market_value" field.
func MarketValueNEQ(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNEQ(FieldMarketValue, v))
}

// MarketValueIn applies the In predicate on the "market_value" field.
func MarketValueIn(vs ...decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIn(FieldMarketValue, vs...))
}

// MarketValueNotIn applies the NotIn predicate on the "market_value" field.
func MarketValueNotIn(vs ...decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotIn(FieldMarketValue, vs...))
}

// MarketValueGT applies the GT predicate on the "market_value" field.
func MarketValueGT(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGT(FieldMarketValue, v))
}

// MarketValueGTE applies the GTE predicate on the "market_value" field.
func MarketValueGTE(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGTE(FieldMarketValue, v))
}

// MarketValueLT applies the LT predicate on the "market_value" field.
func MarketValueLT(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLT(FieldMarketValue, v))
}

// MarketValueLTE applies the LTE predicate on the "market_value" field.
func MarketValueLTE(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLTE(FieldMarketValue, v))
}

// TotalCostEQ applies the EQ predicate on the "total_cost" field.
func TotalCostEQ(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldTotalCost, v))
}

// TotalCostNEQ applies the NEQ predicate on the "total_cost" field.
func TotalCostNEQ(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNEQ(FieldTotalCost, v))
}

// TotalCostIn applies the In predicate on the "total_cost" field.
func TotalCostIn(vs ...decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIn(FieldTotalCost, vs...))
}

// TotalCostNotIn applies the NotIn predicate on the "total_cost" field.
func TotalCostNotIn(vs ...decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotIn(FieldTotalCost, vs...))
}

// TotalCostGT applies the GT predicate on the "total_cost" field.
func TotalCostGT(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGT(FieldTotalCost, v))
}

// TotalCostGTE applies the GTE predicate on the "total_cost" field.
func TotalCostGTE(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGTE(FieldTotalCost, v))
}

// TotalCostLT applies the LT predicate on the "total_cost" field.
func TotalCostLT(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLT(FieldTotalCost, v))
}

// TotalCostLTE applies the LTE predicate on the "total_cost" field.
func TotalCostLTE(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLTE(FieldTotalCost, v))
}

// UnrealizedPnlEQ applies the EQ predicate on the "unrealized_pnl" field.
func UnrealizedPnlEQ(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldUnrealizedPnl, v))
}

// UnrealizedPnlNEQ applies the NEQ predicate on the "unrealized_pnl" field.
func UnrealizedPnlNEQ(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNEQ(FieldUnrealizedPnl, v))
}

// UnrealizedPnlIn applies the In predicate on the "unrealized_pnl" field.
func UnrealizedPnlIn(vs ...decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIn(FieldUnrealizedPnl, vs...))
}

// UnrealizedPnlNotIn applies the NotIn predicate on the "unrealized_pnl" field.
func UnrealizedPnlNotIn(vs ...decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotIn(FieldUnrealizedPnl, vs...))
}

// UnrealizedPnlGT applies the GT predicate on the "unrealized_pnl" field.
func UnrealizedPnlGT(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGT(FieldUnrealizedPnl, v))
}

// UnrealizedPnlGTE applies the GTE predicate on the "unrealized_pnl" field.
func UnrealizedPnlGTE(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGTE(FieldUnrealizedPnl, v))
}

// UnrealizedPnlLT applies the LT predicate on the "unrealized_pnl" field.
func UnrealizedPnlLT(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLT(FieldUnrealizedPnl, v))
}

// UnrealizedPnlLTE applies the LTE predicate on the "unrealized_pnl" field.
func UnrealizedPnlLTE(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLTE(FieldUnrealizedPnl, v))
}

// RealizedPnlEQ applies the EQ predicate on the "realized_pnl" field.
func RealizedPnlEQ(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldRealizedPnl, v))
}

// RealizedPnlNEQ applies the NEQ predicate on the "realized_pnl" field.
func RealizedPnlNEQ(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNEQ(FieldRealizedPnl, v))
}

// RealizedPnlIn applies the In predicate on the "realized_pnl" field.
func RealizedPnlIn(vs ...decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIn(FieldRealizedPnl, vs...))
}

// RealizedPnlNotIn applies the NotIn predicate on the "realized_pnl" field.
func RealizedPnlNotIn(vs ...decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotIn(FieldRealizedPnl, vs...))
}

// RealizedPnlGT applies the GT predicate on the "realized_pnl" field.
func RealizedPnlGT(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGT(FieldRealizedPnl, v))
}

// RealizedPnlGTE applies the GTE predicate on the "realized_pnl" field.
func RealizedPnlGTE(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGTE(FieldRealizedPnl, v))
}

// RealizedPnlLT applies the LT predicate on the "realized_pnl" field.
func RealizedPnlLT(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLT(FieldRealizedPnl, v))
}

// RealizedPnlLTE applies the LTE predicate on the "realized_pnl" field.
func RealizedPnlLTE(v decimal.Decimal) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLTE(FieldRealizedPnl, v))
}

// LastUpdatedEQ applies the EQ predicate on the "last_updated" field.
func LastUpdatedEQ(v time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "last_updated" field.
func LastUpdatedNEQ(v time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "last_updated" field.
func LastUpdatedIn(vs ...time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "last_updated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "last_updated" field.
func LastUpdatedGT(v time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "last_updated" field.
func LastUpdatedGTE(v time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "last_updated" field.
func LastUpdatedLT(v time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "last_updated" field.
func LastUpdatedLTE(v time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLTE(FieldLastUpdated, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotNull(FieldUpdatedAt))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Portfolio {
	return predicate.Portfolio(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Portfolio {
	return predicate.Portfolio(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Portfolio) predicate.Portfolio {
	return predicate.Portfolio(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Portfolio) predicate.Portfolio {
	return predicate.Portfolio(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Portfolio) predicate.Portfolio {
	return predicate.Portfolio(sql.NotPredicates(p))
}
