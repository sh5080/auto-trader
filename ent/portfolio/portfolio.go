// Code generated by ent, DO NOT EDIT.

package portfolio

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the portfolio type in the database.
	Label = "portfolio"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldSymbol holds the string denoting the symbol field in the database.
	FieldSymbol = "symbol"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldAveragePrice holds the string denoting the average_price field in the database.
	FieldAveragePrice = "average_price"
	// FieldCurrentPrice holds the string denoting the current_price field in the database.
	FieldCurrentPrice = "current_price"
	// FieldMarketValue holds the string denoting the market_value field in the database.
	FieldMarketValue = "market_value"
	// FieldTotalCost holds the string denoting the total_cost field in the database.
	FieldTotalCost = "total_cost"
	// FieldUnrealizedPnl holds the string denoting the unrealized_pnl field in the database.
	FieldUnrealizedPnl = "unrealized_pnl"
	// FieldRealizedPnl holds the string denoting the realized_pnl field in the database.
	FieldRealizedPnl = "realized_pnl"
	// FieldLastUpdated holds the string denoting the last_updated field in the database.
	FieldLastUpdated = "last_updated"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the portfolio in the database.
	Table = "portfolios"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "portfolios"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for portfolio fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldSymbol,
	FieldQuantity,
	FieldAveragePrice,
	FieldCurrentPrice,
	FieldMarketValue,
	FieldTotalCost,
	FieldUnrealizedPnl,
	FieldRealizedPnl,
	FieldLastUpdated,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SymbolValidator is a validator for the "symbol" field. It is called by the builders before save.
	SymbolValidator func(string) error
	// DefaultQuantity holds the default value on creation for the "quantity" field.
	DefaultQuantity decimal.Decimal
	// DefaultAveragePrice holds the default value on creation for the "average_price" field.
	DefaultAveragePrice decimal.Decimal
	// DefaultMarketValue holds the default value on creation for the "market_value" field.
	DefaultMarketValue decimal.Decimal
	// DefaultTotalCost holds the default value on creation for the "total_cost" field.
	DefaultTotalCost decimal.Decimal
	// DefaultUnrealizedPnl holds the default value on creation for the "unrealized_pnl" field.
	DefaultUnrealizedPnl decimal.Decimal
	// DefaultRealizedPnl holds the default value on creation for the "realized_pnl" field.
	DefaultRealizedPnl decimal.Decimal
	// DefaultLastUpdated holds the default value on creation for the "last_updated" field.
	DefaultLastUpdated func() time.Time
	// UpdateDefaultLastUpdated holds the default value on update for the "last_updated" field.
	UpdateDefaultLastUpdated func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Portfolio queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// BySymbol orders the results by the symbol field.
func BySymbol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSymbol, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// ByAveragePrice orders the results by the average_price field.
func ByAveragePrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAveragePrice, opts...).ToFunc()
}

// ByCurrentPrice orders the results by the current_price field.
func ByCurrentPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentPrice, opts...).ToFunc()
}

// ByMarketValue orders the results by the market_value field.
func ByMarketValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMarketValue, opts...).ToFunc()
}

// ByTotalCost orders the results by the total_cost field.
func ByTotalCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalCost, opts...).ToFunc()
}

// ByUnrealizedPnl orders the results by the unrealized_pnl field.
func ByUnrealizedPnl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnrealizedPnl, opts...).ToFunc()
}

// ByRealizedPnl orders the results by the realized_pnl field.
func ByRealizedPnl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRealizedPnl, opts...).ToFunc()
}

// ByLastUpdated orders the results by the last_updated field.
func ByLastUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUpdated, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
