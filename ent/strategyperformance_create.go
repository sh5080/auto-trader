// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auto-trader/ent/strategy"
	"auto-trader/ent/strategyperformance"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// StrategyPerformanceCreate is the builder for creating a StrategyPerformance entity.
type StrategyPerformanceCreate struct {
	config
	mutation *StrategyPerformanceMutation
	hooks    []Hook
}

// SetStrategyID sets the "strategy_id" field.
func (_c *StrategyPerformanceCreate) SetStrategyID(v uuid.UUID) *StrategyPerformanceCreate {
	_c.mutation.SetStrategyID(v)
	return _c
}

// SetTotalReturn sets the "total_return" field.
func (_c *StrategyPerformanceCreate) SetTotalReturn(v decimal.Decimal) *StrategyPerformanceCreate {
	_c.mutation.SetTotalReturn(v)
	return _c
}

// SetNillableTotalReturn sets the "total_return" field if the given value is not nil.
func (_c *StrategyPerformanceCreate) SetNillableTotalReturn(v *decimal.Decimal) *StrategyPerformanceCreate {
	if v != nil {
		_c.SetTotalReturn(*v)
	}
	return _c
}

// SetWinRate sets the "win_rate" field.
func (_c *StrategyPerformanceCreate) SetWinRate(v decimal.Decimal) *StrategyPerformanceCreate {
	_c.mutation.SetWinRate(v)
	return _c
}

// SetNillableWinRate sets the "win_rate" field if the given value is not nil.
func (_c *StrategyPerformanceCreate) SetNillableWinRate(v *decimal.Decimal) *StrategyPerformanceCreate {
	if v != nil {
		_c.SetWinRate(*v)
	}
	return _c
}

// SetProfitLoss sets the "profit_loss" field.
func (_c *StrategyPerformanceCreate) SetProfitLoss(v decimal.Decimal) *StrategyPerformanceCreate {
	_c.mutation.SetProfitLoss(v)
	return _c
}

// SetNillableProfitLoss sets the "profit_loss" field if the given value is not nil.
func (_c *StrategyPerformanceCreate) SetNillableProfitLoss(v *decimal.Decimal) *StrategyPerformanceCreate {
	if v != nil {
		_c.SetProfitLoss(*v)
	}
	return _c
}

// SetTradeCount sets the "trade_count" field.
func (_c *StrategyPerformanceCreate) SetTradeCount(v int64) *StrategyPerformanceCreate {
	_c.mutation.SetTradeCount(v)
	return _c
}

// SetNillableTradeCount sets the "trade_count" field if the given value is not nil.
func (_c *StrategyPerformanceCreate) SetNillableTradeCount(v *int64) *StrategyPerformanceCreate {
	if v != nil {
		_c.SetTradeCount(*v)
	}
	return _c
}

// SetLastTradeTime sets the "last_trade_time" field.
func (_c *StrategyPerformanceCreate) SetLastTradeTime(v time.Time) *StrategyPerformanceCreate {
	_c.mutation.SetLastTradeTime(v)
	return _c
}

// SetNillableLastTradeTime sets the "last_trade_time" field if the given value is not nil.
func (_c *StrategyPerformanceCreate) SetNillableLastTradeTime(v *time.Time) *StrategyPerformanceCreate {
	if v != nil {
		_c.SetLastTradeTime(*v)
	}
	return _c
}

// SetMaxDrawdown sets the "max_drawdown" field.
func (_c *StrategyPerformanceCreate) SetMaxDrawdown(v decimal.Decimal) *StrategyPerformanceCreate {
	_c.mutation.SetMaxDrawdown(v)
	return _c
}

// SetNillableMaxDrawdown sets the "max_drawdown" field if the given value is not nil.
func (_c *StrategyPerformanceCreate) SetNillableMaxDrawdown(v *decimal.Decimal) *StrategyPerformanceCreate {
	if v != nil {
		_c.SetMaxDrawdown(*v)
	}
	return _c
}

// SetSharpeRatio sets the "sharpe_ratio" field.
func (_c *StrategyPerformanceCreate) SetSharpeRatio(v decimal.Decimal) *StrategyPerformanceCreate {
	_c.mutation.SetSharpeRatio(v)
	return _c
}

// SetNillableSharpeRatio sets the "sharpe_ratio" field if the given value is not nil.
func (_c *StrategyPerformanceCreate) SetNillableSharpeRatio(v *decimal.Decimal) *StrategyPerformanceCreate {
	if v != nil {
		_c.SetSharpeRatio(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *StrategyPerformanceCreate) SetCreatedAt(v time.Time) *StrategyPerformanceCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *StrategyPerformanceCreate) SetNillableCreatedAt(v *time.Time) *StrategyPerformanceCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *StrategyPerformanceCreate) SetUpdatedAt(v time.Time) *StrategyPerformanceCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *StrategyPerformanceCreate) SetNillableUpdatedAt(v *time.Time) *StrategyPerformanceCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetStrategy sets the "strategy" edge to the Strategy entity.
func (_c *StrategyPerformanceCreate) SetStrategy(v *Strategy) *StrategyPerformanceCreate {
	return _c.SetStrategyID(v.ID)
}

// Mutation returns the StrategyPerformanceMutation object of the builder.
func (_c *StrategyPerformanceCreate) Mutation() *StrategyPerformanceMutation {
	return _c.mutation
}

// Save creates the StrategyPerformance in the database.
func (_c *StrategyPerformanceCreate) Save(ctx context.Context) (*StrategyPerformance, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *StrategyPerformanceCreate) SaveX(ctx context.Context) *StrategyPerformance {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StrategyPerformanceCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StrategyPerformanceCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *StrategyPerformanceCreate) defaults() {
	if _, ok := _c.mutation.TotalReturn(); !ok {
		v := strategyperformance.DefaultTotalReturn
		_c.mutation.SetTotalReturn(v)
	}
	if _, ok := _c.mutation.WinRate(); !ok {
		v := strategyperformance.DefaultWinRate
		_c.mutation.SetWinRate(v)
	}
	if _, ok := _c.mutation.ProfitLoss(); !ok {
		v := strategyperformance.DefaultProfitLoss
		_c.mutation.SetProfitLoss(v)
	}
	if _, ok := _c.mutation.TradeCount(); !ok {
		v := strategyperformance.DefaultTradeCount
		_c.mutation.SetTradeCount(v)
	}
	if _, ok := _c.mutation.MaxDrawdown(); !ok {
		v := strategyperformance.DefaultMaxDrawdown
		_c.mutation.SetMaxDrawdown(v)
	}
	if _, ok := _c.mutation.SharpeRatio(); !ok {
		v := strategyperformance.DefaultSharpeRatio
		_c.mutation.SetSharpeRatio(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := strategyperformance.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := strategyperformance.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *StrategyPerformanceCreate) check() error {
	if _, ok := _c.mutation.StrategyID(); !ok {
		return &ValidationError{Name: "strategy_id", err: errors.New(`ent: missing required field "StrategyPerformance.strategy_id"`)}
	}
	if _, ok := _c.mutation.TotalReturn(); !ok {
		return &ValidationError{Name: "total_return", err: errors.New(`ent: missing required field "StrategyPerformance.total_return"`)}
	}
	if _, ok := _c.mutation.WinRate(); !ok {
		return &ValidationError{Name: "win_rate", err: errors.New(`ent: missing required field "StrategyPerformance.win_rate"`)}
	}
	if _, ok := _c.mutation.ProfitLoss(); !ok {
		return &ValidationError{Name: "profit_loss", err: errors.New(`ent: missing required field "StrategyPerformance.profit_loss"`)}
	}
	if _, ok := _c.mutation.TradeCount(); !ok {
		return &ValidationError{Name: "trade_count", err: errors.New(`ent: missing required field "StrategyPerformance.trade_count"`)}
	}
	if _, ok := _c.mutation.MaxDrawdown(); !ok {
		return &ValidationError{Name: "max_drawdown", err: errors.New(`ent: missing required field "StrategyPerformance.max_drawdown"`)}
	}
	if _, ok := _c.mutation.SharpeRatio(); !ok {
		return &ValidationError{Name: "sharpe_ratio", err: errors.New(`ent: missing required field "StrategyPerformance.sharpe_ratio"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "StrategyPerformance.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "StrategyPerformance.updated_at"`)}
	}
	if len(_c.mutation.StrategyIDs()) == 0 {
		return &ValidationError{Name: "strategy", err: errors.New(`ent: missing required edge "StrategyPerformance.strategy"`)}
	}
	return nil
}

func (_c *StrategyPerformanceCreate) sqlSave(ctx context.Context) (*StrategyPerformance, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *StrategyPerformanceCreate) createSpec() (*StrategyPerformance, *sqlgraph.CreateSpec) {
	var (
		_node = &StrategyPerformance{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(strategyperformance.Table, sqlgraph.NewFieldSpec(strategyperformance.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.TotalReturn(); ok {
		_spec.SetField(strategyperformance.FieldTotalReturn, field.TypeOther, value)
		_node.TotalReturn = value
	}
	if value, ok := _c.mutation.WinRate(); ok {
		_spec.SetField(strategyperformance.FieldWinRate, field.TypeOther, value)
		_node.WinRate = value
	}
	if value, ok := _c.mutation.ProfitLoss(); ok {
		_spec.SetField(strategyperformance.FieldProfitLoss, field.TypeOther, value)
		_node.ProfitLoss = value
	}
	if value, ok := _c.mutation.TradeCount(); ok {
		_spec.SetField(strategyperformance.FieldTradeCount, field.TypeInt64, value)
		_node.TradeCount = value
	}
	if value, ok := _c.mutation.LastTradeTime(); ok {
		_spec.SetField(strategyperformance.FieldLastTradeTime, field.TypeTime, value)
		_node.LastTradeTime = &value
	}
	if value, ok := _c.mutation.MaxDrawdown(); ok {
		_spec.SetField(strategyperformance.FieldMaxDrawdown, field.TypeOther, value)
		_node.MaxDrawdown = value
	}
	if value, ok := _c.mutation.SharpeRatio(); ok {
		_spec.SetField(strategyperformance.FieldSharpeRatio, field.TypeOther, value)
		_node.SharpeRatio = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(strategyperformance.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(strategyperformance.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.StrategyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   strategyperformance.StrategyTable,
			Columns: []string{strategyperformance.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StrategyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StrategyPerformanceCreateBulk is the builder for creating many StrategyPerformance entities in bulk.
type StrategyPerformanceCreateBulk struct {
	config
	err      error
	builders []*StrategyPerformanceCreate
}

// Save creates the StrategyPerformance entities in the database.
func (_c *StrategyPerformanceCreateBulk) Save(ctx context.Context) ([]*StrategyPerformance, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*StrategyPerformance, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StrategyPerformanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *StrategyPerformanceCreateBulk) SaveX(ctx context.Context) []*StrategyPerformance {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StrategyPerformanceCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StrategyPerformanceCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
