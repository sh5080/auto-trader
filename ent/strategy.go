// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auto-trader/ent/strategy"
	"auto-trader/ent/strategyperformance"
	"auto-trader/ent/strategystatus"
	"auto-trader/ent/strategytemplate"
	"auto-trader/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Strategy is the model entity for the Strategy schema.
type Strategy struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// StrategyID holds the value of the "strategy_id" field.
	StrategyID string `json:"strategy_id,omitempty"`
	// TemplateID holds the value of the "template_id" field.
	TemplateID *uuid.UUID `json:"template_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
	// UserInputs holds the value of the "user_inputs" field.
	UserInputs map[string]interface{} `json:"user_inputs,omitempty"`
	// Settings holds the value of the "settings" field.
	Settings map[string]interface{} `json:"settings,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StrategyQuery when eager-loading is set.
	Edges        StrategyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StrategyEdges holds the relations/edges for other nodes in the graph.
type StrategyEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Template holds the value of the template edge.
	Template *StrategyTemplate `json:"template,omitempty"`
	// Executions holds the value of the executions edge.
	Executions []*StrategyExecution `json:"executions,omitempty"`
	// Performance holds the value of the performance edge.
	Performance *StrategyPerformance `json:"performance,omitempty"`
	// Status holds the value of the status edge.
	Status *StrategyStatus `json:"status,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StrategyEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TemplateOrErr returns the Template value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StrategyEdges) TemplateOrErr() (*StrategyTemplate, error) {
	if e.Template != nil {
		return e.Template, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: strategytemplate.Label}
	}
	return nil, &NotLoadedError{edge: "template"}
}

// ExecutionsOrErr returns the Executions value or an error if the edge
// was not loaded in eager-loading.
func (e StrategyEdges) ExecutionsOrErr() ([]*StrategyExecution, error) {
	if e.loadedTypes[2] {
		return e.Executions, nil
	}
	return nil, &NotLoadedError{edge: "executions"}
}

// PerformanceOrErr returns the Performance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StrategyEdges) PerformanceOrErr() (*StrategyPerformance, error) {
	if e.Performance != nil {
		return e.Performance, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: strategyperformance.Label}
	}
	return nil, &NotLoadedError{edge: "performance"}
}

// StatusOrErr returns the Status value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StrategyEdges) StatusOrErr() (*StrategyStatus, error) {
	if e.Status != nil {
		return e.Status, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: strategystatus.Label}
	}
	return nil, &NotLoadedError{edge: "status"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Strategy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case strategy.FieldTemplateID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case strategy.FieldUserInputs, strategy.FieldSettings:
			values[i] = new([]byte)
		case strategy.FieldActive:
			values[i] = new(sql.NullBool)
		case strategy.FieldStrategyID, strategy.FieldName, strategy.FieldDescription, strategy.FieldSymbol:
			values[i] = new(sql.NullString)
		case strategy.FieldCreatedAt, strategy.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case strategy.FieldID, strategy.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Strategy fields.
func (_m *Strategy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case strategy.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case strategy.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				_m.UserID = *value
			}
		case strategy.FieldStrategyID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field strategy_id", values[i])
			} else if value.Valid {
				_m.StrategyID = value.String
			}
		case strategy.FieldTemplateID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field template_id", values[i])
			} else if value.Valid {
				_m.TemplateID = new(uuid.UUID)
				*_m.TemplateID = *value.S.(*uuid.UUID)
			}
		case strategy.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case strategy.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = new(string)
				*_m.Description = value.String
			}
		case strategy.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				_m.Symbol = value.String
			}
		case strategy.FieldUserInputs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field user_inputs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.UserInputs); err != nil {
					return fmt.Errorf("unmarshal field user_inputs: %w", err)
				}
			}
		case strategy.FieldSettings:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field settings", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Settings); err != nil {
					return fmt.Errorf("unmarshal field settings: %w", err)
				}
			}
		case strategy.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				_m.Active = value.Bool
			}
		case strategy.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = new(time.Time)
				*_m.CreatedAt = value.Time
			}
		case strategy.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = new(time.Time)
				*_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Strategy.
// This includes values selected through modifiers, order, etc.
func (_m *Strategy) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Strategy entity.
func (_m *Strategy) QueryUser() *UserQuery {
	return NewStrategyClient(_m.config).QueryUser(_m)
}

// QueryTemplate queries the "template" edge of the Strategy entity.
func (_m *Strategy) QueryTemplate() *StrategyTemplateQuery {
	return NewStrategyClient(_m.config).QueryTemplate(_m)
}

// QueryExecutions queries the "executions" edge of the Strategy entity.
func (_m *Strategy) QueryExecutions() *StrategyExecutionQuery {
	return NewStrategyClient(_m.config).QueryExecutions(_m)
}

// QueryPerformance queries the "performance" edge of the Strategy entity.
func (_m *Strategy) QueryPerformance() *StrategyPerformanceQuery {
	return NewStrategyClient(_m.config).QueryPerformance(_m)
}

// QueryStatus queries the "status" edge of the Strategy entity.
func (_m *Strategy) QueryStatus() *StrategyStatusQuery {
	return NewStrategyClient(_m.config).QueryStatus(_m)
}

// Update returns a builder for updating this Strategy.
// Note that you need to call Strategy.Unwrap() before calling this method if this Strategy
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Strategy) Update() *StrategyUpdateOne {
	return NewStrategyClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Strategy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Strategy) Unwrap() *Strategy {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Strategy is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Strategy) String() string {
	var builder strings.Builder
	builder.WriteString("Strategy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteString(", ")
	builder.WriteString("strategy_id=")
	builder.WriteString(_m.StrategyID)
	builder.WriteString(", ")
	if v := _m.TemplateID; v != nil {
		builder.WriteString("template_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	if v := _m.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("symbol=")
	builder.WriteString(_m.Symbol)
	builder.WriteString(", ")
	builder.WriteString("user_inputs=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserInputs))
	builder.WriteString(", ")
	builder.WriteString("settings=")
	builder.WriteString(fmt.Sprintf("%v", _m.Settings))
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", _m.Active))
	builder.WriteString(", ")
	if v := _m.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Strategies is a parsable slice of Strategy.
type Strategies []*Strategy
