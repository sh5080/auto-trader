// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auto-trader/ent/portfolio"
	"auto-trader/ent/predicate"
	"auto-trader/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// PortfolioUpdate is the builder for updating Portfolio entities.
type PortfolioUpdate struct {
	config
	hooks    []Hook
	mutation *PortfolioMutation
}

// Where appends a list predicates to the PortfolioUpdate builder.
func (_u *PortfolioUpdate) Where(ps ...predicate.Portfolio) *PortfolioUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *PortfolioUpdate) SetUserID(v uuid.UUID) *PortfolioUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *PortfolioUpdate) SetNillableUserID(v *uuid.UUID) *PortfolioUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetSymbol sets the "symbol" field.
func (_u *PortfolioUpdate) SetSymbol(v string) *PortfolioUpdate {
	_u.mutation.SetSymbol(v)
	return _u
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (_u *PortfolioUpdate) SetNillableSymbol(v *string) *PortfolioUpdate {
	if v != nil {
		_u.SetSymbol(*v)
	}
	return _u
}

// SetQuantity sets the "quantity" field.
func (_u *PortfolioUpdate) SetQuantity(v decimal.Decimal) *PortfolioUpdate {
	_u.mutation.SetQuantity(v)
	return _u
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (_u *PortfolioUpdate) SetNillableQuantity(v *decimal.Decimal) *PortfolioUpdate {
	if v != nil {
		_u.SetQuantity(*v)
	}
	return _u
}

// SetAveragePrice sets the "average_price" field.
func (_u *PortfolioUpdate) SetAveragePrice(v decimal.Decimal) *PortfolioUpdate {
	_u.mutation.SetAveragePrice(v)
	return _u
}

// SetNillableAveragePrice sets the "average_price" field if the given value is not nil.
func (_u *PortfolioUpdate) SetNillableAveragePrice(v *decimal.Decimal) *PortfolioUpdate {
	if v != nil {
		_u.SetAveragePrice(*v)
	}
	return _u
}

// SetCurrentPrice sets the "current_price" field.
func (_u *PortfolioUpdate) SetCurrentPrice(v decimal.Decimal) *PortfolioUpdate {
	_u.mutation.SetCurrentPrice(v)
	return _u
}

// SetNillableCurrentPrice sets the "current_price" field if the given value is not nil.
func (_u *PortfolioUpdate) SetNillableCurrentPrice(v *decimal.Decimal) *PortfolioUpdate {
	if v != nil {
		_u.SetCurrentPrice(*v)
	}
	return _u
}

// ClearCurrentPrice clears the value of the "current_price" field.
func (_u *PortfolioUpdate) ClearCurrentPrice() *PortfolioUpdate {
	_u.mutation.ClearCurrentPrice()
	return _u
}

// SetMarketValue sets the "market_value" field.
func (_u *PortfolioUpdate) SetMarketValue(v decimal.Decimal) *PortfolioUpdate {
	_u.mutation.SetMarketValue(v)
	return _u
}

// SetNillableMarketValue sets the "market_value" field if the given value is not nil.
func (_u *PortfolioUpdate) SetNillableMarketValue(v *decimal.Decimal) *PortfolioUpdate {
	if v != nil {
		_u.SetMarketValue(*v)
	}
	return _u
}

// SetTotalCost sets the "total_cost" field.
func (_u *PortfolioUpdate) SetTotalCost(v decimal.Decimal) *PortfolioUpdate {
	_u.mutation.SetTotalCost(v)
	return _u
}

// SetNillableTotalCost sets the "total_cost" field if the given value is not nil.
func (_u *PortfolioUpdate) SetNillableTotalCost(v *decimal.Decimal) *PortfolioUpdate {
	if v != nil {
		_u.SetTotalCost(*v)
	}
	return _u
}

// SetUnrealizedPnl sets the "unrealized_pnl" field.
func (_u *PortfolioUpdate) SetUnrealizedPnl(v decimal.Decimal) *PortfolioUpdate {
	_u.mutation.SetUnrealizedPnl(v)
	return _u
}

// SetNillableUnrealizedPnl sets the "unrealized_pnl" field if the given value is not nil.
func (_u *PortfolioUpdate) SetNillableUnrealizedPnl(v *decimal.Decimal) *PortfolioUpdate {
	if v != nil {
		_u.SetUnrealizedPnl(*v)
	}
	return _u
}

// SetRealizedPnl sets the "realized_pnl" field.
func (_u *PortfolioUpdate) SetRealizedPnl(v decimal.Decimal) *PortfolioUpdate {
	_u.mutation.SetRealizedPnl(v)
	return _u
}

// SetNillableRealizedPnl sets the "realized_pnl" field if the given value is not nil.
func (_u *PortfolioUpdate) SetNillableRealizedPnl(v *decimal.Decimal) *PortfolioUpdate {
	if v != nil {
		_u.SetRealizedPnl(*v)
	}
	return _u
}

// SetLastUpdated sets the "last_updated" field.
func (_u *PortfolioUpdate) SetLastUpdated(v time.Time) *PortfolioUpdate {
	_u.mutation.SetLastUpdated(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PortfolioUpdate) SetUpdatedAt(v time.Time) *PortfolioUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *PortfolioUpdate) ClearUpdatedAt() *PortfolioUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *PortfolioUpdate) SetUser(v *User) *PortfolioUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the PortfolioMutation object of the builder.
func (_u *PortfolioUpdate) Mutation() *PortfolioMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *PortfolioUpdate) ClearUser() *PortfolioUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PortfolioUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PortfolioUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PortfolioUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PortfolioUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PortfolioUpdate) defaults() {
	if _, ok := _u.mutation.LastUpdated(); !ok {
		v := portfolio.UpdateDefaultLastUpdated()
		_u.mutation.SetLastUpdated(v)
	}
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := portfolio.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PortfolioUpdate) check() error {
	if v, ok := _u.mutation.Symbol(); ok {
		if err := portfolio.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Portfolio.symbol": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Portfolio.user"`)
	}
	return nil
}

func (_u *PortfolioUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(portfolio.Table, portfolio.Columns, sqlgraph.NewFieldSpec(portfolio.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Symbol(); ok {
		_spec.SetField(portfolio.FieldSymbol, field.TypeString, value)
	}
	if value, ok := _u.mutation.Quantity(); ok {
		_spec.SetField(portfolio.FieldQuantity, field.TypeOther, value)
	}
	if value, ok := _u.mutation.AveragePrice(); ok {
		_spec.SetField(portfolio.FieldAveragePrice, field.TypeOther, value)
	}
	if value, ok := _u.mutation.CurrentPrice(); ok {
		_spec.SetField(portfolio.FieldCurrentPrice, field.TypeOther, value)
	}
	if _u.mutation.CurrentPriceCleared() {
		_spec.ClearField(portfolio.FieldCurrentPrice, field.TypeOther)
	}
	if value, ok := _u.mutation.MarketValue(); ok {
		_spec.SetField(portfolio.FieldMarketValue, field.TypeOther, value)
	}
	if value, ok := _u.mutation.TotalCost(); ok {
		_spec.SetField(portfolio.FieldTotalCost, field.TypeOther, value)
	}
	if value, ok := _u.mutation.UnrealizedPnl(); ok {
		_spec.SetField(portfolio.FieldUnrealizedPnl, field.TypeOther, value)
	}
	if value, ok := _u.mutation.RealizedPnl(); ok {
		_spec.SetField(portfolio.FieldRealizedPnl, field.TypeOther, value)
	}
	if value, ok := _u.mutation.LastUpdated(); ok {
		_spec.SetField(portfolio.FieldLastUpdated, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(portfolio.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(portfolio.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(portfolio.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portfolio.UserTable,
			Columns: []string{portfolio.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portfolio.UserTable,
			Columns: []string{portfolio.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{portfolio.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PortfolioUpdateOne is the builder for updating a single Portfolio entity.
type PortfolioUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PortfolioMutation
}

// SetUserID sets the "user_id" field.
func (_u *PortfolioUpdateOne) SetUserID(v uuid.UUID) *PortfolioUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *PortfolioUpdateOne) SetNillableUserID(v *uuid.UUID) *PortfolioUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetSymbol sets the "symbol" field.
func (_u *PortfolioUpdateOne) SetSymbol(v string) *PortfolioUpdateOne {
	_u.mutation.SetSymbol(v)
	return _u
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (_u *PortfolioUpdateOne) SetNillableSymbol(v *string) *PortfolioUpdateOne {
	if v != nil {
		_u.SetSymbol(*v)
	}
	return _u
}

// SetQuantity sets the "quantity" field.
func (_u *PortfolioUpdateOne) SetQuantity(v decimal.Decimal) *PortfolioUpdateOne {
	_u.mutation.SetQuantity(v)
	return _u
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (_u *PortfolioUpdateOne) SetNillableQuantity(v *decimal.Decimal) *PortfolioUpdateOne {
	if v != nil {
		_u.SetQuantity(*v)
	}
	return _u
}

// SetAveragePrice sets the "average_price" field.
func (_u *PortfolioUpdateOne) SetAveragePrice(v decimal.Decimal) *PortfolioUpdateOne {
	_u.mutation.SetAveragePrice(v)
	return _u
}

// SetNillableAveragePrice sets the "average_price" field if the given value is not nil.
func (_u *PortfolioUpdateOne) SetNillableAveragePrice(v *decimal.Decimal) *PortfolioUpdateOne {
	if v != nil {
		_u.SetAveragePrice(*v)
	}
	return _u
}

// SetCurrentPrice sets the "current_price" field.
func (_u *PortfolioUpdateOne) SetCurrentPrice(v decimal.Decimal) *PortfolioUpdateOne {
	_u.mutation.SetCurrentPrice(v)
	return _u
}

// SetNillableCurrentPrice sets the "current_price" field if the given value is not nil.
func (_u *PortfolioUpdateOne) SetNillableCurrentPrice(v *decimal.Decimal) *PortfolioUpdateOne {
	if v != nil {
		_u.SetCurrentPrice(*v)
	}
	return _u
}

// ClearCurrentPrice clears the value of the "current_price" field.
func (_u *PortfolioUpdateOne) ClearCurrentPrice() *PortfolioUpdateOne {
	_u.mutation.ClearCurrentPrice()
	return _u
}

// SetMarketValue sets the "market_value" field.
func (_u *PortfolioUpdateOne) SetMarketValue(v decimal.Decimal) *PortfolioUpdateOne {
	_u.mutation.SetMarketValue(v)
	return _u
}

// SetNillableMarketValue sets the "market_value" field if the given value is not nil.
func (_u *PortfolioUpdateOne) SetNillableMarketValue(v *decimal.Decimal) *PortfolioUpdateOne {
	if v != nil {
		_u.SetMarketValue(*v)
	}
	return _u
}

// SetTotalCost sets the "total_cost" field.
func (_u *PortfolioUpdateOne) SetTotalCost(v decimal.Decimal) *PortfolioUpdateOne {
	_u.mutation.SetTotalCost(v)
	return _u
}

// SetNillableTotalCost sets the "total_cost" field if the given value is not nil.
func (_u *PortfolioUpdateOne) SetNillableTotalCost(v *decimal.Decimal) *PortfolioUpdateOne {
	if v != nil {
		_u.SetTotalCost(*v)
	}
	return _u
}

// SetUnrealizedPnl sets the "unrealized_pnl" field.
func (_u *PortfolioUpdateOne) SetUnrealizedPnl(v decimal.Decimal) *PortfolioUpdateOne {
	_u.mutation.SetUnrealizedPnl(v)
	return _u
}

// SetNillableUnrealizedPnl sets the "unrealized_pnl" field if the given value is not nil.
func (_u *PortfolioUpdateOne) SetNillableUnrealizedPnl(v *decimal.Decimal) *PortfolioUpdateOne {
	if v != nil {
		_u.SetUnrealizedPnl(*v)
	}
	return _u
}

// SetRealizedPnl sets the "realized_pnl" field.
func (_u *PortfolioUpdateOne) SetRealizedPnl(v decimal.Decimal) *PortfolioUpdateOne {
	_u.mutation.SetRealizedPnl(v)
	return _u
}

// SetNillableRealizedPnl sets the "realized_pnl" field if the given value is not nil.
func (_u *PortfolioUpdateOne) SetNillableRealizedPnl(v *decimal.Decimal) *PortfolioUpdateOne {
	if v != nil {
		_u.SetRealizedPnl(*v)
	}
	return _u
}

// SetLastUpdated sets the "last_updated" field.
func (_u *PortfolioUpdateOne) SetLastUpdated(v time.Time) *PortfolioUpdateOne {
	_u.mutation.SetLastUpdated(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PortfolioUpdateOne) SetUpdatedAt(v time.Time) *PortfolioUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *PortfolioUpdateOne) ClearUpdatedAt() *PortfolioUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *PortfolioUpdateOne) SetUser(v *User) *PortfolioUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the PortfolioMutation object of the builder.
func (_u *PortfolioUpdateOne) Mutation() *PortfolioMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *PortfolioUpdateOne) ClearUser() *PortfolioUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the PortfolioUpdate builder.
func (_u *PortfolioUpdateOne) Where(ps ...predicate.Portfolio) *PortfolioUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PortfolioUpdateOne) Select(field string, fields ...string) *PortfolioUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Portfolio entity.
func (_u *PortfolioUpdateOne) Save(ctx context.Context) (*Portfolio, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PortfolioUpdateOne) SaveX(ctx context.Context) *Portfolio {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PortfolioUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PortfolioUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PortfolioUpdateOne) defaults() {
	if _, ok := _u.mutation.LastUpdated(); !ok {
		v := portfolio.UpdateDefaultLastUpdated()
		_u.mutation.SetLastUpdated(v)
	}
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := portfolio.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PortfolioUpdateOne) check() error {
	if v, ok := _u.mutation.Symbol(); ok {
		if err := portfolio.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Portfolio.symbol": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Portfolio.user"`)
	}
	return nil
}

func (_u *PortfolioUpdateOne) sqlSave(ctx context.Context) (_node *Portfolio, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(portfolio.Table, portfolio.Columns, sqlgraph.NewFieldSpec(portfolio.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Portfolio.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, portfolio.FieldID)
		for _, f := range fields {
			if !portfolio.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != portfolio.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Symbol(); ok {
		_spec.SetField(portfolio.FieldSymbol, field.TypeString, value)
	}
	if value, ok := _u.mutation.Quantity(); ok {
		_spec.SetField(portfolio.FieldQuantity, field.TypeOther, value)
	}
	if value, ok := _u.mutation.AveragePrice(); ok {
		_spec.SetField(portfolio.FieldAveragePrice, field.TypeOther, value)
	}
	if value, ok := _u.mutation.CurrentPrice(); ok {
		_spec.SetField(portfolio.FieldCurrentPrice, field.TypeOther, value)
	}
	if _u.mutation.CurrentPriceCleared() {
		_spec.ClearField(portfolio.FieldCurrentPrice, field.TypeOther)
	}
	if value, ok := _u.mutation.MarketValue(); ok {
		_spec.SetField(portfolio.FieldMarketValue, field.TypeOther, value)
	}
	if value, ok := _u.mutation.TotalCost(); ok {
		_spec.SetField(portfolio.FieldTotalCost, field.TypeOther, value)
	}
	if value, ok := _u.mutation.UnrealizedPnl(); ok {
		_spec.SetField(portfolio.FieldUnrealizedPnl, field.TypeOther, value)
	}
	if value, ok := _u.mutation.RealizedPnl(); ok {
		_spec.SetField(portfolio.FieldRealizedPnl, field.TypeOther, value)
	}
	if value, ok := _u.mutation.LastUpdated(); ok {
		_spec.SetField(portfolio.FieldLastUpdated, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(portfolio.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(portfolio.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(portfolio.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portfolio.UserTable,
			Columns: []string{portfolio.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portfolio.UserTable,
			Columns: []string{portfolio.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Portfolio{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{portfolio.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
