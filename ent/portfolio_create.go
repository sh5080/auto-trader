// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auto-trader/ent/portfolio"
	"auto-trader/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// PortfolioCreate is the builder for creating a Portfolio entity.
type PortfolioCreate struct {
	config
	mutation *PortfolioMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (_c *PortfolioCreate) SetUserID(v uuid.UUID) *PortfolioCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetSymbol sets the "symbol" field.
func (_c *PortfolioCreate) SetSymbol(v string) *PortfolioCreate {
	_c.mutation.SetSymbol(v)
	return _c
}

// SetQuantity sets the "quantity" field.
func (_c *PortfolioCreate) SetQuantity(v decimal.Decimal) *PortfolioCreate {
	_c.mutation.SetQuantity(v)
	return _c
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (_c *PortfolioCreate) SetNillableQuantity(v *decimal.Decimal) *PortfolioCreate {
	if v != nil {
		_c.SetQuantity(*v)
	}
	return _c
}

// SetAveragePrice sets the "average_price" field.
func (_c *PortfolioCreate) SetAveragePrice(v decimal.Decimal) *PortfolioCreate {
	_c.mutation.SetAveragePrice(v)
	return _c
}

// SetNillableAveragePrice sets the "average_price" field if the given value is not nil.
func (_c *PortfolioCreate) SetNillableAveragePrice(v *decimal.Decimal) *PortfolioCreate {
	if v != nil {
		_c.SetAveragePrice(*v)
	}
	return _c
}

// SetCurrentPrice sets the "current_price" field.
func (_c *PortfolioCreate) SetCurrentPrice(v decimal.Decimal) *PortfolioCreate {
	_c.mutation.SetCurrentPrice(v)
	return _c
}

// SetNillableCurrentPrice sets the "current_price" field if the given value is not nil.
func (_c *PortfolioCreate) SetNillableCurrentPrice(v *decimal.Decimal) *PortfolioCreate {
	if v != nil {
		_c.SetCurrentPrice(*v)
	}
	return _c
}

// SetMarketValue sets the "market_value" field.
func (_c *PortfolioCreate) SetMarketValue(v decimal.Decimal) *PortfolioCreate {
	_c.mutation.SetMarketValue(v)
	return _c
}

// SetNillableMarketValue sets the "market_value" field if the given value is not nil.
func (_c *PortfolioCreate) SetNillableMarketValue(v *decimal.Decimal) *PortfolioCreate {
	if v != nil {
		_c.SetMarketValue(*v)
	}
	return _c
}

// SetTotalCost sets the "total_cost" field.
func (_c *PortfolioCreate) SetTotalCost(v decimal.Decimal) *PortfolioCreate {
	_c.mutation.SetTotalCost(v)
	return _c
}

// SetNillableTotalCost sets the "total_cost" field if the given value is not nil.
func (_c *PortfolioCreate) SetNillableTotalCost(v *decimal.Decimal) *PortfolioCreate {
	if v != nil {
		_c.SetTotalCost(*v)
	}
	return _c
}

// SetUnrealizedPnl sets the "unrealized_pnl" field.
func (_c *PortfolioCreate) SetUnrealizedPnl(v decimal.Decimal) *PortfolioCreate {
	_c.mutation.SetUnrealizedPnl(v)
	return _c
}

// SetNillableUnrealizedPnl sets the "unrealized_pnl" field if the given value is not nil.
func (_c *PortfolioCreate) SetNillableUnrealizedPnl(v *decimal.Decimal) *PortfolioCreate {
	if v != nil {
		_c.SetUnrealizedPnl(*v)
	}
	return _c
}

// SetRealizedPnl sets the "realized_pnl" field.
func (_c *PortfolioCreate) SetRealizedPnl(v decimal.Decimal) *PortfolioCreate {
	_c.mutation.SetRealizedPnl(v)
	return _c
}

// SetNillableRealizedPnl sets the "realized_pnl" field if the given value is not nil.
func (_c *PortfolioCreate) SetNillableRealizedPnl(v *decimal.Decimal) *PortfolioCreate {
	if v != nil {
		_c.SetRealizedPnl(*v)
	}
	return _c
}

// SetLastUpdated sets the "last_updated" field.
func (_c *PortfolioCreate) SetLastUpdated(v time.Time) *PortfolioCreate {
	_c.mutation.SetLastUpdated(v)
	return _c
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (_c *PortfolioCreate) SetNillableLastUpdated(v *time.Time) *PortfolioCreate {
	if v != nil {
		_c.SetLastUpdated(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *PortfolioCreate) SetCreatedAt(v time.Time) *PortfolioCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *PortfolioCreate) SetNillableCreatedAt(v *time.Time) *PortfolioCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *PortfolioCreate) SetUpdatedAt(v time.Time) *PortfolioCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *PortfolioCreate) SetNillableUpdatedAt(v *time.Time) *PortfolioCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *PortfolioCreate) SetID(v uuid.UUID) *PortfolioCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *PortfolioCreate) SetNillableID(v *uuid.UUID) *PortfolioCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *PortfolioCreate) SetUser(v *User) *PortfolioCreate {
	return _c.SetUserID(v.ID)
}

// Mutation returns the PortfolioMutation object of the builder.
func (_c *PortfolioCreate) Mutation() *PortfolioMutation {
	return _c.mutation
}

// Save creates the Portfolio in the database.
func (_c *PortfolioCreate) Save(ctx context.Context) (*Portfolio, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PortfolioCreate) SaveX(ctx context.Context) *Portfolio {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PortfolioCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PortfolioCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *PortfolioCreate) defaults() {
	if _, ok := _c.mutation.Quantity(); !ok {
		v := portfolio.DefaultQuantity
		_c.mutation.SetQuantity(v)
	}
	if _, ok := _c.mutation.AveragePrice(); !ok {
		v := portfolio.DefaultAveragePrice
		_c.mutation.SetAveragePrice(v)
	}
	if _, ok := _c.mutation.MarketValue(); !ok {
		v := portfolio.DefaultMarketValue
		_c.mutation.SetMarketValue(v)
	}
	if _, ok := _c.mutation.TotalCost(); !ok {
		v := portfolio.DefaultTotalCost
		_c.mutation.SetTotalCost(v)
	}
	if _, ok := _c.mutation.UnrealizedPnl(); !ok {
		v := portfolio.DefaultUnrealizedPnl
		_c.mutation.SetUnrealizedPnl(v)
	}
	if _, ok := _c.mutation.RealizedPnl(); !ok {
		v := portfolio.DefaultRealizedPnl
		_c.mutation.SetRealizedPnl(v)
	}
	if _, ok := _c.mutation.LastUpdated(); !ok {
		v := portfolio.DefaultLastUpdated()
		_c.mutation.SetLastUpdated(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := portfolio.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := portfolio.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := portfolio.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PortfolioCreate) check() error {
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Portfolio.user_id"`)}
	}
	if _, ok := _c.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "Portfolio.symbol"`)}
	}
	if v, ok := _c.mutation.Symbol(); ok {
		if err := portfolio.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Portfolio.symbol": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "Portfolio.quantity"`)}
	}
	if _, ok := _c.mutation.AveragePrice(); !ok {
		return &ValidationError{Name: "average_price", err: errors.New(`ent: missing required field "Portfolio.average_price"`)}
	}
	if _, ok := _c.mutation.MarketValue(); !ok {
		return &ValidationError{Name: "market_value", err: errors.New(`ent: missing required field "Portfolio.market_value"`)}
	}
	if _, ok := _c.mutation.TotalCost(); !ok {
		return &ValidationError{Name: "total_cost", err: errors.New(`ent: missing required field "Portfolio.total_cost"`)}
	}
	if _, ok := _c.mutation.UnrealizedPnl(); !ok {
		return &ValidationError{Name: "unrealized_pnl", err: errors.New(`ent: missing required field "Portfolio.unrealized_pnl"`)}
	}
	if _, ok := _c.mutation.RealizedPnl(); !ok {
		return &ValidationError{Name: "realized_pnl", err: errors.New(`ent: missing required field "Portfolio.realized_pnl"`)}
	}
	if _, ok := _c.mutation.LastUpdated(); !ok {
		return &ValidationError{Name: "last_updated", err: errors.New(`ent: missing required field "Portfolio.last_updated"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Portfolio.user"`)}
	}
	return nil
}

func (_c *PortfolioCreate) sqlSave(ctx context.Context) (*Portfolio, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PortfolioCreate) createSpec() (*Portfolio, *sqlgraph.CreateSpec) {
	var (
		_node = &Portfolio{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(portfolio.Table, sqlgraph.NewFieldSpec(portfolio.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.Symbol(); ok {
		_spec.SetField(portfolio.FieldSymbol, field.TypeString, value)
		_node.Symbol = value
	}
	if value, ok := _c.mutation.Quantity(); ok {
		_spec.SetField(portfolio.FieldQuantity, field.TypeOther, value)
		_node.Quantity = value
	}
	if value, ok := _c.mutation.AveragePrice(); ok {
		_spec.SetField(portfolio.FieldAveragePrice, field.TypeOther, value)
		_node.AveragePrice = value
	}
	if value, ok := _c.mutation.CurrentPrice(); ok {
		_spec.SetField(portfolio.FieldCurrentPrice, field.TypeOther, value)
		_node.CurrentPrice = &value
	}
	if value, ok := _c.mutation.MarketValue(); ok {
		_spec.SetField(portfolio.FieldMarketValue, field.TypeOther, value)
		_node.MarketValue = value
	}
	if value, ok := _c.mutation.TotalCost(); ok {
		_spec.SetField(portfolio.FieldTotalCost, field.TypeOther, value)
		_node.TotalCost = value
	}
	if value, ok := _c.mutation.UnrealizedPnl(); ok {
		_spec.SetField(portfolio.FieldUnrealizedPnl, field.TypeOther, value)
		_node.UnrealizedPnl = value
	}
	if value, ok := _c.mutation.RealizedPnl(); ok {
		_spec.SetField(portfolio.FieldRealizedPnl, field.TypeOther, value)
		_node.RealizedPnl = value
	}
	if value, ok := _c.mutation.LastUpdated(); ok {
		_spec.SetField(portfolio.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(portfolio.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(portfolio.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portfolio.UserTable,
			Columns: []string{portfolio.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PortfolioCreateBulk is the builder for creating many Portfolio entities in bulk.
type PortfolioCreateBulk struct {
	config
	err      error
	builders []*PortfolioCreate
}

// Save creates the Portfolio entities in the database.
func (_c *PortfolioCreateBulk) Save(ctx context.Context) ([]*Portfolio, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Portfolio, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PortfolioMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PortfolioCreateBulk) SaveX(ctx context.Context) []*Portfolio {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PortfolioCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PortfolioCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
