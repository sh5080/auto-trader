// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auto-trader/ent/strategy"
	"auto-trader/ent/strategystatus"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// StrategyStatusCreate is the builder for creating a StrategyStatus entity.
type StrategyStatusCreate struct {
	config
	mutation *StrategyStatusMutation
	hooks    []Hook
}

// SetStrategyID sets the "strategy_id" field.
func (_c *StrategyStatusCreate) SetStrategyID(v uuid.UUID) *StrategyStatusCreate {
	_c.mutation.SetStrategyID(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *StrategyStatusCreate) SetStatus(v strategystatus.Status) *StrategyStatusCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *StrategyStatusCreate) SetNillableStatus(v *strategystatus.Status) *StrategyStatusCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetLastExecution sets the "last_execution" field.
func (_c *StrategyStatusCreate) SetLastExecution(v time.Time) *StrategyStatusCreate {
	_c.mutation.SetLastExecution(v)
	return _c
}

// SetNillableLastExecution sets the "last_execution" field if the given value is not nil.
func (_c *StrategyStatusCreate) SetNillableLastExecution(v *time.Time) *StrategyStatusCreate {
	if v != nil {
		_c.SetLastExecution(*v)
	}
	return _c
}

// SetExecutionCount sets the "execution_count" field.
func (_c *StrategyStatusCreate) SetExecutionCount(v int64) *StrategyStatusCreate {
	_c.mutation.SetExecutionCount(v)
	return _c
}

// SetNillableExecutionCount sets the "execution_count" field if the given value is not nil.
func (_c *StrategyStatusCreate) SetNillableExecutionCount(v *int64) *StrategyStatusCreate {
	if v != nil {
		_c.SetExecutionCount(*v)
	}
	return _c
}

// SetErrorMessage sets the "error_message" field.
func (_c *StrategyStatusCreate) SetErrorMessage(v string) *StrategyStatusCreate {
	_c.mutation.SetErrorMessage(v)
	return _c
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_c *StrategyStatusCreate) SetNillableErrorMessage(v *string) *StrategyStatusCreate {
	if v != nil {
		_c.SetErrorMessage(*v)
	}
	return _c
}

// SetUptimeSeconds sets the "uptime_seconds" field.
func (_c *StrategyStatusCreate) SetUptimeSeconds(v int64) *StrategyStatusCreate {
	_c.mutation.SetUptimeSeconds(v)
	return _c
}

// SetNillableUptimeSeconds sets the "uptime_seconds" field if the given value is not nil.
func (_c *StrategyStatusCreate) SetNillableUptimeSeconds(v *int64) *StrategyStatusCreate {
	if v != nil {
		_c.SetUptimeSeconds(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *StrategyStatusCreate) SetCreatedAt(v time.Time) *StrategyStatusCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *StrategyStatusCreate) SetNillableCreatedAt(v *time.Time) *StrategyStatusCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *StrategyStatusCreate) SetUpdatedAt(v time.Time) *StrategyStatusCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *StrategyStatusCreate) SetNillableUpdatedAt(v *time.Time) *StrategyStatusCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetStrategy sets the "strategy" edge to the Strategy entity.
func (_c *StrategyStatusCreate) SetStrategy(v *Strategy) *StrategyStatusCreate {
	return _c.SetStrategyID(v.ID)
}

// Mutation returns the StrategyStatusMutation object of the builder.
func (_c *StrategyStatusCreate) Mutation() *StrategyStatusMutation {
	return _c.mutation
}

// Save creates the StrategyStatus in the database.
func (_c *StrategyStatusCreate) Save(ctx context.Context) (*StrategyStatus, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *StrategyStatusCreate) SaveX(ctx context.Context) *StrategyStatus {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StrategyStatusCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StrategyStatusCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *StrategyStatusCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := strategystatus.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.ExecutionCount(); !ok {
		v := strategystatus.DefaultExecutionCount
		_c.mutation.SetExecutionCount(v)
	}
	if _, ok := _c.mutation.UptimeSeconds(); !ok {
		v := strategystatus.DefaultUptimeSeconds
		_c.mutation.SetUptimeSeconds(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := strategystatus.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := strategystatus.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *StrategyStatusCreate) check() error {
	if _, ok := _c.mutation.StrategyID(); !ok {
		return &ValidationError{Name: "strategy_id", err: errors.New(`ent: missing required field "StrategyStatus.strategy_id"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "StrategyStatus.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := strategystatus.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "StrategyStatus.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ExecutionCount(); !ok {
		return &ValidationError{Name: "execution_count", err: errors.New(`ent: missing required field "StrategyStatus.execution_count"`)}
	}
	if _, ok := _c.mutation.UptimeSeconds(); !ok {
		return &ValidationError{Name: "uptime_seconds", err: errors.New(`ent: missing required field "StrategyStatus.uptime_seconds"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "StrategyStatus.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "StrategyStatus.updated_at"`)}
	}
	if len(_c.mutation.StrategyIDs()) == 0 {
		return &ValidationError{Name: "strategy", err: errors.New(`ent: missing required edge "StrategyStatus.strategy"`)}
	}
	return nil
}

func (_c *StrategyStatusCreate) sqlSave(ctx context.Context) (*StrategyStatus, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *StrategyStatusCreate) createSpec() (*StrategyStatus, *sqlgraph.CreateSpec) {
	var (
		_node = &StrategyStatus{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(strategystatus.Table, sqlgraph.NewFieldSpec(strategystatus.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(strategystatus.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.LastExecution(); ok {
		_spec.SetField(strategystatus.FieldLastExecution, field.TypeTime, value)
		_node.LastExecution = &value
	}
	if value, ok := _c.mutation.ExecutionCount(); ok {
		_spec.SetField(strategystatus.FieldExecutionCount, field.TypeInt64, value)
		_node.ExecutionCount = value
	}
	if value, ok := _c.mutation.ErrorMessage(); ok {
		_spec.SetField(strategystatus.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = &value
	}
	if value, ok := _c.mutation.UptimeSeconds(); ok {
		_spec.SetField(strategystatus.FieldUptimeSeconds, field.TypeInt64, value)
		_node.UptimeSeconds = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(strategystatus.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(strategystatus.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.StrategyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   strategystatus.StrategyTable,
			Columns: []string{strategystatus.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StrategyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StrategyStatusCreateBulk is the builder for creating many StrategyStatus entities in bulk.
type StrategyStatusCreateBulk struct {
	config
	err      error
	builders []*StrategyStatusCreate
}

// Save creates the StrategyStatus entities in the database.
func (_c *StrategyStatusCreateBulk) Save(ctx context.Context) ([]*StrategyStatus, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*StrategyStatus, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StrategyStatusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *StrategyStatusCreateBulk) SaveX(ctx context.Context) []*StrategyStatus {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StrategyStatusCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StrategyStatusCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
