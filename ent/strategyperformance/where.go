// Code generated by ent, DO NOT EDIT.

package strategyperformance

import (
	"auto-trader/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldLTE(FieldID, id))
}

// StrategyID applies equality check predicate on the "strategy_id" field. It's identical to StrategyIDEQ.
func StrategyID(v uuid.UUID) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldStrategyID, v))
}

// TotalReturn applies equality check predicate on the "total_return" field. It's identical to TotalReturnEQ.
func TotalReturn(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldTotalReturn, v))
}

// WinRate applies equality check predicate on the "win_rate" field. It's identical to WinRateEQ.
func WinRate(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldWinRate, v))
}

// ProfitLoss applies equality check predicate on the "profit_loss" field. It's identical to ProfitLossEQ.
func ProfitLoss(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldProfitLoss, v))
}

// TradeCount applies equality check predicate on the "trade_count" field. It's identical to TradeCountEQ.
func TradeCount(v int64) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldTradeCount, v))
}

// LastTradeTime applies equality check predicate on the "last_trade_time" field. It's identical to LastTradeTimeEQ.
func LastTradeTime(v time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldLastTradeTime, v))
}

// MaxDrawdown applies equality check predicate on the "max_drawdown" field. It's identical to MaxDrawdownEQ.
func MaxDrawdown(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldMaxDrawdown, v))
}

// SharpeRatio applies equality check predicate on the "sharpe_ratio" field. It's identical to SharpeRatioEQ.
func SharpeRatio(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldSharpeRatio, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldUpdatedAt, v))
}

// StrategyIDEQ applies the EQ predicate on the "strategy_id" field.
func StrategyIDEQ(v uuid.UUID) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldStrategyID, v))
}

// StrategyIDNEQ applies the NEQ predicate on the "strategy_id" field.
func StrategyIDNEQ(v uuid.UUID) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNEQ(FieldStrategyID, v))
}

// StrategyIDIn applies the In predicate on the "strategy_id" field.
func StrategyIDIn(vs ...uuid.UUID) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldIn(FieldStrategyID, vs...))
}

// StrategyIDNotIn applies the NotIn predicate on the "strategy_id" field.
func StrategyIDNotIn(vs ...uuid.UUID) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNotIn(FieldStrategyID, vs...))
}

// TotalReturnEQ applies the EQ predicate on the "total_return" field.
func TotalReturnEQ(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldTotalReturn, v))
}

// TotalReturnNEQ applies the NEQ predicate on the "total_return" field.
func TotalReturnNEQ(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNEQ(FieldTotalReturn, v))
}

// TotalReturnIn applies the In predicate on the "total_return" field.
func TotalReturnIn(vs ...decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldIn(FieldTotalReturn, vs...))
}

// TotalReturnNotIn applies the NotIn predicate on the "total_return" field.
func TotalReturnNotIn(vs ...decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNotIn(FieldTotalReturn, vs...))
}

// TotalReturnGT applies the GT predicate on the "total_return" field.
func TotalReturnGT(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldGT(FieldTotalReturn, v))
}

// TotalReturnGTE applies the GTE predicate on the "total_return" field.
func TotalReturnGTE(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldGTE(FieldTotalReturn, v))
}

// TotalReturnLT applies the LT predicate on the "total_return" field.
func TotalReturnLT(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldLT(FieldTotalReturn, v))
}

// TotalReturnLTE applies the LTE predicate on the "total_return" field.
func TotalReturnLTE(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldLTE(FieldTotalReturn, v))
}

// WinRateEQ applies the EQ predicate on the "win_rate" field.
func WinRateEQ(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldWinRate, v))
}

// WinRateNEQ applies the NEQ predicate on the "win_rate" field.
func WinRateNEQ(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNEQ(FieldWinRate, v))
}

// WinRateIn applies the In predicate on the "win_rate" field.
func WinRateIn(vs ...decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldIn(FieldWinRate, vs...))
}

// WinRateNotIn applies the NotIn predicate on the "win_rate" field.
func WinRateNotIn(vs ...decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNotIn(FieldWinRate, vs...))
}

// WinRateGT applies the GT predicate on the "win_rate" field.
func WinRateGT(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldGT(FieldWinRate, v))
}

// WinRateGTE applies the GTE predicate on the "win_rate" field.
func WinRateGTE(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldGTE(FieldWinRate, v))
}

// WinRateLT applies the LT predicate on the "win_rate" field.
func WinRateLT(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldLT(FieldWinRate, v))
}

// WinRateLTE applies the LTE predicate on the "win_rate" field.
func WinRateLTE(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldLTE(FieldWinRate, v))
}

// ProfitLossEQ applies the EQ predicate on the "profit_loss" field.
func ProfitLossEQ(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldProfitLoss, v))
}

// ProfitLossNEQ applies the NEQ predicate on the "profit_loss" field.
func ProfitLossNEQ(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNEQ(FieldProfitLoss, v))
}

// ProfitLossIn applies the In predicate on the "profit_loss" field.
func ProfitLossIn(vs ...decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldIn(FieldProfitLoss, vs...))
}

// ProfitLossNotIn applies the NotIn predicate on the "profit_loss" field.
func ProfitLossNotIn(vs ...decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNotIn(FieldProfitLoss, vs...))
}

// ProfitLossGT applies the GT predicate on the "profit_loss" field.
func ProfitLossGT(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldGT(FieldProfitLoss, v))
}

// ProfitLossGTE applies the GTE predicate on the "profit_loss" field.
func ProfitLossGTE(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldGTE(FieldProfitLoss, v))
}

// ProfitLossLT applies the LT predicate on the "profit_loss" field.
func ProfitLossLT(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldLT(FieldProfitLoss, v))
}

// ProfitLossLTE applies the LTE predicate on the "profit_loss" field.
func ProfitLossLTE(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldLTE(FieldProfitLoss, v))
}

// TradeCountEQ applies the EQ predicate on the "trade_count" field.
func TradeCountEQ(v int64) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldTradeCount, v))
}

// TradeCountNEQ applies the NEQ predicate on the "trade_count" field.
func TradeCountNEQ(v int64) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNEQ(FieldTradeCount, v))
}

// TradeCountIn applies the In predicate on the "trade_count" field.
func TradeCountIn(vs ...int64) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldIn(FieldTradeCount, vs...))
}

// TradeCountNotIn applies the NotIn predicate on the "trade_count" field.
func TradeCountNotIn(vs ...int64) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNotIn(FieldTradeCount, vs...))
}

// TradeCountGT applies the GT predicate on the "trade_count" field.
func TradeCountGT(v int64) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldGT(FieldTradeCount, v))
}

// TradeCountGTE applies the GTE predicate on the "trade_count" field.
func TradeCountGTE(v int64) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldGTE(FieldTradeCount, v))
}

// TradeCountLT applies the LT predicate on the "trade_count" field.
func TradeCountLT(v int64) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldLT(FieldTradeCount, v))
}

// TradeCountLTE applies the LTE predicate on the "trade_count" field.
func TradeCountLTE(v int64) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldLTE(FieldTradeCount, v))
}

// LastTradeTimeEQ applies the EQ predicate on the "last_trade_time" field.
func LastTradeTimeEQ(v time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldLastTradeTime, v))
}

// LastTradeTimeNEQ applies the NEQ predicate on the "last_trade_time" field.
func LastTradeTimeNEQ(v time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNEQ(FieldLastTradeTime, v))
}

// LastTradeTimeIn applies the In predicate on the "last_trade_time" field.
func LastTradeTimeIn(vs ...time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldIn(FieldLastTradeTime, vs...))
}

// LastTradeTimeNotIn applies the NotIn predicate on the "last_trade_time" field.
func LastTradeTimeNotIn(vs ...time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNotIn(FieldLastTradeTime, vs...))
}

// LastTradeTimeGT applies the GT predicate on the "last_trade_time" field.
func LastTradeTimeGT(v time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldGT(FieldLastTradeTime, v))
}

// LastTradeTimeGTE applies the GTE predicate on the "last_trade_time" field.
func LastTradeTimeGTE(v time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldGTE(FieldLastTradeTime, v))
}

// LastTradeTimeLT applies the LT predicate on the "last_trade_time" field.
func LastTradeTimeLT(v time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldLT(FieldLastTradeTime, v))
}

// LastTradeTimeLTE applies the LTE predicate on the "last_trade_time" field.
func LastTradeTimeLTE(v time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldLTE(FieldLastTradeTime, v))
}

// LastTradeTimeIsNil applies the IsNil predicate on the "last_trade_time" field.
func LastTradeTimeIsNil() predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldIsNull(FieldLastTradeTime))
}

// LastTradeTimeNotNil applies the NotNil predicate on the "last_trade_time" field.
func LastTradeTimeNotNil() predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNotNull(FieldLastTradeTime))
}

// MaxDrawdownEQ applies the EQ predicate on the "max_drawdown" field.
func MaxDrawdownEQ(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldMaxDrawdown, v))
}

// MaxDrawdownNEQ applies the NEQ predicate on the "max_drawdown" field.
func MaxDrawdownNEQ(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNEQ(FieldMaxDrawdown, v))
}

// MaxDrawdownIn applies the In predicate on the "max_drawdown" field.
func MaxDrawdownIn(vs ...decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldIn(FieldMaxDrawdown, vs...))
}

// MaxDrawdownNotIn applies the NotIn predicate on the "max_drawdown" field.
func MaxDrawdownNotIn(vs ...decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNotIn(FieldMaxDrawdown, vs...))
}

// MaxDrawdownGT applies the GT predicate on the "max_drawdown" field.
func MaxDrawdownGT(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldGT(FieldMaxDrawdown, v))
}

// MaxDrawdownGTE applies the GTE predicate on the "max_drawdown" field.
func MaxDrawdownGTE(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldGTE(FieldMaxDrawdown, v))
}

// MaxDrawdownLT applies the LT predicate on the "max_drawdown" field.
func MaxDrawdownLT(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldLT(FieldMaxDrawdown, v))
}

// MaxDrawdownLTE applies the LTE predicate on the "max_drawdown" field.
func MaxDrawdownLTE(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldLTE(FieldMaxDrawdown, v))
}

// SharpeRatioEQ applies the EQ predicate on the "sharpe_ratio" field.
func SharpeRatioEQ(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldSharpeRatio, v))
}

// SharpeRatioNEQ applies the NEQ predicate on the "sharpe_ratio" field.
func SharpeRatioNEQ(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNEQ(FieldSharpeRatio, v))
}

// SharpeRatioIn applies the In predicate on the "sharpe_ratio" field.
func SharpeRatioIn(vs ...decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldIn(FieldSharpeRatio, vs...))
}

// SharpeRatioNotIn applies the NotIn predicate on the "sharpe_ratio" field.
func SharpeRatioNotIn(vs ...decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNotIn(FieldSharpeRatio, vs...))
}

// SharpeRatioGT applies the GT predicate on the "sharpe_ratio" field.
func SharpeRatioGT(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldGT(FieldSharpeRatio, v))
}

// SharpeRatioGTE applies the GTE predicate on the "sharpe_ratio" field.
func SharpeRatioGTE(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldGTE(FieldSharpeRatio, v))
}

// SharpeRatioLT applies the LT predicate on the "sharpe_ratio" field.
func SharpeRatioLT(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldLT(FieldSharpeRatio, v))
}

// SharpeRatioLTE applies the LTE predicate on the "sharpe_ratio" field.
func SharpeRatioLTE(v decimal.Decimal) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldLTE(FieldSharpeRatio, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasStrategy applies the HasEdge predicate on the "strategy" edge.
func HasStrategy() predicate.StrategyPerformance {
	return predicate.StrategyPerformance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, StrategyTable, StrategyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStrategyWith applies the HasEdge predicate on the "strategy" edge with a given conditions (other predicates).
func HasStrategyWith(preds ...predicate.Strategy) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(func(s *sql.Selector) {
		step := newStrategyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StrategyPerformance) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StrategyPerformance) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StrategyPerformance) predicate.StrategyPerformance {
	return predicate.StrategyPerformance(sql.NotPredicates(p))
}
