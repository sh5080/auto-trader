// Code generated by ent, DO NOT EDIT.

package strategyperformance

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the strategyperformance type in the database.
	Label = "strategy_performance"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStrategyID holds the string denoting the strategy_id field in the database.
	FieldStrategyID = "strategy_id"
	// FieldTotalReturn holds the string denoting the total_return field in the database.
	FieldTotalReturn = "total_return"
	// FieldWinRate holds the string denoting the win_rate field in the database.
	FieldWinRate = "win_rate"
	// FieldProfitLoss holds the string denoting the profit_loss field in the database.
	FieldProfitLoss = "profit_loss"
	// FieldTradeCount holds the string denoting the trade_count field in the database.
	FieldTradeCount = "trade_count"
	// FieldLastTradeTime holds the string denoting the last_trade_time field in the database.
	FieldLastTradeTime = "last_trade_time"
	// FieldMaxDrawdown holds the string denoting the max_drawdown field in the database.
	FieldMaxDrawdown = "max_drawdown"
	// FieldSharpeRatio holds the string denoting the sharpe_ratio field in the database.
	FieldSharpeRatio = "sharpe_ratio"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeStrategy holds the string denoting the strategy edge name in mutations.
	EdgeStrategy = "strategy"
	// Table holds the table name of the strategyperformance in the database.
	Table = "strategy_performances"
	// StrategyTable is the table that holds the strategy relation/edge.
	StrategyTable = "strategy_performances"
	// StrategyInverseTable is the table name for the Strategy entity.
	// It exists in this package in order to avoid circular dependency with the "strategy" package.
	StrategyInverseTable = "strategies"
	// StrategyColumn is the table column denoting the strategy relation/edge.
	StrategyColumn = "strategy_id"
)

// Columns holds all SQL columns for strategyperformance fields.
var Columns = []string{
	FieldID,
	FieldStrategyID,
	FieldTotalReturn,
	FieldWinRate,
	FieldProfitLoss,
	FieldTradeCount,
	FieldLastTradeTime,
	FieldMaxDrawdown,
	FieldSharpeRatio,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTotalReturn holds the default value on creation for the "total_return" field.
	DefaultTotalReturn decimal.Decimal
	// DefaultWinRate holds the default value on creation for the "win_rate" field.
	DefaultWinRate decimal.Decimal
	// DefaultProfitLoss holds the default value on creation for the "profit_loss" field.
	DefaultProfitLoss decimal.Decimal
	// DefaultTradeCount holds the default value on creation for the "trade_count" field.
	DefaultTradeCount int64
	// DefaultMaxDrawdown holds the default value on creation for the "max_drawdown" field.
	DefaultMaxDrawdown decimal.Decimal
	// DefaultSharpeRatio holds the default value on creation for the "sharpe_ratio" field.
	DefaultSharpeRatio decimal.Decimal
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the StrategyPerformance queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStrategyID orders the results by the strategy_id field.
func ByStrategyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStrategyID, opts...).ToFunc()
}

// ByTotalReturn orders the results by the total_return field.
func ByTotalReturn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalReturn, opts...).ToFunc()
}

// ByWinRate orders the results by the win_rate field.
func ByWinRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWinRate, opts...).ToFunc()
}

// ByProfitLoss orders the results by the profit_loss field.
func ByProfitLoss(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfitLoss, opts...).ToFunc()
}

// ByTradeCount orders the results by the trade_count field.
func ByTradeCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTradeCount, opts...).ToFunc()
}

// ByLastTradeTime orders the results by the last_trade_time field.
func ByLastTradeTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastTradeTime, opts...).ToFunc()
}

// ByMaxDrawdown orders the results by the max_drawdown field.
func ByMaxDrawdown(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxDrawdown, opts...).ToFunc()
}

// BySharpeRatio orders the results by the sharpe_ratio field.
func BySharpeRatio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSharpeRatio, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStrategyField orders the results by strategy field.
func ByStrategyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStrategyStep(), sql.OrderByField(field, opts...))
	}
}
func newStrategyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StrategyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, StrategyTable, StrategyColumn),
	)
}
