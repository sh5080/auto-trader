// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auto-trader/ent/predicate"
	"auto-trader/ent/strategy"
	"auto-trader/ent/strategyexecution"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// StrategyExecutionUpdate is the builder for updating StrategyExecution entities.
type StrategyExecutionUpdate struct {
	config
	hooks    []Hook
	mutation *StrategyExecutionMutation
}

// Where appends a list predicates to the StrategyExecutionUpdate builder.
func (_u *StrategyExecutionUpdate) Where(ps ...predicate.StrategyExecution) *StrategyExecutionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStrategyID sets the "strategy_id" field.
func (_u *StrategyExecutionUpdate) SetStrategyID(v uuid.UUID) *StrategyExecutionUpdate {
	_u.mutation.SetStrategyID(v)
	return _u
}

// SetNillableStrategyID sets the "strategy_id" field if the given value is not nil.
func (_u *StrategyExecutionUpdate) SetNillableStrategyID(v *uuid.UUID) *StrategyExecutionUpdate {
	if v != nil {
		_u.SetStrategyID(*v)
	}
	return _u
}

// ClearStrategyID clears the value of the "strategy_id" field.
func (_u *StrategyExecutionUpdate) ClearStrategyID() *StrategyExecutionUpdate {
	_u.mutation.ClearStrategyID()
	return _u
}

// SetSymbol sets the "symbol" field.
func (_u *StrategyExecutionUpdate) SetSymbol(v string) *StrategyExecutionUpdate {
	_u.mutation.SetSymbol(v)
	return _u
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (_u *StrategyExecutionUpdate) SetNillableSymbol(v *string) *StrategyExecutionUpdate {
	if v != nil {
		_u.SetSymbol(*v)
	}
	return _u
}

// SetAction sets the "action" field.
func (_u *StrategyExecutionUpdate) SetAction(v strategyexecution.Action) *StrategyExecutionUpdate {
	_u.mutation.SetAction(v)
	return _u
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (_u *StrategyExecutionUpdate) SetNillableAction(v *strategyexecution.Action) *StrategyExecutionUpdate {
	if v != nil {
		_u.SetAction(*v)
	}
	return _u
}

// SetPrice sets the "price" field.
func (_u *StrategyExecutionUpdate) SetPrice(v decimal.Decimal) *StrategyExecutionUpdate {
	_u.mutation.SetPrice(v)
	return _u
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (_u *StrategyExecutionUpdate) SetNillablePrice(v *decimal.Decimal) *StrategyExecutionUpdate {
	if v != nil {
		_u.SetPrice(*v)
	}
	return _u
}

// ClearPrice clears the value of the "price" field.
func (_u *StrategyExecutionUpdate) ClearPrice() *StrategyExecutionUpdate {
	_u.mutation.ClearPrice()
	return _u
}

// SetQuantity sets the "quantity" field.
func (_u *StrategyExecutionUpdate) SetQuantity(v int) *StrategyExecutionUpdate {
	_u.mutation.ResetQuantity()
	_u.mutation.SetQuantity(v)
	return _u
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (_u *StrategyExecutionUpdate) SetNillableQuantity(v *int) *StrategyExecutionUpdate {
	if v != nil {
		_u.SetQuantity(*v)
	}
	return _u
}

// AddQuantity adds value to the "quantity" field.
func (_u *StrategyExecutionUpdate) AddQuantity(v int) *StrategyExecutionUpdate {
	_u.mutation.AddQuantity(v)
	return _u
}

// ClearQuantity clears the value of the "quantity" field.
func (_u *StrategyExecutionUpdate) ClearQuantity() *StrategyExecutionUpdate {
	_u.mutation.ClearQuantity()
	return _u
}

// SetReasoning sets the "reasoning" field.
func (_u *StrategyExecutionUpdate) SetReasoning(v string) *StrategyExecutionUpdate {
	_u.mutation.SetReasoning(v)
	return _u
}

// SetNillableReasoning sets the "reasoning" field if the given value is not nil.
func (_u *StrategyExecutionUpdate) SetNillableReasoning(v *string) *StrategyExecutionUpdate {
	if v != nil {
		_u.SetReasoning(*v)
	}
	return _u
}

// ClearReasoning clears the value of the "reasoning" field.
func (_u *StrategyExecutionUpdate) ClearReasoning() *StrategyExecutionUpdate {
	_u.mutation.ClearReasoning()
	return _u
}

// SetExecutedAt sets the "executed_at" field.
func (_u *StrategyExecutionUpdate) SetExecutedAt(v time.Time) *StrategyExecutionUpdate {
	_u.mutation.SetExecutedAt(v)
	return _u
}

// SetNillableExecutedAt sets the "executed_at" field if the given value is not nil.
func (_u *StrategyExecutionUpdate) SetNillableExecutedAt(v *time.Time) *StrategyExecutionUpdate {
	if v != nil {
		_u.SetExecutedAt(*v)
	}
	return _u
}

// ClearExecutedAt clears the value of the "executed_at" field.
func (_u *StrategyExecutionUpdate) ClearExecutedAt() *StrategyExecutionUpdate {
	_u.mutation.ClearExecutedAt()
	return _u
}

// SetStrategy sets the "strategy" edge to the Strategy entity.
func (_u *StrategyExecutionUpdate) SetStrategy(v *Strategy) *StrategyExecutionUpdate {
	return _u.SetStrategyID(v.ID)
}

// Mutation returns the StrategyExecutionMutation object of the builder.
func (_u *StrategyExecutionUpdate) Mutation() *StrategyExecutionMutation {
	return _u.mutation
}

// ClearStrategy clears the "strategy" edge to the Strategy entity.
func (_u *StrategyExecutionUpdate) ClearStrategy() *StrategyExecutionUpdate {
	_u.mutation.ClearStrategy()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *StrategyExecutionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StrategyExecutionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *StrategyExecutionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StrategyExecutionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StrategyExecutionUpdate) check() error {
	if v, ok := _u.mutation.Symbol(); ok {
		if err := strategyexecution.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "StrategyExecution.symbol": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Action(); ok {
		if err := strategyexecution.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "StrategyExecution.action": %w`, err)}
		}
	}
	return nil
}

func (_u *StrategyExecutionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(strategyexecution.Table, strategyexecution.Columns, sqlgraph.NewFieldSpec(strategyexecution.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Symbol(); ok {
		_spec.SetField(strategyexecution.FieldSymbol, field.TypeString, value)
	}
	if value, ok := _u.mutation.Action(); ok {
		_spec.SetField(strategyexecution.FieldAction, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Price(); ok {
		_spec.SetField(strategyexecution.FieldPrice, field.TypeOther, value)
	}
	if _u.mutation.PriceCleared() {
		_spec.ClearField(strategyexecution.FieldPrice, field.TypeOther)
	}
	if value, ok := _u.mutation.Quantity(); ok {
		_spec.SetField(strategyexecution.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedQuantity(); ok {
		_spec.AddField(strategyexecution.FieldQuantity, field.TypeInt, value)
	}
	if _u.mutation.QuantityCleared() {
		_spec.ClearField(strategyexecution.FieldQuantity, field.TypeInt)
	}
	if value, ok := _u.mutation.Reasoning(); ok {
		_spec.SetField(strategyexecution.FieldReasoning, field.TypeString, value)
	}
	if _u.mutation.ReasoningCleared() {
		_spec.ClearField(strategyexecution.FieldReasoning, field.TypeString)
	}
	if value, ok := _u.mutation.ExecutedAt(); ok {
		_spec.SetField(strategyexecution.FieldExecutedAt, field.TypeTime, value)
	}
	if _u.mutation.ExecutedAtCleared() {
		_spec.ClearField(strategyexecution.FieldExecutedAt, field.TypeTime)
	}
	if _u.mutation.StrategyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategyexecution.StrategyTable,
			Columns: []string{strategyexecution.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StrategyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategyexecution.StrategyTable,
			Columns: []string{strategyexecution.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{strategyexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// StrategyExecutionUpdateOne is the builder for updating a single StrategyExecution entity.
type StrategyExecutionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StrategyExecutionMutation
}

// SetStrategyID sets the "strategy_id" field.
func (_u *StrategyExecutionUpdateOne) SetStrategyID(v uuid.UUID) *StrategyExecutionUpdateOne {
	_u.mutation.SetStrategyID(v)
	return _u
}

// SetNillableStrategyID sets the "strategy_id" field if the given value is not nil.
func (_u *StrategyExecutionUpdateOne) SetNillableStrategyID(v *uuid.UUID) *StrategyExecutionUpdateOne {
	if v != nil {
		_u.SetStrategyID(*v)
	}
	return _u
}

// ClearStrategyID clears the value of the "strategy_id" field.
func (_u *StrategyExecutionUpdateOne) ClearStrategyID() *StrategyExecutionUpdateOne {
	_u.mutation.ClearStrategyID()
	return _u
}

// SetSymbol sets the "symbol" field.
func (_u *StrategyExecutionUpdateOne) SetSymbol(v string) *StrategyExecutionUpdateOne {
	_u.mutation.SetSymbol(v)
	return _u
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (_u *StrategyExecutionUpdateOne) SetNillableSymbol(v *string) *StrategyExecutionUpdateOne {
	if v != nil {
		_u.SetSymbol(*v)
	}
	return _u
}

// SetAction sets the "action" field.
func (_u *StrategyExecutionUpdateOne) SetAction(v strategyexecution.Action) *StrategyExecutionUpdateOne {
	_u.mutation.SetAction(v)
	return _u
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (_u *StrategyExecutionUpdateOne) SetNillableAction(v *strategyexecution.Action) *StrategyExecutionUpdateOne {
	if v != nil {
		_u.SetAction(*v)
	}
	return _u
}

// SetPrice sets the "price" field.
func (_u *StrategyExecutionUpdateOne) SetPrice(v decimal.Decimal) *StrategyExecutionUpdateOne {
	_u.mutation.SetPrice(v)
	return _u
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (_u *StrategyExecutionUpdateOne) SetNillablePrice(v *decimal.Decimal) *StrategyExecutionUpdateOne {
	if v != nil {
		_u.SetPrice(*v)
	}
	return _u
}

// ClearPrice clears the value of the "price" field.
func (_u *StrategyExecutionUpdateOne) ClearPrice() *StrategyExecutionUpdateOne {
	_u.mutation.ClearPrice()
	return _u
}

// SetQuantity sets the "quantity" field.
func (_u *StrategyExecutionUpdateOne) SetQuantity(v int) *StrategyExecutionUpdateOne {
	_u.mutation.ResetQuantity()
	_u.mutation.SetQuantity(v)
	return _u
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (_u *StrategyExecutionUpdateOne) SetNillableQuantity(v *int) *StrategyExecutionUpdateOne {
	if v != nil {
		_u.SetQuantity(*v)
	}
	return _u
}

// AddQuantity adds value to the "quantity" field.
func (_u *StrategyExecutionUpdateOne) AddQuantity(v int) *StrategyExecutionUpdateOne {
	_u.mutation.AddQuantity(v)
	return _u
}

// ClearQuantity clears the value of the "quantity" field.
func (_u *StrategyExecutionUpdateOne) ClearQuantity() *StrategyExecutionUpdateOne {
	_u.mutation.ClearQuantity()
	return _u
}

// SetReasoning sets the "reasoning" field.
func (_u *StrategyExecutionUpdateOne) SetReasoning(v string) *StrategyExecutionUpdateOne {
	_u.mutation.SetReasoning(v)
	return _u
}

// SetNillableReasoning sets the "reasoning" field if the given value is not nil.
func (_u *StrategyExecutionUpdateOne) SetNillableReasoning(v *string) *StrategyExecutionUpdateOne {
	if v != nil {
		_u.SetReasoning(*v)
	}
	return _u
}

// ClearReasoning clears the value of the "reasoning" field.
func (_u *StrategyExecutionUpdateOne) ClearReasoning() *StrategyExecutionUpdateOne {
	_u.mutation.ClearReasoning()
	return _u
}

// SetExecutedAt sets the "executed_at" field.
func (_u *StrategyExecutionUpdateOne) SetExecutedAt(v time.Time) *StrategyExecutionUpdateOne {
	_u.mutation.SetExecutedAt(v)
	return _u
}

// SetNillableExecutedAt sets the "executed_at" field if the given value is not nil.
func (_u *StrategyExecutionUpdateOne) SetNillableExecutedAt(v *time.Time) *StrategyExecutionUpdateOne {
	if v != nil {
		_u.SetExecutedAt(*v)
	}
	return _u
}

// ClearExecutedAt clears the value of the "executed_at" field.
func (_u *StrategyExecutionUpdateOne) ClearExecutedAt() *StrategyExecutionUpdateOne {
	_u.mutation.ClearExecutedAt()
	return _u
}

// SetStrategy sets the "strategy" edge to the Strategy entity.
func (_u *StrategyExecutionUpdateOne) SetStrategy(v *Strategy) *StrategyExecutionUpdateOne {
	return _u.SetStrategyID(v.ID)
}

// Mutation returns the StrategyExecutionMutation object of the builder.
func (_u *StrategyExecutionUpdateOne) Mutation() *StrategyExecutionMutation {
	return _u.mutation
}

// ClearStrategy clears the "strategy" edge to the Strategy entity.
func (_u *StrategyExecutionUpdateOne) ClearStrategy() *StrategyExecutionUpdateOne {
	_u.mutation.ClearStrategy()
	return _u
}

// Where appends a list predicates to the StrategyExecutionUpdate builder.
func (_u *StrategyExecutionUpdateOne) Where(ps ...predicate.StrategyExecution) *StrategyExecutionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *StrategyExecutionUpdateOne) Select(field string, fields ...string) *StrategyExecutionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated StrategyExecution entity.
func (_u *StrategyExecutionUpdateOne) Save(ctx context.Context) (*StrategyExecution, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StrategyExecutionUpdateOne) SaveX(ctx context.Context) *StrategyExecution {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *StrategyExecutionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StrategyExecutionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StrategyExecutionUpdateOne) check() error {
	if v, ok := _u.mutation.Symbol(); ok {
		if err := strategyexecution.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "StrategyExecution.symbol": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Action(); ok {
		if err := strategyexecution.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "StrategyExecution.action": %w`, err)}
		}
	}
	return nil
}

func (_u *StrategyExecutionUpdateOne) sqlSave(ctx context.Context) (_node *StrategyExecution, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(strategyexecution.Table, strategyexecution.Columns, sqlgraph.NewFieldSpec(strategyexecution.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StrategyExecution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, strategyexecution.FieldID)
		for _, f := range fields {
			if !strategyexecution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != strategyexecution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Symbol(); ok {
		_spec.SetField(strategyexecution.FieldSymbol, field.TypeString, value)
	}
	if value, ok := _u.mutation.Action(); ok {
		_spec.SetField(strategyexecution.FieldAction, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Price(); ok {
		_spec.SetField(strategyexecution.FieldPrice, field.TypeOther, value)
	}
	if _u.mutation.PriceCleared() {
		_spec.ClearField(strategyexecution.FieldPrice, field.TypeOther)
	}
	if value, ok := _u.mutation.Quantity(); ok {
		_spec.SetField(strategyexecution.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedQuantity(); ok {
		_spec.AddField(strategyexecution.FieldQuantity, field.TypeInt, value)
	}
	if _u.mutation.QuantityCleared() {
		_spec.ClearField(strategyexecution.FieldQuantity, field.TypeInt)
	}
	if value, ok := _u.mutation.Reasoning(); ok {
		_spec.SetField(strategyexecution.FieldReasoning, field.TypeString, value)
	}
	if _u.mutation.ReasoningCleared() {
		_spec.ClearField(strategyexecution.FieldReasoning, field.TypeString)
	}
	if value, ok := _u.mutation.ExecutedAt(); ok {
		_spec.SetField(strategyexecution.FieldExecutedAt, field.TypeTime, value)
	}
	if _u.mutation.ExecutedAtCleared() {
		_spec.ClearField(strategyexecution.FieldExecutedAt, field.TypeTime)
	}
	if _u.mutation.StrategyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategyexecution.StrategyTable,
			Columns: []string{strategyexecution.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StrategyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategyexecution.StrategyTable,
			Columns: []string{strategyexecution.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StrategyExecution{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{strategyexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
