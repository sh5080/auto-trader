// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auto-trader/ent/strategy"
	"auto-trader/ent/strategyexecution"
	"auto-trader/ent/strategyperformance"
	"auto-trader/ent/strategystatus"
	"auto-trader/ent/strategytemplate"
	"auto-trader/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// StrategyCreate is the builder for creating a Strategy entity.
type StrategyCreate struct {
	config
	mutation *StrategyMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (_c *StrategyCreate) SetUserID(v uuid.UUID) *StrategyCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetStrategyID sets the "strategy_id" field.
func (_c *StrategyCreate) SetStrategyID(v string) *StrategyCreate {
	_c.mutation.SetStrategyID(v)
	return _c
}

// SetTemplateID sets the "template_id" field.
func (_c *StrategyCreate) SetTemplateID(v uuid.UUID) *StrategyCreate {
	_c.mutation.SetTemplateID(v)
	return _c
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableTemplateID(v *uuid.UUID) *StrategyCreate {
	if v != nil {
		_c.SetTemplateID(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *StrategyCreate) SetName(v string) *StrategyCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *StrategyCreate) SetDescription(v string) *StrategyCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableDescription(v *string) *StrategyCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetSymbol sets the "symbol" field.
func (_c *StrategyCreate) SetSymbol(v string) *StrategyCreate {
	_c.mutation.SetSymbol(v)
	return _c
}

// SetUserInputs sets the "user_inputs" field.
func (_c *StrategyCreate) SetUserInputs(v map[string]interface{}) *StrategyCreate {
	_c.mutation.SetUserInputs(v)
	return _c
}

// SetSettings sets the "settings" field.
func (_c *StrategyCreate) SetSettings(v map[string]interface{}) *StrategyCreate {
	_c.mutation.SetSettings(v)
	return _c
}

// SetActive sets the "active" field.
func (_c *StrategyCreate) SetActive(v bool) *StrategyCreate {
	_c.mutation.SetActive(v)
	return _c
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableActive(v *bool) *StrategyCreate {
	if v != nil {
		_c.SetActive(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *StrategyCreate) SetCreatedAt(v time.Time) *StrategyCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableCreatedAt(v *time.Time) *StrategyCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *StrategyCreate) SetUpdatedAt(v time.Time) *StrategyCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableUpdatedAt(v *time.Time) *StrategyCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *StrategyCreate) SetID(v uuid.UUID) *StrategyCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableID(v *uuid.UUID) *StrategyCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *StrategyCreate) SetUser(v *User) *StrategyCreate {
	return _c.SetUserID(v.ID)
}

// SetTemplate sets the "template" edge to the StrategyTemplate entity.
func (_c *StrategyCreate) SetTemplate(v *StrategyTemplate) *StrategyCreate {
	return _c.SetTemplateID(v.ID)
}

// AddExecutionIDs adds the "executions" edge to the StrategyExecution entity by IDs.
func (_c *StrategyCreate) AddExecutionIDs(ids ...int64) *StrategyCreate {
	_c.mutation.AddExecutionIDs(ids...)
	return _c
}

// AddExecutions adds the "executions" edges to the StrategyExecution entity.
func (_c *StrategyCreate) AddExecutions(v ...*StrategyExecution) *StrategyCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddExecutionIDs(ids...)
}

// SetPerformanceID sets the "performance" edge to the StrategyPerformance entity by ID.
func (_c *StrategyCreate) SetPerformanceID(id int) *StrategyCreate {
	_c.mutation.SetPerformanceID(id)
	return _c
}

// SetNillablePerformanceID sets the "performance" edge to the StrategyPerformance entity by ID if the given value is not nil.
func (_c *StrategyCreate) SetNillablePerformanceID(id *int) *StrategyCreate {
	if id != nil {
		_c = _c.SetPerformanceID(*id)
	}
	return _c
}

// SetPerformance sets the "performance" edge to the StrategyPerformance entity.
func (_c *StrategyCreate) SetPerformance(v *StrategyPerformance) *StrategyCreate {
	return _c.SetPerformanceID(v.ID)
}

// SetStatusID sets the "status" edge to the StrategyStatus entity by ID.
func (_c *StrategyCreate) SetStatusID(id int) *StrategyCreate {
	_c.mutation.SetStatusID(id)
	return _c
}

// SetNillableStatusID sets the "status" edge to the StrategyStatus entity by ID if the given value is not nil.
func (_c *StrategyCreate) SetNillableStatusID(id *int) *StrategyCreate {
	if id != nil {
		_c = _c.SetStatusID(*id)
	}
	return _c
}

// SetStatus sets the "status" edge to the StrategyStatus entity.
func (_c *StrategyCreate) SetStatus(v *StrategyStatus) *StrategyCreate {
	return _c.SetStatusID(v.ID)
}

// Mutation returns the StrategyMutation object of the builder.
func (_c *StrategyCreate) Mutation() *StrategyMutation {
	return _c.mutation
}

// Save creates the Strategy in the database.
func (_c *StrategyCreate) Save(ctx context.Context) (*Strategy, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *StrategyCreate) SaveX(ctx context.Context) *Strategy {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StrategyCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StrategyCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *StrategyCreate) defaults() {
	if _, ok := _c.mutation.UserInputs(); !ok {
		v := strategy.DefaultUserInputs
		_c.mutation.SetUserInputs(v)
	}
	if _, ok := _c.mutation.Settings(); !ok {
		v := strategy.DefaultSettings
		_c.mutation.SetSettings(v)
	}
	if _, ok := _c.mutation.Active(); !ok {
		v := strategy.DefaultActive
		_c.mutation.SetActive(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := strategy.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := strategy.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := strategy.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *StrategyCreate) check() error {
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Strategy.user_id"`)}
	}
	if _, ok := _c.mutation.StrategyID(); !ok {
		return &ValidationError{Name: "strategy_id", err: errors.New(`ent: missing required field "Strategy.strategy_id"`)}
	}
	if v, ok := _c.mutation.StrategyID(); ok {
		if err := strategy.StrategyIDValidator(v); err != nil {
			return &ValidationError{Name: "strategy_id", err: fmt.Errorf(`ent: validator failed for field "Strategy.strategy_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Strategy.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := strategy.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Strategy.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "Strategy.symbol"`)}
	}
	if v, ok := _c.mutation.Symbol(); ok {
		if err := strategy.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Strategy.symbol": %w`, err)}
		}
	}
	if _, ok := _c.mutation.UserInputs(); !ok {
		return &ValidationError{Name: "user_inputs", err: errors.New(`ent: missing required field "Strategy.user_inputs"`)}
	}
	if _, ok := _c.mutation.Settings(); !ok {
		return &ValidationError{Name: "settings", err: errors.New(`ent: missing required field "Strategy.settings"`)}
	}
	if _, ok := _c.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "Strategy.active"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Strategy.user"`)}
	}
	return nil
}

func (_c *StrategyCreate) sqlSave(ctx context.Context) (*Strategy, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *StrategyCreate) createSpec() (*Strategy, *sqlgraph.CreateSpec) {
	var (
		_node = &Strategy{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(strategy.Table, sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.StrategyID(); ok {
		_spec.SetField(strategy.FieldStrategyID, field.TypeString, value)
		_node.StrategyID = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(strategy.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(strategy.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := _c.mutation.Symbol(); ok {
		_spec.SetField(strategy.FieldSymbol, field.TypeString, value)
		_node.Symbol = value
	}
	if value, ok := _c.mutation.UserInputs(); ok {
		_spec.SetField(strategy.FieldUserInputs, field.TypeJSON, value)
		_node.UserInputs = value
	}
	if value, ok := _c.mutation.Settings(); ok {
		_spec.SetField(strategy.FieldSettings, field.TypeJSON, value)
		_node.Settings = value
	}
	if value, ok := _c.mutation.Active(); ok {
		_spec.SetField(strategy.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(strategy.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(strategy.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategy.UserTable,
			Columns: []string{strategy.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategy.TemplateTable,
			Columns: []string{strategy.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategytemplate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TemplateID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.ExecutionsTable,
			Columns: []string{strategy.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategyexecution.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.PerformanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   strategy.PerformanceTable,
			Columns: []string{strategy.PerformanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategyperformance.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   strategy.StatusTable,
			Columns: []string{strategy.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategystatus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StrategyCreateBulk is the builder for creating many Strategy entities in bulk.
type StrategyCreateBulk struct {
	config
	err      error
	builders []*StrategyCreate
}

// Save creates the Strategy entities in the database.
func (_c *StrategyCreateBulk) Save(ctx context.Context) ([]*Strategy, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Strategy, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StrategyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *StrategyCreateBulk) SaveX(ctx context.Context) []*Strategy {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StrategyCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StrategyCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
