// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auto-trader/ent/strategy"
	"auto-trader/ent/strategystatus"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// StrategyStatus is the model entity for the StrategyStatus schema.
type StrategyStatus struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StrategyID holds the value of the "strategy_id" field.
	StrategyID uuid.UUID `json:"strategy_id,omitempty"`
	// Status holds the value of the "status" field.
	Status strategystatus.Status `json:"status,omitempty"`
	// LastExecution holds the value of the "last_execution" field.
	LastExecution *time.Time `json:"last_execution,omitempty"`
	// ExecutionCount holds the value of the "execution_count" field.
	ExecutionCount int64 `json:"execution_count,omitempty"`
	// ErrorMessage holds the value of the "error_message" field.
	ErrorMessage *string `json:"error_message,omitempty"`
	// UptimeSeconds holds the value of the "uptime_seconds" field.
	UptimeSeconds int64 `json:"uptime_seconds,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StrategyStatusQuery when eager-loading is set.
	Edges        StrategyStatusEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StrategyStatusEdges holds the relations/edges for other nodes in the graph.
type StrategyStatusEdges struct {
	// Strategy holds the value of the strategy edge.
	Strategy *Strategy `json:"strategy,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StrategyOrErr returns the Strategy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StrategyStatusEdges) StrategyOrErr() (*Strategy, error) {
	if e.Strategy != nil {
		return e.Strategy, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: strategy.Label}
	}
	return nil, &NotLoadedError{edge: "strategy"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StrategyStatus) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case strategystatus.FieldID, strategystatus.FieldExecutionCount, strategystatus.FieldUptimeSeconds:
			values[i] = new(sql.NullInt64)
		case strategystatus.FieldStatus, strategystatus.FieldErrorMessage:
			values[i] = new(sql.NullString)
		case strategystatus.FieldLastExecution, strategystatus.FieldCreatedAt, strategystatus.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case strategystatus.FieldStrategyID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StrategyStatus fields.
func (_m *StrategyStatus) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case strategystatus.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case strategystatus.FieldStrategyID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field strategy_id", values[i])
			} else if value != nil {
				_m.StrategyID = *value
			}
		case strategystatus.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = strategystatus.Status(value.String)
			}
		case strategystatus.FieldLastExecution:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_execution", values[i])
			} else if value.Valid {
				_m.LastExecution = new(time.Time)
				*_m.LastExecution = value.Time
			}
		case strategystatus.FieldExecutionCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field execution_count", values[i])
			} else if value.Valid {
				_m.ExecutionCount = value.Int64
			}
		case strategystatus.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				_m.ErrorMessage = new(string)
				*_m.ErrorMessage = value.String
			}
		case strategystatus.FieldUptimeSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uptime_seconds", values[i])
			} else if value.Valid {
				_m.UptimeSeconds = value.Int64
			}
		case strategystatus.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case strategystatus.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StrategyStatus.
// This includes values selected through modifiers, order, etc.
func (_m *StrategyStatus) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryStrategy queries the "strategy" edge of the StrategyStatus entity.
func (_m *StrategyStatus) QueryStrategy() *StrategyQuery {
	return NewStrategyStatusClient(_m.config).QueryStrategy(_m)
}

// Update returns a builder for updating this StrategyStatus.
// Note that you need to call StrategyStatus.Unwrap() before calling this method if this StrategyStatus
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *StrategyStatus) Update() *StrategyStatusUpdateOne {
	return NewStrategyStatusClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the StrategyStatus entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *StrategyStatus) Unwrap() *StrategyStatus {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: StrategyStatus is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *StrategyStatus) String() string {
	var builder strings.Builder
	builder.WriteString("StrategyStatus(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("strategy_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.StrategyID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	if v := _m.LastExecution; v != nil {
		builder.WriteString("last_execution=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("execution_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.ExecutionCount))
	builder.WriteString(", ")
	if v := _m.ErrorMessage; v != nil {
		builder.WriteString("error_message=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("uptime_seconds=")
	builder.WriteString(fmt.Sprintf("%v", _m.UptimeSeconds))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StrategyStatusSlice is a parsable slice of StrategyStatus.
type StrategyStatusSlice []*StrategyStatus
