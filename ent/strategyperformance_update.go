// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auto-trader/ent/predicate"
	"auto-trader/ent/strategy"
	"auto-trader/ent/strategyperformance"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// StrategyPerformanceUpdate is the builder for updating StrategyPerformance entities.
type StrategyPerformanceUpdate struct {
	config
	hooks    []Hook
	mutation *StrategyPerformanceMutation
}

// Where appends a list predicates to the StrategyPerformanceUpdate builder.
func (_u *StrategyPerformanceUpdate) Where(ps ...predicate.StrategyPerformance) *StrategyPerformanceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStrategyID sets the "strategy_id" field.
func (_u *StrategyPerformanceUpdate) SetStrategyID(v uuid.UUID) *StrategyPerformanceUpdate {
	_u.mutation.SetStrategyID(v)
	return _u
}

// SetNillableStrategyID sets the "strategy_id" field if the given value is not nil.
func (_u *StrategyPerformanceUpdate) SetNillableStrategyID(v *uuid.UUID) *StrategyPerformanceUpdate {
	if v != nil {
		_u.SetStrategyID(*v)
	}
	return _u
}

// SetTotalReturn sets the "total_return" field.
func (_u *StrategyPerformanceUpdate) SetTotalReturn(v decimal.Decimal) *StrategyPerformanceUpdate {
	_u.mutation.SetTotalReturn(v)
	return _u
}

// SetNillableTotalReturn sets the "total_return" field if the given value is not nil.
func (_u *StrategyPerformanceUpdate) SetNillableTotalReturn(v *decimal.Decimal) *StrategyPerformanceUpdate {
	if v != nil {
		_u.SetTotalReturn(*v)
	}
	return _u
}

// SetWinRate sets the "win_rate" field.
func (_u *StrategyPerformanceUpdate) SetWinRate(v decimal.Decimal) *StrategyPerformanceUpdate {
	_u.mutation.SetWinRate(v)
	return _u
}

// SetNillableWinRate sets the "win_rate" field if the given value is not nil.
func (_u *StrategyPerformanceUpdate) SetNillableWinRate(v *decimal.Decimal) *StrategyPerformanceUpdate {
	if v != nil {
		_u.SetWinRate(*v)
	}
	return _u
}

// SetProfitLoss sets the "profit_loss" field.
func (_u *StrategyPerformanceUpdate) SetProfitLoss(v decimal.Decimal) *StrategyPerformanceUpdate {
	_u.mutation.SetProfitLoss(v)
	return _u
}

// SetNillableProfitLoss sets the "profit_loss" field if the given value is not nil.
func (_u *StrategyPerformanceUpdate) SetNillableProfitLoss(v *decimal.Decimal) *StrategyPerformanceUpdate {
	if v != nil {
		_u.SetProfitLoss(*v)
	}
	return _u
}

// SetTradeCount sets the "trade_count" field.
func (_u *StrategyPerformanceUpdate) SetTradeCount(v int64) *StrategyPerformanceUpdate {
	_u.mutation.ResetTradeCount()
	_u.mutation.SetTradeCount(v)
	return _u
}

// SetNillableTradeCount sets the "trade_count" field if the given value is not nil.
func (_u *StrategyPerformanceUpdate) SetNillableTradeCount(v *int64) *StrategyPerformanceUpdate {
	if v != nil {
		_u.SetTradeCount(*v)
	}
	return _u
}

// AddTradeCount adds value to the "trade_count" field.
func (_u *StrategyPerformanceUpdate) AddTradeCount(v int64) *StrategyPerformanceUpdate {
	_u.mutation.AddTradeCount(v)
	return _u
}

// SetLastTradeTime sets the "last_trade_time" field.
func (_u *StrategyPerformanceUpdate) SetLastTradeTime(v time.Time) *StrategyPerformanceUpdate {
	_u.mutation.SetLastTradeTime(v)
	return _u
}

// SetNillableLastTradeTime sets the "last_trade_time" field if the given value is not nil.
func (_u *StrategyPerformanceUpdate) SetNillableLastTradeTime(v *time.Time) *StrategyPerformanceUpdate {
	if v != nil {
		_u.SetLastTradeTime(*v)
	}
	return _u
}

// ClearLastTradeTime clears the value of the "last_trade_time" field.
func (_u *StrategyPerformanceUpdate) ClearLastTradeTime() *StrategyPerformanceUpdate {
	_u.mutation.ClearLastTradeTime()
	return _u
}

// SetMaxDrawdown sets the "max_drawdown" field.
func (_u *StrategyPerformanceUpdate) SetMaxDrawdown(v decimal.Decimal) *StrategyPerformanceUpdate {
	_u.mutation.SetMaxDrawdown(v)
	return _u
}

// SetNillableMaxDrawdown sets the "max_drawdown" field if the given value is not nil.
func (_u *StrategyPerformanceUpdate) SetNillableMaxDrawdown(v *decimal.Decimal) *StrategyPerformanceUpdate {
	if v != nil {
		_u.SetMaxDrawdown(*v)
	}
	return _u
}

// SetSharpeRatio sets the "sharpe_ratio" field.
func (_u *StrategyPerformanceUpdate) SetSharpeRatio(v decimal.Decimal) *StrategyPerformanceUpdate {
	_u.mutation.SetSharpeRatio(v)
	return _u
}

// SetNillableSharpeRatio sets the "sharpe_ratio" field if the given value is not nil.
func (_u *StrategyPerformanceUpdate) SetNillableSharpeRatio(v *decimal.Decimal) *StrategyPerformanceUpdate {
	if v != nil {
		_u.SetSharpeRatio(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StrategyPerformanceUpdate) SetUpdatedAt(v time.Time) *StrategyPerformanceUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStrategy sets the "strategy" edge to the Strategy entity.
func (_u *StrategyPerformanceUpdate) SetStrategy(v *Strategy) *StrategyPerformanceUpdate {
	return _u.SetStrategyID(v.ID)
}

// Mutation returns the StrategyPerformanceMutation object of the builder.
func (_u *StrategyPerformanceUpdate) Mutation() *StrategyPerformanceMutation {
	return _u.mutation
}

// ClearStrategy clears the "strategy" edge to the Strategy entity.
func (_u *StrategyPerformanceUpdate) ClearStrategy() *StrategyPerformanceUpdate {
	_u.mutation.ClearStrategy()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *StrategyPerformanceUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StrategyPerformanceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *StrategyPerformanceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StrategyPerformanceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StrategyPerformanceUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := strategyperformance.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StrategyPerformanceUpdate) check() error {
	if _u.mutation.StrategyCleared() && len(_u.mutation.StrategyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "StrategyPerformance.strategy"`)
	}
	return nil
}

func (_u *StrategyPerformanceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(strategyperformance.Table, strategyperformance.Columns, sqlgraph.NewFieldSpec(strategyperformance.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.TotalReturn(); ok {
		_spec.SetField(strategyperformance.FieldTotalReturn, field.TypeOther, value)
	}
	if value, ok := _u.mutation.WinRate(); ok {
		_spec.SetField(strategyperformance.FieldWinRate, field.TypeOther, value)
	}
	if value, ok := _u.mutation.ProfitLoss(); ok {
		_spec.SetField(strategyperformance.FieldProfitLoss, field.TypeOther, value)
	}
	if value, ok := _u.mutation.TradeCount(); ok {
		_spec.SetField(strategyperformance.FieldTradeCount, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedTradeCount(); ok {
		_spec.AddField(strategyperformance.FieldTradeCount, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.LastTradeTime(); ok {
		_spec.SetField(strategyperformance.FieldLastTradeTime, field.TypeTime, value)
	}
	if _u.mutation.LastTradeTimeCleared() {
		_spec.ClearField(strategyperformance.FieldLastTradeTime, field.TypeTime)
	}
	if value, ok := _u.mutation.MaxDrawdown(); ok {
		_spec.SetField(strategyperformance.FieldMaxDrawdown, field.TypeOther, value)
	}
	if value, ok := _u.mutation.SharpeRatio(); ok {
		_spec.SetField(strategyperformance.FieldSharpeRatio, field.TypeOther, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(strategyperformance.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.StrategyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   strategyperformance.StrategyTable,
			Columns: []string{strategyperformance.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StrategyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   strategyperformance.StrategyTable,
			Columns: []string{strategyperformance.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{strategyperformance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// StrategyPerformanceUpdateOne is the builder for updating a single StrategyPerformance entity.
type StrategyPerformanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StrategyPerformanceMutation
}

// SetStrategyID sets the "strategy_id" field.
func (_u *StrategyPerformanceUpdateOne) SetStrategyID(v uuid.UUID) *StrategyPerformanceUpdateOne {
	_u.mutation.SetStrategyID(v)
	return _u
}

// SetNillableStrategyID sets the "strategy_id" field if the given value is not nil.
func (_u *StrategyPerformanceUpdateOne) SetNillableStrategyID(v *uuid.UUID) *StrategyPerformanceUpdateOne {
	if v != nil {
		_u.SetStrategyID(*v)
	}
	return _u
}

// SetTotalReturn sets the "total_return" field.
func (_u *StrategyPerformanceUpdateOne) SetTotalReturn(v decimal.Decimal) *StrategyPerformanceUpdateOne {
	_u.mutation.SetTotalReturn(v)
	return _u
}

// SetNillableTotalReturn sets the "total_return" field if the given value is not nil.
func (_u *StrategyPerformanceUpdateOne) SetNillableTotalReturn(v *decimal.Decimal) *StrategyPerformanceUpdateOne {
	if v != nil {
		_u.SetTotalReturn(*v)
	}
	return _u
}

// SetWinRate sets the "win_rate" field.
func (_u *StrategyPerformanceUpdateOne) SetWinRate(v decimal.Decimal) *StrategyPerformanceUpdateOne {
	_u.mutation.SetWinRate(v)
	return _u
}

// SetNillableWinRate sets the "win_rate" field if the given value is not nil.
func (_u *StrategyPerformanceUpdateOne) SetNillableWinRate(v *decimal.Decimal) *StrategyPerformanceUpdateOne {
	if v != nil {
		_u.SetWinRate(*v)
	}
	return _u
}

// SetProfitLoss sets the "profit_loss" field.
func (_u *StrategyPerformanceUpdateOne) SetProfitLoss(v decimal.Decimal) *StrategyPerformanceUpdateOne {
	_u.mutation.SetProfitLoss(v)
	return _u
}

// SetNillableProfitLoss sets the "profit_loss" field if the given value is not nil.
func (_u *StrategyPerformanceUpdateOne) SetNillableProfitLoss(v *decimal.Decimal) *StrategyPerformanceUpdateOne {
	if v != nil {
		_u.SetProfitLoss(*v)
	}
	return _u
}

// SetTradeCount sets the "trade_count" field.
func (_u *StrategyPerformanceUpdateOne) SetTradeCount(v int64) *StrategyPerformanceUpdateOne {
	_u.mutation.ResetTradeCount()
	_u.mutation.SetTradeCount(v)
	return _u
}

// SetNillableTradeCount sets the "trade_count" field if the given value is not nil.
func (_u *StrategyPerformanceUpdateOne) SetNillableTradeCount(v *int64) *StrategyPerformanceUpdateOne {
	if v != nil {
		_u.SetTradeCount(*v)
	}
	return _u
}

// AddTradeCount adds value to the "trade_count" field.
func (_u *StrategyPerformanceUpdateOne) AddTradeCount(v int64) *StrategyPerformanceUpdateOne {
	_u.mutation.AddTradeCount(v)
	return _u
}

// SetLastTradeTime sets the "last_trade_time" field.
func (_u *StrategyPerformanceUpdateOne) SetLastTradeTime(v time.Time) *StrategyPerformanceUpdateOne {
	_u.mutation.SetLastTradeTime(v)
	return _u
}

// SetNillableLastTradeTime sets the "last_trade_time" field if the given value is not nil.
func (_u *StrategyPerformanceUpdateOne) SetNillableLastTradeTime(v *time.Time) *StrategyPerformanceUpdateOne {
	if v != nil {
		_u.SetLastTradeTime(*v)
	}
	return _u
}

// ClearLastTradeTime clears the value of the "last_trade_time" field.
func (_u *StrategyPerformanceUpdateOne) ClearLastTradeTime() *StrategyPerformanceUpdateOne {
	_u.mutation.ClearLastTradeTime()
	return _u
}

// SetMaxDrawdown sets the "max_drawdown" field.
func (_u *StrategyPerformanceUpdateOne) SetMaxDrawdown(v decimal.Decimal) *StrategyPerformanceUpdateOne {
	_u.mutation.SetMaxDrawdown(v)
	return _u
}

// SetNillableMaxDrawdown sets the "max_drawdown" field if the given value is not nil.
func (_u *StrategyPerformanceUpdateOne) SetNillableMaxDrawdown(v *decimal.Decimal) *StrategyPerformanceUpdateOne {
	if v != nil {
		_u.SetMaxDrawdown(*v)
	}
	return _u
}

// SetSharpeRatio sets the "sharpe_ratio" field.
func (_u *StrategyPerformanceUpdateOne) SetSharpeRatio(v decimal.Decimal) *StrategyPerformanceUpdateOne {
	_u.mutation.SetSharpeRatio(v)
	return _u
}

// SetNillableSharpeRatio sets the "sharpe_ratio" field if the given value is not nil.
func (_u *StrategyPerformanceUpdateOne) SetNillableSharpeRatio(v *decimal.Decimal) *StrategyPerformanceUpdateOne {
	if v != nil {
		_u.SetSharpeRatio(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StrategyPerformanceUpdateOne) SetUpdatedAt(v time.Time) *StrategyPerformanceUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStrategy sets the "strategy" edge to the Strategy entity.
func (_u *StrategyPerformanceUpdateOne) SetStrategy(v *Strategy) *StrategyPerformanceUpdateOne {
	return _u.SetStrategyID(v.ID)
}

// Mutation returns the StrategyPerformanceMutation object of the builder.
func (_u *StrategyPerformanceUpdateOne) Mutation() *StrategyPerformanceMutation {
	return _u.mutation
}

// ClearStrategy clears the "strategy" edge to the Strategy entity.
func (_u *StrategyPerformanceUpdateOne) ClearStrategy() *StrategyPerformanceUpdateOne {
	_u.mutation.ClearStrategy()
	return _u
}

// Where appends a list predicates to the StrategyPerformanceUpdate builder.
func (_u *StrategyPerformanceUpdateOne) Where(ps ...predicate.StrategyPerformance) *StrategyPerformanceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *StrategyPerformanceUpdateOne) Select(field string, fields ...string) *StrategyPerformanceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated StrategyPerformance entity.
func (_u *StrategyPerformanceUpdateOne) Save(ctx context.Context) (*StrategyPerformance, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StrategyPerformanceUpdateOne) SaveX(ctx context.Context) *StrategyPerformance {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *StrategyPerformanceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StrategyPerformanceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StrategyPerformanceUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := strategyperformance.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StrategyPerformanceUpdateOne) check() error {
	if _u.mutation.StrategyCleared() && len(_u.mutation.StrategyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "StrategyPerformance.strategy"`)
	}
	return nil
}

func (_u *StrategyPerformanceUpdateOne) sqlSave(ctx context.Context) (_node *StrategyPerformance, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(strategyperformance.Table, strategyperformance.Columns, sqlgraph.NewFieldSpec(strategyperformance.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StrategyPerformance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, strategyperformance.FieldID)
		for _, f := range fields {
			if !strategyperformance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != strategyperformance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.TotalReturn(); ok {
		_spec.SetField(strategyperformance.FieldTotalReturn, field.TypeOther, value)
	}
	if value, ok := _u.mutation.WinRate(); ok {
		_spec.SetField(strategyperformance.FieldWinRate, field.TypeOther, value)
	}
	if value, ok := _u.mutation.ProfitLoss(); ok {
		_spec.SetField(strategyperformance.FieldProfitLoss, field.TypeOther, value)
	}
	if value, ok := _u.mutation.TradeCount(); ok {
		_spec.SetField(strategyperformance.FieldTradeCount, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedTradeCount(); ok {
		_spec.AddField(strategyperformance.FieldTradeCount, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.LastTradeTime(); ok {
		_spec.SetField(strategyperformance.FieldLastTradeTime, field.TypeTime, value)
	}
	if _u.mutation.LastTradeTimeCleared() {
		_spec.ClearField(strategyperformance.FieldLastTradeTime, field.TypeTime)
	}
	if value, ok := _u.mutation.MaxDrawdown(); ok {
		_spec.SetField(strategyperformance.FieldMaxDrawdown, field.TypeOther, value)
	}
	if value, ok := _u.mutation.SharpeRatio(); ok {
		_spec.SetField(strategyperformance.FieldSharpeRatio, field.TypeOther, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(strategyperformance.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.StrategyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   strategyperformance.StrategyTable,
			Columns: []string{strategyperformance.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StrategyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   strategyperformance.StrategyTable,
			Columns: []string{strategyperformance.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StrategyPerformance{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{strategyperformance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
