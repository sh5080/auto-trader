// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auto-trader/ent/strategy"
	"auto-trader/ent/strategyperformance"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// StrategyPerformance is the model entity for the StrategyPerformance schema.
type StrategyPerformance struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StrategyID holds the value of the "strategy_id" field.
	StrategyID uuid.UUID `json:"strategy_id,omitempty"`
	// TotalReturn holds the value of the "total_return" field.
	TotalReturn decimal.Decimal `json:"total_return,omitempty"`
	// WinRate holds the value of the "win_rate" field.
	WinRate decimal.Decimal `json:"win_rate,omitempty"`
	// ProfitLoss holds the value of the "profit_loss" field.
	ProfitLoss decimal.Decimal `json:"profit_loss,omitempty"`
	// TradeCount holds the value of the "trade_count" field.
	TradeCount int64 `json:"trade_count,omitempty"`
	// LastTradeTime holds the value of the "last_trade_time" field.
	LastTradeTime *time.Time `json:"last_trade_time,omitempty"`
	// MaxDrawdown holds the value of the "max_drawdown" field.
	MaxDrawdown decimal.Decimal `json:"max_drawdown,omitempty"`
	// SharpeRatio holds the value of the "sharpe_ratio" field.
	SharpeRatio decimal.Decimal `json:"sharpe_ratio,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StrategyPerformanceQuery when eager-loading is set.
	Edges        StrategyPerformanceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StrategyPerformanceEdges holds the relations/edges for other nodes in the graph.
type StrategyPerformanceEdges struct {
	// Strategy holds the value of the strategy edge.
	Strategy *Strategy `json:"strategy,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StrategyOrErr returns the Strategy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StrategyPerformanceEdges) StrategyOrErr() (*Strategy, error) {
	if e.Strategy != nil {
		return e.Strategy, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: strategy.Label}
	}
	return nil, &NotLoadedError{edge: "strategy"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StrategyPerformance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case strategyperformance.FieldTotalReturn, strategyperformance.FieldWinRate, strategyperformance.FieldProfitLoss, strategyperformance.FieldMaxDrawdown, strategyperformance.FieldSharpeRatio:
			values[i] = new(decimal.Decimal)
		case strategyperformance.FieldID, strategyperformance.FieldTradeCount:
			values[i] = new(sql.NullInt64)
		case strategyperformance.FieldLastTradeTime, strategyperformance.FieldCreatedAt, strategyperformance.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case strategyperformance.FieldStrategyID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StrategyPerformance fields.
func (_m *StrategyPerformance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case strategyperformance.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case strategyperformance.FieldStrategyID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field strategy_id", values[i])
			} else if value != nil {
				_m.StrategyID = *value
			}
		case strategyperformance.FieldTotalReturn:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total_return", values[i])
			} else if value != nil {
				_m.TotalReturn = *value
			}
		case strategyperformance.FieldWinRate:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field win_rate", values[i])
			} else if value != nil {
				_m.WinRate = *value
			}
		case strategyperformance.FieldProfitLoss:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field profit_loss", values[i])
			} else if value != nil {
				_m.ProfitLoss = *value
			}
		case strategyperformance.FieldTradeCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field trade_count", values[i])
			} else if value.Valid {
				_m.TradeCount = value.Int64
			}
		case strategyperformance.FieldLastTradeTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_trade_time", values[i])
			} else if value.Valid {
				_m.LastTradeTime = new(time.Time)
				*_m.LastTradeTime = value.Time
			}
		case strategyperformance.FieldMaxDrawdown:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field max_drawdown", values[i])
			} else if value != nil {
				_m.MaxDrawdown = *value
			}
		case strategyperformance.FieldSharpeRatio:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field sharpe_ratio", values[i])
			} else if value != nil {
				_m.SharpeRatio = *value
			}
		case strategyperformance.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case strategyperformance.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StrategyPerformance.
// This includes values selected through modifiers, order, etc.
func (_m *StrategyPerformance) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryStrategy queries the "strategy" edge of the StrategyPerformance entity.
func (_m *StrategyPerformance) QueryStrategy() *StrategyQuery {
	return NewStrategyPerformanceClient(_m.config).QueryStrategy(_m)
}

// Update returns a builder for updating this StrategyPerformance.
// Note that you need to call StrategyPerformance.Unwrap() before calling this method if this StrategyPerformance
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *StrategyPerformance) Update() *StrategyPerformanceUpdateOne {
	return NewStrategyPerformanceClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the StrategyPerformance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *StrategyPerformance) Unwrap() *StrategyPerformance {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: StrategyPerformance is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *StrategyPerformance) String() string {
	var builder strings.Builder
	builder.WriteString("StrategyPerformance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("strategy_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.StrategyID))
	builder.WriteString(", ")
	builder.WriteString("total_return=")
	builder.WriteString(fmt.Sprintf("%v", _m.TotalReturn))
	builder.WriteString(", ")
	builder.WriteString("win_rate=")
	builder.WriteString(fmt.Sprintf("%v", _m.WinRate))
	builder.WriteString(", ")
	builder.WriteString("profit_loss=")
	builder.WriteString(fmt.Sprintf("%v", _m.ProfitLoss))
	builder.WriteString(", ")
	builder.WriteString("trade_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.TradeCount))
	builder.WriteString(", ")
	if v := _m.LastTradeTime; v != nil {
		builder.WriteString("last_trade_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("max_drawdown=")
	builder.WriteString(fmt.Sprintf("%v", _m.MaxDrawdown))
	builder.WriteString(", ")
	builder.WriteString("sharpe_ratio=")
	builder.WriteString(fmt.Sprintf("%v", _m.SharpeRatio))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StrategyPerformances is a parsable slice of StrategyPerformance.
type StrategyPerformances []*StrategyPerformance
