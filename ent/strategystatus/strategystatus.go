// Code generated by ent, DO NOT EDIT.

package strategystatus

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the strategystatus type in the database.
	Label = "strategy_status"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStrategyID holds the string denoting the strategy_id field in the database.
	FieldStrategyID = "strategy_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldLastExecution holds the string denoting the last_execution field in the database.
	FieldLastExecution = "last_execution"
	// FieldExecutionCount holds the string denoting the execution_count field in the database.
	FieldExecutionCount = "execution_count"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldUptimeSeconds holds the string denoting the uptime_seconds field in the database.
	FieldUptimeSeconds = "uptime_seconds"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeStrategy holds the string denoting the strategy edge name in mutations.
	EdgeStrategy = "strategy"
	// Table holds the table name of the strategystatus in the database.
	Table = "strategy_status"
	// StrategyTable is the table that holds the strategy relation/edge.
	StrategyTable = "strategy_status"
	// StrategyInverseTable is the table name for the Strategy entity.
	// It exists in this package in order to avoid circular dependency with the "strategy" package.
	StrategyInverseTable = "strategies"
	// StrategyColumn is the table column denoting the strategy relation/edge.
	StrategyColumn = "strategy_id"
)

// Columns holds all SQL columns for strategystatus fields.
var Columns = []string{
	FieldID,
	FieldStrategyID,
	FieldStatus,
	FieldLastExecution,
	FieldExecutionCount,
	FieldErrorMessage,
	FieldUptimeSeconds,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultExecutionCount holds the default value on creation for the "execution_count" field.
	DefaultExecutionCount int64
	// DefaultUptimeSeconds holds the default value on creation for the "uptime_seconds" field.
	DefaultUptimeSeconds int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusInactive is the default value of the Status enum.
const DefaultStatus = StatusInactive

// Status values.
const (
	StatusActive   Status = "active"
	StatusInactive Status = "inactive"
	StatusPaused   Status = "paused"
	StatusError    Status = "error"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusInactive, StatusPaused, StatusError:
		return nil
	default:
		return fmt.Errorf("strategystatus: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the StrategyStatus queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStrategyID orders the results by the strategy_id field.
func ByStrategyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStrategyID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByLastExecution orders the results by the last_execution field.
func ByLastExecution(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastExecution, opts...).ToFunc()
}

// ByExecutionCount orders the results by the execution_count field.
func ByExecutionCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecutionCount, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// ByUptimeSeconds orders the results by the uptime_seconds field.
func ByUptimeSeconds(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUptimeSeconds, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStrategyField orders the results by strategy field.
func ByStrategyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStrategyStep(), sql.OrderByField(field, opts...))
	}
}
func newStrategyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StrategyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, StrategyTable, StrategyColumn),
	)
}
