// Code generated by ent, DO NOT EDIT.

package strategystatus

import (
	"auto-trader/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldLTE(FieldID, id))
}

// StrategyID applies equality check predicate on the "strategy_id" field. It's identical to StrategyIDEQ.
func StrategyID(v uuid.UUID) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldEQ(FieldStrategyID, v))
}

// LastExecution applies equality check predicate on the "last_execution" field. It's identical to LastExecutionEQ.
func LastExecution(v time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldEQ(FieldLastExecution, v))
}

// ExecutionCount applies equality check predicate on the "execution_count" field. It's identical to ExecutionCountEQ.
func ExecutionCount(v int64) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldEQ(FieldExecutionCount, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldEQ(FieldErrorMessage, v))
}

// UptimeSeconds applies equality check predicate on the "uptime_seconds" field. It's identical to UptimeSecondsEQ.
func UptimeSeconds(v int64) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldEQ(FieldUptimeSeconds, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldEQ(FieldUpdatedAt, v))
}

// StrategyIDEQ applies the EQ predicate on the "strategy_id" field.
func StrategyIDEQ(v uuid.UUID) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldEQ(FieldStrategyID, v))
}

// StrategyIDNEQ applies the NEQ predicate on the "strategy_id" field.
func StrategyIDNEQ(v uuid.UUID) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldNEQ(FieldStrategyID, v))
}

// StrategyIDIn applies the In predicate on the "strategy_id" field.
func StrategyIDIn(vs ...uuid.UUID) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldIn(FieldStrategyID, vs...))
}

// StrategyIDNotIn applies the NotIn predicate on the "strategy_id" field.
func StrategyIDNotIn(vs ...uuid.UUID) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldNotIn(FieldStrategyID, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldNotIn(FieldStatus, vs...))
}

// LastExecutionEQ applies the EQ predicate on the "last_execution" field.
func LastExecutionEQ(v time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldEQ(FieldLastExecution, v))
}

// LastExecutionNEQ applies the NEQ predicate on the "last_execution" field.
func LastExecutionNEQ(v time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldNEQ(FieldLastExecution, v))
}

// LastExecutionIn applies the In predicate on the "last_execution" field.
func LastExecutionIn(vs ...time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldIn(FieldLastExecution, vs...))
}

// LastExecutionNotIn applies the NotIn predicate on the "last_execution" field.
func LastExecutionNotIn(vs ...time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldNotIn(FieldLastExecution, vs...))
}

// LastExecutionGT applies the GT predicate on the "last_execution" field.
func LastExecutionGT(v time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldGT(FieldLastExecution, v))
}

// LastExecutionGTE applies the GTE predicate on the "last_execution" field.
func LastExecutionGTE(v time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldGTE(FieldLastExecution, v))
}

// LastExecutionLT applies the LT predicate on the "last_execution" field.
func LastExecutionLT(v time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldLT(FieldLastExecution, v))
}

// LastExecutionLTE applies the LTE predicate on the "last_execution" field.
func LastExecutionLTE(v time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldLTE(FieldLastExecution, v))
}

// LastExecutionIsNil applies the IsNil predicate on the "last_execution" field.
func LastExecutionIsNil() predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldIsNull(FieldLastExecution))
}

// LastExecutionNotNil applies the NotNil predicate on the "last_execution" field.
func LastExecutionNotNil() predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldNotNull(FieldLastExecution))
}

// ExecutionCountEQ applies the EQ predicate on the "execution_count" field.
func ExecutionCountEQ(v int64) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldEQ(FieldExecutionCount, v))
}

// ExecutionCountNEQ applies the NEQ predicate on the "execution_count" field.
func ExecutionCountNEQ(v int64) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldNEQ(FieldExecutionCount, v))
}

// ExecutionCountIn applies the In predicate on the "execution_count" field.
func ExecutionCountIn(vs ...int64) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldIn(FieldExecutionCount, vs...))
}

// ExecutionCountNotIn applies the NotIn predicate on the "execution_count" field.
func ExecutionCountNotIn(vs ...int64) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldNotIn(FieldExecutionCount, vs...))
}

// ExecutionCountGT applies the GT predicate on the "execution_count" field.
func ExecutionCountGT(v int64) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldGT(FieldExecutionCount, v))
}

// ExecutionCountGTE applies the GTE predicate on the "execution_count" field.
func ExecutionCountGTE(v int64) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldGTE(FieldExecutionCount, v))
}

// ExecutionCountLT applies the LT predicate on the "execution_count" field.
func ExecutionCountLT(v int64) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldLT(FieldExecutionCount, v))
}

// ExecutionCountLTE applies the LTE predicate on the "execution_count" field.
func ExecutionCountLTE(v int64) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldLTE(FieldExecutionCount, v))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldContainsFold(FieldErrorMessage, v))
}

// UptimeSecondsEQ applies the EQ predicate on the "uptime_seconds" field.
func UptimeSecondsEQ(v int64) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldEQ(FieldUptimeSeconds, v))
}

// UptimeSecondsNEQ applies the NEQ predicate on the "uptime_seconds" field.
func UptimeSecondsNEQ(v int64) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldNEQ(FieldUptimeSeconds, v))
}

// UptimeSecondsIn applies the In predicate on the "uptime_seconds" field.
func UptimeSecondsIn(vs ...int64) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldIn(FieldUptimeSeconds, vs...))
}

// UptimeSecondsNotIn applies the NotIn predicate on the "uptime_seconds" field.
func UptimeSecondsNotIn(vs ...int64) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldNotIn(FieldUptimeSeconds, vs...))
}

// UptimeSecondsGT applies the GT predicate on the "uptime_seconds" field.
func UptimeSecondsGT(v int64) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldGT(FieldUptimeSeconds, v))
}

// UptimeSecondsGTE applies the GTE predicate on the "uptime_seconds" field.
func UptimeSecondsGTE(v int64) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldGTE(FieldUptimeSeconds, v))
}

// UptimeSecondsLT applies the LT predicate on the "uptime_seconds" field.
func UptimeSecondsLT(v int64) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldLT(FieldUptimeSeconds, v))
}

// UptimeSecondsLTE applies the LTE predicate on the "uptime_seconds" field.
func UptimeSecondsLTE(v int64) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldLTE(FieldUptimeSeconds, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasStrategy applies the HasEdge predicate on the "strategy" edge.
func HasStrategy() predicate.StrategyStatus {
	return predicate.StrategyStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, StrategyTable, StrategyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStrategyWith applies the HasEdge predicate on the "strategy" edge with a given conditions (other predicates).
func HasStrategyWith(preds ...predicate.Strategy) predicate.StrategyStatus {
	return predicate.StrategyStatus(func(s *sql.Selector) {
		step := newStrategyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StrategyStatus) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StrategyStatus) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StrategyStatus) predicate.StrategyStatus {
	return predicate.StrategyStatus(sql.NotPredicates(p))
}
