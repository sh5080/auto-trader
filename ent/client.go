// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"auto-trader/ent/migrate"

	"auto-trader/ent/portfolio"
	"auto-trader/ent/strategy"
	"auto-trader/ent/strategyexecution"
	"auto-trader/ent/strategyperformance"
	"auto-trader/ent/strategystatus"
	"auto-trader/ent/strategytemplate"
	"auto-trader/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Portfolio is the client for interacting with the Portfolio builders.
	Portfolio *PortfolioClient
	// Strategy is the client for interacting with the Strategy builders.
	Strategy *StrategyClient
	// StrategyExecution is the client for interacting with the StrategyExecution builders.
	StrategyExecution *StrategyExecutionClient
	// StrategyPerformance is the client for interacting with the StrategyPerformance builders.
	StrategyPerformance *StrategyPerformanceClient
	// StrategyStatus is the client for interacting with the StrategyStatus builders.
	StrategyStatus *StrategyStatusClient
	// StrategyTemplate is the client for interacting with the StrategyTemplate builders.
	StrategyTemplate *StrategyTemplateClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Portfolio = NewPortfolioClient(c.config)
	c.Strategy = NewStrategyClient(c.config)
	c.StrategyExecution = NewStrategyExecutionClient(c.config)
	c.StrategyPerformance = NewStrategyPerformanceClient(c.config)
	c.StrategyStatus = NewStrategyStatusClient(c.config)
	c.StrategyTemplate = NewStrategyTemplateClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Portfolio:           NewPortfolioClient(cfg),
		Strategy:            NewStrategyClient(cfg),
		StrategyExecution:   NewStrategyExecutionClient(cfg),
		StrategyPerformance: NewStrategyPerformanceClient(cfg),
		StrategyStatus:      NewStrategyStatusClient(cfg),
		StrategyTemplate:    NewStrategyTemplateClient(cfg),
		User:                NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Portfolio:           NewPortfolioClient(cfg),
		Strategy:            NewStrategyClient(cfg),
		StrategyExecution:   NewStrategyExecutionClient(cfg),
		StrategyPerformance: NewStrategyPerformanceClient(cfg),
		StrategyStatus:      NewStrategyStatusClient(cfg),
		StrategyTemplate:    NewStrategyTemplateClient(cfg),
		User:                NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Portfolio.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Portfolio, c.Strategy, c.StrategyExecution, c.StrategyPerformance,
		c.StrategyStatus, c.StrategyTemplate, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Portfolio, c.Strategy, c.StrategyExecution, c.StrategyPerformance,
		c.StrategyStatus, c.StrategyTemplate, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *PortfolioMutation:
		return c.Portfolio.mutate(ctx, m)
	case *StrategyMutation:
		return c.Strategy.mutate(ctx, m)
	case *StrategyExecutionMutation:
		return c.StrategyExecution.mutate(ctx, m)
	case *StrategyPerformanceMutation:
		return c.StrategyPerformance.mutate(ctx, m)
	case *StrategyStatusMutation:
		return c.StrategyStatus.mutate(ctx, m)
	case *StrategyTemplateMutation:
		return c.StrategyTemplate.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// PortfolioClient is a client for the Portfolio schema.
type PortfolioClient struct {
	config
}

// NewPortfolioClient returns a client for the Portfolio from the given config.
func NewPortfolioClient(c config) *PortfolioClient {
	return &PortfolioClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `portfolio.Hooks(f(g(h())))`.
func (c *PortfolioClient) Use(hooks ...Hook) {
	c.hooks.Portfolio = append(c.hooks.Portfolio, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `portfolio.Intercept(f(g(h())))`.
func (c *PortfolioClient) Intercept(interceptors ...Interceptor) {
	c.inters.Portfolio = append(c.inters.Portfolio, interceptors...)
}

// Create returns a builder for creating a Portfolio entity.
func (c *PortfolioClient) Create() *PortfolioCreate {
	mutation := newPortfolioMutation(c.config, OpCreate)
	return &PortfolioCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Portfolio entities.
func (c *PortfolioClient) CreateBulk(builders ...*PortfolioCreate) *PortfolioCreateBulk {
	return &PortfolioCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PortfolioClient) MapCreateBulk(slice any, setFunc func(*PortfolioCreate, int)) *PortfolioCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PortfolioCreateBulk{err: fmt.Errorf("calling to PortfolioClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PortfolioCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PortfolioCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Portfolio.
func (c *PortfolioClient) Update() *PortfolioUpdate {
	mutation := newPortfolioMutation(c.config, OpUpdate)
	return &PortfolioUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PortfolioClient) UpdateOne(_m *Portfolio) *PortfolioUpdateOne {
	mutation := newPortfolioMutation(c.config, OpUpdateOne, withPortfolio(_m))
	return &PortfolioUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PortfolioClient) UpdateOneID(id uuid.UUID) *PortfolioUpdateOne {
	mutation := newPortfolioMutation(c.config, OpUpdateOne, withPortfolioID(id))
	return &PortfolioUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Portfolio.
func (c *PortfolioClient) Delete() *PortfolioDelete {
	mutation := newPortfolioMutation(c.config, OpDelete)
	return &PortfolioDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PortfolioClient) DeleteOne(_m *Portfolio) *PortfolioDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PortfolioClient) DeleteOneID(id uuid.UUID) *PortfolioDeleteOne {
	builder := c.Delete().Where(portfolio.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PortfolioDeleteOne{builder}
}

// Query returns a query builder for Portfolio.
func (c *PortfolioClient) Query() *PortfolioQuery {
	return &PortfolioQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePortfolio},
		inters: c.Interceptors(),
	}
}

// Get returns a Portfolio entity by its id.
func (c *PortfolioClient) Get(ctx context.Context, id uuid.UUID) (*Portfolio, error) {
	return c.Query().Where(portfolio.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PortfolioClient) GetX(ctx context.Context, id uuid.UUID) *Portfolio {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Portfolio.
func (c *PortfolioClient) QueryUser(_m *Portfolio) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(portfolio.Table, portfolio.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, portfolio.UserTable, portfolio.UserColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PortfolioClient) Hooks() []Hook {
	return c.hooks.Portfolio
}

// Interceptors returns the client interceptors.
func (c *PortfolioClient) Interceptors() []Interceptor {
	return c.inters.Portfolio
}

func (c *PortfolioClient) mutate(ctx context.Context, m *PortfolioMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PortfolioCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PortfolioUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PortfolioUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PortfolioDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Portfolio mutation op: %q", m.Op())
	}
}

// StrategyClient is a client for the Strategy schema.
type StrategyClient struct {
	config
}

// NewStrategyClient returns a client for the Strategy from the given config.
func NewStrategyClient(c config) *StrategyClient {
	return &StrategyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `strategy.Hooks(f(g(h())))`.
func (c *StrategyClient) Use(hooks ...Hook) {
	c.hooks.Strategy = append(c.hooks.Strategy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `strategy.Intercept(f(g(h())))`.
func (c *StrategyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Strategy = append(c.inters.Strategy, interceptors...)
}

// Create returns a builder for creating a Strategy entity.
func (c *StrategyClient) Create() *StrategyCreate {
	mutation := newStrategyMutation(c.config, OpCreate)
	return &StrategyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Strategy entities.
func (c *StrategyClient) CreateBulk(builders ...*StrategyCreate) *StrategyCreateBulk {
	return &StrategyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StrategyClient) MapCreateBulk(slice any, setFunc func(*StrategyCreate, int)) *StrategyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StrategyCreateBulk{err: fmt.Errorf("calling to StrategyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StrategyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StrategyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Strategy.
func (c *StrategyClient) Update() *StrategyUpdate {
	mutation := newStrategyMutation(c.config, OpUpdate)
	return &StrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StrategyClient) UpdateOne(_m *Strategy) *StrategyUpdateOne {
	mutation := newStrategyMutation(c.config, OpUpdateOne, withStrategy(_m))
	return &StrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StrategyClient) UpdateOneID(id uuid.UUID) *StrategyUpdateOne {
	mutation := newStrategyMutation(c.config, OpUpdateOne, withStrategyID(id))
	return &StrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Strategy.
func (c *StrategyClient) Delete() *StrategyDelete {
	mutation := newStrategyMutation(c.config, OpDelete)
	return &StrategyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StrategyClient) DeleteOne(_m *Strategy) *StrategyDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StrategyClient) DeleteOneID(id uuid.UUID) *StrategyDeleteOne {
	builder := c.Delete().Where(strategy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StrategyDeleteOne{builder}
}

// Query returns a query builder for Strategy.
func (c *StrategyClient) Query() *StrategyQuery {
	return &StrategyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStrategy},
		inters: c.Interceptors(),
	}
}

// Get returns a Strategy entity by its id.
func (c *StrategyClient) Get(ctx context.Context, id uuid.UUID) (*Strategy, error) {
	return c.Query().Where(strategy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StrategyClient) GetX(ctx context.Context, id uuid.UUID) *Strategy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Strategy.
func (c *StrategyClient) QueryUser(_m *Strategy) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(strategy.Table, strategy.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, strategy.UserTable, strategy.UserColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTemplate queries the template edge of a Strategy.
func (c *StrategyClient) QueryTemplate(_m *Strategy) *StrategyTemplateQuery {
	query := (&StrategyTemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(strategy.Table, strategy.FieldID, id),
			sqlgraph.To(strategytemplate.Table, strategytemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, strategy.TemplateTable, strategy.TemplateColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExecutions queries the executions edge of a Strategy.
func (c *StrategyClient) QueryExecutions(_m *Strategy) *StrategyExecutionQuery {
	query := (&StrategyExecutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(strategy.Table, strategy.FieldID, id),
			sqlgraph.To(strategyexecution.Table, strategyexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, strategy.ExecutionsTable, strategy.ExecutionsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPerformance queries the performance edge of a Strategy.
func (c *StrategyClient) QueryPerformance(_m *Strategy) *StrategyPerformanceQuery {
	query := (&StrategyPerformanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(strategy.Table, strategy.FieldID, id),
			sqlgraph.To(strategyperformance.Table, strategyperformance.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, strategy.PerformanceTable, strategy.PerformanceColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatus queries the status edge of a Strategy.
func (c *StrategyClient) QueryStatus(_m *Strategy) *StrategyStatusQuery {
	query := (&StrategyStatusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(strategy.Table, strategy.FieldID, id),
			sqlgraph.To(strategystatus.Table, strategystatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, strategy.StatusTable, strategy.StatusColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StrategyClient) Hooks() []Hook {
	return c.hooks.Strategy
}

// Interceptors returns the client interceptors.
func (c *StrategyClient) Interceptors() []Interceptor {
	return c.inters.Strategy
}

func (c *StrategyClient) mutate(ctx context.Context, m *StrategyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StrategyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StrategyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Strategy mutation op: %q", m.Op())
	}
}

// StrategyExecutionClient is a client for the StrategyExecution schema.
type StrategyExecutionClient struct {
	config
}

// NewStrategyExecutionClient returns a client for the StrategyExecution from the given config.
func NewStrategyExecutionClient(c config) *StrategyExecutionClient {
	return &StrategyExecutionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `strategyexecution.Hooks(f(g(h())))`.
func (c *StrategyExecutionClient) Use(hooks ...Hook) {
	c.hooks.StrategyExecution = append(c.hooks.StrategyExecution, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `strategyexecution.Intercept(f(g(h())))`.
func (c *StrategyExecutionClient) Intercept(interceptors ...Interceptor) {
	c.inters.StrategyExecution = append(c.inters.StrategyExecution, interceptors...)
}

// Create returns a builder for creating a StrategyExecution entity.
func (c *StrategyExecutionClient) Create() *StrategyExecutionCreate {
	mutation := newStrategyExecutionMutation(c.config, OpCreate)
	return &StrategyExecutionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StrategyExecution entities.
func (c *StrategyExecutionClient) CreateBulk(builders ...*StrategyExecutionCreate) *StrategyExecutionCreateBulk {
	return &StrategyExecutionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StrategyExecutionClient) MapCreateBulk(slice any, setFunc func(*StrategyExecutionCreate, int)) *StrategyExecutionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StrategyExecutionCreateBulk{err: fmt.Errorf("calling to StrategyExecutionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StrategyExecutionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StrategyExecutionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StrategyExecution.
func (c *StrategyExecutionClient) Update() *StrategyExecutionUpdate {
	mutation := newStrategyExecutionMutation(c.config, OpUpdate)
	return &StrategyExecutionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StrategyExecutionClient) UpdateOne(_m *StrategyExecution) *StrategyExecutionUpdateOne {
	mutation := newStrategyExecutionMutation(c.config, OpUpdateOne, withStrategyExecution(_m))
	return &StrategyExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StrategyExecutionClient) UpdateOneID(id int64) *StrategyExecutionUpdateOne {
	mutation := newStrategyExecutionMutation(c.config, OpUpdateOne, withStrategyExecutionID(id))
	return &StrategyExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StrategyExecution.
func (c *StrategyExecutionClient) Delete() *StrategyExecutionDelete {
	mutation := newStrategyExecutionMutation(c.config, OpDelete)
	return &StrategyExecutionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StrategyExecutionClient) DeleteOne(_m *StrategyExecution) *StrategyExecutionDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StrategyExecutionClient) DeleteOneID(id int64) *StrategyExecutionDeleteOne {
	builder := c.Delete().Where(strategyexecution.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StrategyExecutionDeleteOne{builder}
}

// Query returns a query builder for StrategyExecution.
func (c *StrategyExecutionClient) Query() *StrategyExecutionQuery {
	return &StrategyExecutionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStrategyExecution},
		inters: c.Interceptors(),
	}
}

// Get returns a StrategyExecution entity by its id.
func (c *StrategyExecutionClient) Get(ctx context.Context, id int64) (*StrategyExecution, error) {
	return c.Query().Where(strategyexecution.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StrategyExecutionClient) GetX(ctx context.Context, id int64) *StrategyExecution {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStrategy queries the strategy edge of a StrategyExecution.
func (c *StrategyExecutionClient) QueryStrategy(_m *StrategyExecution) *StrategyQuery {
	query := (&StrategyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(strategyexecution.Table, strategyexecution.FieldID, id),
			sqlgraph.To(strategy.Table, strategy.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, strategyexecution.StrategyTable, strategyexecution.StrategyColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StrategyExecutionClient) Hooks() []Hook {
	return c.hooks.StrategyExecution
}

// Interceptors returns the client interceptors.
func (c *StrategyExecutionClient) Interceptors() []Interceptor {
	return c.inters.StrategyExecution
}

func (c *StrategyExecutionClient) mutate(ctx context.Context, m *StrategyExecutionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StrategyExecutionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StrategyExecutionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StrategyExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StrategyExecutionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StrategyExecution mutation op: %q", m.Op())
	}
}

// StrategyPerformanceClient is a client for the StrategyPerformance schema.
type StrategyPerformanceClient struct {
	config
}

// NewStrategyPerformanceClient returns a client for the StrategyPerformance from the given config.
func NewStrategyPerformanceClient(c config) *StrategyPerformanceClient {
	return &StrategyPerformanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `strategyperformance.Hooks(f(g(h())))`.
func (c *StrategyPerformanceClient) Use(hooks ...Hook) {
	c.hooks.StrategyPerformance = append(c.hooks.StrategyPerformance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `strategyperformance.Intercept(f(g(h())))`.
func (c *StrategyPerformanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.StrategyPerformance = append(c.inters.StrategyPerformance, interceptors...)
}

// Create returns a builder for creating a StrategyPerformance entity.
func (c *StrategyPerformanceClient) Create() *StrategyPerformanceCreate {
	mutation := newStrategyPerformanceMutation(c.config, OpCreate)
	return &StrategyPerformanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StrategyPerformance entities.
func (c *StrategyPerformanceClient) CreateBulk(builders ...*StrategyPerformanceCreate) *StrategyPerformanceCreateBulk {
	return &StrategyPerformanceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StrategyPerformanceClient) MapCreateBulk(slice any, setFunc func(*StrategyPerformanceCreate, int)) *StrategyPerformanceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StrategyPerformanceCreateBulk{err: fmt.Errorf("calling to StrategyPerformanceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StrategyPerformanceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StrategyPerformanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StrategyPerformance.
func (c *StrategyPerformanceClient) Update() *StrategyPerformanceUpdate {
	mutation := newStrategyPerformanceMutation(c.config, OpUpdate)
	return &StrategyPerformanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StrategyPerformanceClient) UpdateOne(_m *StrategyPerformance) *StrategyPerformanceUpdateOne {
	mutation := newStrategyPerformanceMutation(c.config, OpUpdateOne, withStrategyPerformance(_m))
	return &StrategyPerformanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StrategyPerformanceClient) UpdateOneID(id int) *StrategyPerformanceUpdateOne {
	mutation := newStrategyPerformanceMutation(c.config, OpUpdateOne, withStrategyPerformanceID(id))
	return &StrategyPerformanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StrategyPerformance.
func (c *StrategyPerformanceClient) Delete() *StrategyPerformanceDelete {
	mutation := newStrategyPerformanceMutation(c.config, OpDelete)
	return &StrategyPerformanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StrategyPerformanceClient) DeleteOne(_m *StrategyPerformance) *StrategyPerformanceDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StrategyPerformanceClient) DeleteOneID(id int) *StrategyPerformanceDeleteOne {
	builder := c.Delete().Where(strategyperformance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StrategyPerformanceDeleteOne{builder}
}

// Query returns a query builder for StrategyPerformance.
func (c *StrategyPerformanceClient) Query() *StrategyPerformanceQuery {
	return &StrategyPerformanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStrategyPerformance},
		inters: c.Interceptors(),
	}
}

// Get returns a StrategyPerformance entity by its id.
func (c *StrategyPerformanceClient) Get(ctx context.Context, id int) (*StrategyPerformance, error) {
	return c.Query().Where(strategyperformance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StrategyPerformanceClient) GetX(ctx context.Context, id int) *StrategyPerformance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStrategy queries the strategy edge of a StrategyPerformance.
func (c *StrategyPerformanceClient) QueryStrategy(_m *StrategyPerformance) *StrategyQuery {
	query := (&StrategyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(strategyperformance.Table, strategyperformance.FieldID, id),
			sqlgraph.To(strategy.Table, strategy.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, strategyperformance.StrategyTable, strategyperformance.StrategyColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StrategyPerformanceClient) Hooks() []Hook {
	return c.hooks.StrategyPerformance
}

// Interceptors returns the client interceptors.
func (c *StrategyPerformanceClient) Interceptors() []Interceptor {
	return c.inters.StrategyPerformance
}

func (c *StrategyPerformanceClient) mutate(ctx context.Context, m *StrategyPerformanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StrategyPerformanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StrategyPerformanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StrategyPerformanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StrategyPerformanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StrategyPerformance mutation op: %q", m.Op())
	}
}

// StrategyStatusClient is a client for the StrategyStatus schema.
type StrategyStatusClient struct {
	config
}

// NewStrategyStatusClient returns a client for the StrategyStatus from the given config.
func NewStrategyStatusClient(c config) *StrategyStatusClient {
	return &StrategyStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `strategystatus.Hooks(f(g(h())))`.
func (c *StrategyStatusClient) Use(hooks ...Hook) {
	c.hooks.StrategyStatus = append(c.hooks.StrategyStatus, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `strategystatus.Intercept(f(g(h())))`.
func (c *StrategyStatusClient) Intercept(interceptors ...Interceptor) {
	c.inters.StrategyStatus = append(c.inters.StrategyStatus, interceptors...)
}

// Create returns a builder for creating a StrategyStatus entity.
func (c *StrategyStatusClient) Create() *StrategyStatusCreate {
	mutation := newStrategyStatusMutation(c.config, OpCreate)
	return &StrategyStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StrategyStatus entities.
func (c *StrategyStatusClient) CreateBulk(builders ...*StrategyStatusCreate) *StrategyStatusCreateBulk {
	return &StrategyStatusCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StrategyStatusClient) MapCreateBulk(slice any, setFunc func(*StrategyStatusCreate, int)) *StrategyStatusCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StrategyStatusCreateBulk{err: fmt.Errorf("calling to StrategyStatusClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StrategyStatusCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StrategyStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StrategyStatus.
func (c *StrategyStatusClient) Update() *StrategyStatusUpdate {
	mutation := newStrategyStatusMutation(c.config, OpUpdate)
	return &StrategyStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StrategyStatusClient) UpdateOne(_m *StrategyStatus) *StrategyStatusUpdateOne {
	mutation := newStrategyStatusMutation(c.config, OpUpdateOne, withStrategyStatus(_m))
	return &StrategyStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StrategyStatusClient) UpdateOneID(id int) *StrategyStatusUpdateOne {
	mutation := newStrategyStatusMutation(c.config, OpUpdateOne, withStrategyStatusID(id))
	return &StrategyStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StrategyStatus.
func (c *StrategyStatusClient) Delete() *StrategyStatusDelete {
	mutation := newStrategyStatusMutation(c.config, OpDelete)
	return &StrategyStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StrategyStatusClient) DeleteOne(_m *StrategyStatus) *StrategyStatusDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StrategyStatusClient) DeleteOneID(id int) *StrategyStatusDeleteOne {
	builder := c.Delete().Where(strategystatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StrategyStatusDeleteOne{builder}
}

// Query returns a query builder for StrategyStatus.
func (c *StrategyStatusClient) Query() *StrategyStatusQuery {
	return &StrategyStatusQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStrategyStatus},
		inters: c.Interceptors(),
	}
}

// Get returns a StrategyStatus entity by its id.
func (c *StrategyStatusClient) Get(ctx context.Context, id int) (*StrategyStatus, error) {
	return c.Query().Where(strategystatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StrategyStatusClient) GetX(ctx context.Context, id int) *StrategyStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStrategy queries the strategy edge of a StrategyStatus.
func (c *StrategyStatusClient) QueryStrategy(_m *StrategyStatus) *StrategyQuery {
	query := (&StrategyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(strategystatus.Table, strategystatus.FieldID, id),
			sqlgraph.To(strategy.Table, strategy.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, strategystatus.StrategyTable, strategystatus.StrategyColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StrategyStatusClient) Hooks() []Hook {
	return c.hooks.StrategyStatus
}

// Interceptors returns the client interceptors.
func (c *StrategyStatusClient) Interceptors() []Interceptor {
	return c.inters.StrategyStatus
}

func (c *StrategyStatusClient) mutate(ctx context.Context, m *StrategyStatusMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StrategyStatusCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StrategyStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StrategyStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StrategyStatusDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StrategyStatus mutation op: %q", m.Op())
	}
}

// StrategyTemplateClient is a client for the StrategyTemplate schema.
type StrategyTemplateClient struct {
	config
}

// NewStrategyTemplateClient returns a client for the StrategyTemplate from the given config.
func NewStrategyTemplateClient(c config) *StrategyTemplateClient {
	return &StrategyTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `strategytemplate.Hooks(f(g(h())))`.
func (c *StrategyTemplateClient) Use(hooks ...Hook) {
	c.hooks.StrategyTemplate = append(c.hooks.StrategyTemplate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `strategytemplate.Intercept(f(g(h())))`.
func (c *StrategyTemplateClient) Intercept(interceptors ...Interceptor) {
	c.inters.StrategyTemplate = append(c.inters.StrategyTemplate, interceptors...)
}

// Create returns a builder for creating a StrategyTemplate entity.
func (c *StrategyTemplateClient) Create() *StrategyTemplateCreate {
	mutation := newStrategyTemplateMutation(c.config, OpCreate)
	return &StrategyTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StrategyTemplate entities.
func (c *StrategyTemplateClient) CreateBulk(builders ...*StrategyTemplateCreate) *StrategyTemplateCreateBulk {
	return &StrategyTemplateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StrategyTemplateClient) MapCreateBulk(slice any, setFunc func(*StrategyTemplateCreate, int)) *StrategyTemplateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StrategyTemplateCreateBulk{err: fmt.Errorf("calling to StrategyTemplateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StrategyTemplateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StrategyTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StrategyTemplate.
func (c *StrategyTemplateClient) Update() *StrategyTemplateUpdate {
	mutation := newStrategyTemplateMutation(c.config, OpUpdate)
	return &StrategyTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StrategyTemplateClient) UpdateOne(_m *StrategyTemplate) *StrategyTemplateUpdateOne {
	mutation := newStrategyTemplateMutation(c.config, OpUpdateOne, withStrategyTemplate(_m))
	return &StrategyTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StrategyTemplateClient) UpdateOneID(id uuid.UUID) *StrategyTemplateUpdateOne {
	mutation := newStrategyTemplateMutation(c.config, OpUpdateOne, withStrategyTemplateID(id))
	return &StrategyTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StrategyTemplate.
func (c *StrategyTemplateClient) Delete() *StrategyTemplateDelete {
	mutation := newStrategyTemplateMutation(c.config, OpDelete)
	return &StrategyTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StrategyTemplateClient) DeleteOne(_m *StrategyTemplate) *StrategyTemplateDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StrategyTemplateClient) DeleteOneID(id uuid.UUID) *StrategyTemplateDeleteOne {
	builder := c.Delete().Where(strategytemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StrategyTemplateDeleteOne{builder}
}

// Query returns a query builder for StrategyTemplate.
func (c *StrategyTemplateClient) Query() *StrategyTemplateQuery {
	return &StrategyTemplateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStrategyTemplate},
		inters: c.Interceptors(),
	}
}

// Get returns a StrategyTemplate entity by its id.
func (c *StrategyTemplateClient) Get(ctx context.Context, id uuid.UUID) (*StrategyTemplate, error) {
	return c.Query().Where(strategytemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StrategyTemplateClient) GetX(ctx context.Context, id uuid.UUID) *StrategyTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStrategies queries the strategies edge of a StrategyTemplate.
func (c *StrategyTemplateClient) QueryStrategies(_m *StrategyTemplate) *StrategyQuery {
	query := (&StrategyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(strategytemplate.Table, strategytemplate.FieldID, id),
			sqlgraph.To(strategy.Table, strategy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, strategytemplate.StrategiesTable, strategytemplate.StrategiesColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StrategyTemplateClient) Hooks() []Hook {
	return c.hooks.StrategyTemplate
}

// Interceptors returns the client interceptors.
func (c *StrategyTemplateClient) Interceptors() []Interceptor {
	return c.inters.StrategyTemplate
}

func (c *StrategyTemplateClient) mutate(ctx context.Context, m *StrategyTemplateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StrategyTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StrategyTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StrategyTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StrategyTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StrategyTemplate mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(_m *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(_m))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(_m *User) *UserDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStrategies queries the strategies edge of a User.
func (c *UserClient) QueryStrategies(_m *User) *StrategyQuery {
	query := (&StrategyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(strategy.Table, strategy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.StrategiesTable, user.StrategiesColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPortfolios queries the portfolios edge of a User.
func (c *UserClient) QueryPortfolios(_m *User) *PortfolioQuery {
	query := (&PortfolioClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(portfolio.Table, portfolio.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PortfoliosTable, user.PortfoliosColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Portfolio, Strategy, StrategyExecution, StrategyPerformance, StrategyStatus,
		StrategyTemplate, User []ent.Hook
	}
	inters struct {
		Portfolio, Strategy, StrategyExecution, StrategyPerformance, StrategyStatus,
		StrategyTemplate, User []ent.Interceptor
	}
)
