// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auto-trader/ent/portfolio"
	"auto-trader/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// Portfolio is the model entity for the Portfolio schema.
type Portfolio struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity decimal.Decimal `json:"quantity,omitempty"`
	// AveragePrice holds the value of the "average_price" field.
	AveragePrice decimal.Decimal `json:"average_price,omitempty"`
	// CurrentPrice holds the value of the "current_price" field.
	CurrentPrice *decimal.Decimal `json:"current_price,omitempty"`
	// MarketValue holds the value of the "market_value" field.
	MarketValue decimal.Decimal `json:"market_value,omitempty"`
	// TotalCost holds the value of the "total_cost" field.
	TotalCost decimal.Decimal `json:"total_cost,omitempty"`
	// UnrealizedPnl holds the value of the "unrealized_pnl" field.
	UnrealizedPnl decimal.Decimal `json:"unrealized_pnl,omitempty"`
	// RealizedPnl holds the value of the "realized_pnl" field.
	RealizedPnl decimal.Decimal `json:"realized_pnl,omitempty"`
	// LastUpdated holds the value of the "last_updated" field.
	LastUpdated time.Time `json:"last_updated,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PortfolioQuery when eager-loading is set.
	Edges        PortfolioEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PortfolioEdges holds the relations/edges for other nodes in the graph.
type PortfolioEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PortfolioEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Portfolio) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case portfolio.FieldCurrentPrice:
			values[i] = &sql.NullScanner{S: new(decimal.Decimal)}
		case portfolio.FieldQuantity, portfolio.FieldAveragePrice, portfolio.FieldMarketValue, portfolio.FieldTotalCost, portfolio.FieldUnrealizedPnl, portfolio.FieldRealizedPnl:
			values[i] = new(decimal.Decimal)
		case portfolio.FieldSymbol:
			values[i] = new(sql.NullString)
		case portfolio.FieldLastUpdated, portfolio.FieldCreatedAt, portfolio.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case portfolio.FieldID, portfolio.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Portfolio fields.
func (_m *Portfolio) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case portfolio.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case portfolio.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				_m.UserID = *value
			}
		case portfolio.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				_m.Symbol = value.String
			}
		case portfolio.FieldQuantity:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value != nil {
				_m.Quantity = *value
			}
		case portfolio.FieldAveragePrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field average_price", values[i])
			} else if value != nil {
				_m.AveragePrice = *value
			}
		case portfolio.FieldCurrentPrice:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field current_price", values[i])
			} else if value.Valid {
				_m.CurrentPrice = new(decimal.Decimal)
				*_m.CurrentPrice = *value.S.(*decimal.Decimal)
			}
		case portfolio.FieldMarketValue:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field market_value", values[i])
			} else if value != nil {
				_m.MarketValue = *value
			}
		case portfolio.FieldTotalCost:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total_cost", values[i])
			} else if value != nil {
				_m.TotalCost = *value
			}
		case portfolio.FieldUnrealizedPnl:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field unrealized_pnl", values[i])
			} else if value != nil {
				_m.UnrealizedPnl = *value
			}
		case portfolio.FieldRealizedPnl:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field realized_pnl", values[i])
			} else if value != nil {
				_m.RealizedPnl = *value
			}
		case portfolio.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_updated", values[i])
			} else if value.Valid {
				_m.LastUpdated = value.Time
			}
		case portfolio.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = new(time.Time)
				*_m.CreatedAt = value.Time
			}
		case portfolio.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = new(time.Time)
				*_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Portfolio.
// This includes values selected through modifiers, order, etc.
func (_m *Portfolio) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Portfolio entity.
func (_m *Portfolio) QueryUser() *UserQuery {
	return NewPortfolioClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this Portfolio.
// Note that you need to call Portfolio.Unwrap() before calling this method if this Portfolio
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Portfolio) Update() *PortfolioUpdateOne {
	return NewPortfolioClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Portfolio entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Portfolio) Unwrap() *Portfolio {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Portfolio is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Portfolio) String() string {
	var builder strings.Builder
	builder.WriteString("Portfolio(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteString(", ")
	builder.WriteString("symbol=")
	builder.WriteString(_m.Symbol)
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", _m.Quantity))
	builder.WriteString(", ")
	builder.WriteString("average_price=")
	builder.WriteString(fmt.Sprintf("%v", _m.AveragePrice))
	builder.WriteString(", ")
	if v := _m.CurrentPrice; v != nil {
		builder.WriteString("current_price=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("market_value=")
	builder.WriteString(fmt.Sprintf("%v", _m.MarketValue))
	builder.WriteString(", ")
	builder.WriteString("total_cost=")
	builder.WriteString(fmt.Sprintf("%v", _m.TotalCost))
	builder.WriteString(", ")
	builder.WriteString("unrealized_pnl=")
	builder.WriteString(fmt.Sprintf("%v", _m.UnrealizedPnl))
	builder.WriteString(", ")
	builder.WriteString("realized_pnl=")
	builder.WriteString(fmt.Sprintf("%v", _m.RealizedPnl))
	builder.WriteString(", ")
	builder.WriteString("last_updated=")
	builder.WriteString(_m.LastUpdated.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Portfolios is a parsable slice of Portfolio.
type Portfolios []*Portfolio
