// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auto-trader/ent/predicate"
	"auto-trader/ent/strategy"
	"auto-trader/ent/strategyexecution"
	"auto-trader/ent/strategyperformance"
	"auto-trader/ent/strategystatus"
	"auto-trader/ent/strategytemplate"
	"auto-trader/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// StrategyUpdate is the builder for updating Strategy entities.
type StrategyUpdate struct {
	config
	hooks    []Hook
	mutation *StrategyMutation
}

// Where appends a list predicates to the StrategyUpdate builder.
func (_u *StrategyUpdate) Where(ps ...predicate.Strategy) *StrategyUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *StrategyUpdate) SetUserID(v uuid.UUID) *StrategyUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableUserID(v *uuid.UUID) *StrategyUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetStrategyID sets the "strategy_id" field.
func (_u *StrategyUpdate) SetStrategyID(v string) *StrategyUpdate {
	_u.mutation.SetStrategyID(v)
	return _u
}

// SetNillableStrategyID sets the "strategy_id" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableStrategyID(v *string) *StrategyUpdate {
	if v != nil {
		_u.SetStrategyID(*v)
	}
	return _u
}

// SetTemplateID sets the "template_id" field.
func (_u *StrategyUpdate) SetTemplateID(v uuid.UUID) *StrategyUpdate {
	_u.mutation.SetTemplateID(v)
	return _u
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableTemplateID(v *uuid.UUID) *StrategyUpdate {
	if v != nil {
		_u.SetTemplateID(*v)
	}
	return _u
}

// ClearTemplateID clears the value of the "template_id" field.
func (_u *StrategyUpdate) ClearTemplateID() *StrategyUpdate {
	_u.mutation.ClearTemplateID()
	return _u
}

// SetName sets the "name" field.
func (_u *StrategyUpdate) SetName(v string) *StrategyUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableName(v *string) *StrategyUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *StrategyUpdate) SetDescription(v string) *StrategyUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableDescription(v *string) *StrategyUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *StrategyUpdate) ClearDescription() *StrategyUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetSymbol sets the "symbol" field.
func (_u *StrategyUpdate) SetSymbol(v string) *StrategyUpdate {
	_u.mutation.SetSymbol(v)
	return _u
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableSymbol(v *string) *StrategyUpdate {
	if v != nil {
		_u.SetSymbol(*v)
	}
	return _u
}

// SetUserInputs sets the "user_inputs" field.
func (_u *StrategyUpdate) SetUserInputs(v map[string]interface{}) *StrategyUpdate {
	_u.mutation.SetUserInputs(v)
	return _u
}

// SetSettings sets the "settings" field.
func (_u *StrategyUpdate) SetSettings(v map[string]interface{}) *StrategyUpdate {
	_u.mutation.SetSettings(v)
	return _u
}

// SetActive sets the "active" field.
func (_u *StrategyUpdate) SetActive(v bool) *StrategyUpdate {
	_u.mutation.SetActive(v)
	return _u
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableActive(v *bool) *StrategyUpdate {
	if v != nil {
		_u.SetActive(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StrategyUpdate) SetUpdatedAt(v time.Time) *StrategyUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *StrategyUpdate) ClearUpdatedAt() *StrategyUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *StrategyUpdate) SetUser(v *User) *StrategyUpdate {
	return _u.SetUserID(v.ID)
}

// SetTemplate sets the "template" edge to the StrategyTemplate entity.
func (_u *StrategyUpdate) SetTemplate(v *StrategyTemplate) *StrategyUpdate {
	return _u.SetTemplateID(v.ID)
}

// AddExecutionIDs adds the "executions" edge to the StrategyExecution entity by IDs.
func (_u *StrategyUpdate) AddExecutionIDs(ids ...int64) *StrategyUpdate {
	_u.mutation.AddExecutionIDs(ids...)
	return _u
}

// AddExecutions adds the "executions" edges to the StrategyExecution entity.
func (_u *StrategyUpdate) AddExecutions(v ...*StrategyExecution) *StrategyUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddExecutionIDs(ids...)
}

// SetPerformanceID sets the "performance" edge to the StrategyPerformance entity by ID.
func (_u *StrategyUpdate) SetPerformanceID(id int) *StrategyUpdate {
	_u.mutation.SetPerformanceID(id)
	return _u
}

// SetNillablePerformanceID sets the "performance" edge to the StrategyPerformance entity by ID if the given value is not nil.
func (_u *StrategyUpdate) SetNillablePerformanceID(id *int) *StrategyUpdate {
	if id != nil {
		_u = _u.SetPerformanceID(*id)
	}
	return _u
}

// SetPerformance sets the "performance" edge to the StrategyPerformance entity.
func (_u *StrategyUpdate) SetPerformance(v *StrategyPerformance) *StrategyUpdate {
	return _u.SetPerformanceID(v.ID)
}

// SetStatusID sets the "status" edge to the StrategyStatus entity by ID.
func (_u *StrategyUpdate) SetStatusID(id int) *StrategyUpdate {
	_u.mutation.SetStatusID(id)
	return _u
}

// SetNillableStatusID sets the "status" edge to the StrategyStatus entity by ID if the given value is not nil.
func (_u *StrategyUpdate) SetNillableStatusID(id *int) *StrategyUpdate {
	if id != nil {
		_u = _u.SetStatusID(*id)
	}
	return _u
}

// SetStatus sets the "status" edge to the StrategyStatus entity.
func (_u *StrategyUpdate) SetStatus(v *StrategyStatus) *StrategyUpdate {
	return _u.SetStatusID(v.ID)
}

// Mutation returns the StrategyMutation object of the builder.
func (_u *StrategyUpdate) Mutation() *StrategyMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *StrategyUpdate) ClearUser() *StrategyUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearTemplate clears the "template" edge to the StrategyTemplate entity.
func (_u *StrategyUpdate) ClearTemplate() *StrategyUpdate {
	_u.mutation.ClearTemplate()
	return _u
}

// ClearExecutions clears all "executions" edges to the StrategyExecution entity.
func (_u *StrategyUpdate) ClearExecutions() *StrategyUpdate {
	_u.mutation.ClearExecutions()
	return _u
}

// RemoveExecutionIDs removes the "executions" edge to StrategyExecution entities by IDs.
func (_u *StrategyUpdate) RemoveExecutionIDs(ids ...int64) *StrategyUpdate {
	_u.mutation.RemoveExecutionIDs(ids...)
	return _u
}

// RemoveExecutions removes "executions" edges to StrategyExecution entities.
func (_u *StrategyUpdate) RemoveExecutions(v ...*StrategyExecution) *StrategyUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveExecutionIDs(ids...)
}

// ClearPerformance clears the "performance" edge to the StrategyPerformance entity.
func (_u *StrategyUpdate) ClearPerformance() *StrategyUpdate {
	_u.mutation.ClearPerformance()
	return _u
}

// ClearStatus clears the "status" edge to the StrategyStatus entity.
func (_u *StrategyUpdate) ClearStatus() *StrategyUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *StrategyUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *StrategyUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StrategyUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StrategyUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := strategy.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StrategyUpdate) check() error {
	if v, ok := _u.mutation.StrategyID(); ok {
		if err := strategy.StrategyIDValidator(v); err != nil {
			return &ValidationError{Name: "strategy_id", err: fmt.Errorf(`ent: validator failed for field "Strategy.strategy_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := strategy.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Strategy.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Symbol(); ok {
		if err := strategy.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Strategy.symbol": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Strategy.user"`)
	}
	return nil
}

func (_u *StrategyUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(strategy.Table, strategy.Columns, sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.StrategyID(); ok {
		_spec.SetField(strategy.FieldStrategyID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(strategy.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(strategy.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(strategy.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Symbol(); ok {
		_spec.SetField(strategy.FieldSymbol, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserInputs(); ok {
		_spec.SetField(strategy.FieldUserInputs, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Settings(); ok {
		_spec.SetField(strategy.FieldSettings, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Active(); ok {
		_spec.SetField(strategy.FieldActive, field.TypeBool, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(strategy.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(strategy.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(strategy.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategy.UserTable,
			Columns: []string{strategy.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategy.UserTable,
			Columns: []string{strategy.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategy.TemplateTable,
			Columns: []string{strategy.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategytemplate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategy.TemplateTable,
			Columns: []string{strategy.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategytemplate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.ExecutionsTable,
			Columns: []string{strategy.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategyexecution.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !_u.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.ExecutionsTable,
			Columns: []string{strategy.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategyexecution.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.ExecutionsTable,
			Columns: []string{strategy.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategyexecution.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PerformanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   strategy.PerformanceTable,
			Columns: []string{strategy.PerformanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategyperformance.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PerformanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   strategy.PerformanceTable,
			Columns: []string{strategy.PerformanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategyperformance.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   strategy.StatusTable,
			Columns: []string{strategy.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategystatus.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   strategy.StatusTable,
			Columns: []string{strategy.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategystatus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{strategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// StrategyUpdateOne is the builder for updating a single Strategy entity.
type StrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StrategyMutation
}

// SetUserID sets the "user_id" field.
func (_u *StrategyUpdateOne) SetUserID(v uuid.UUID) *StrategyUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableUserID(v *uuid.UUID) *StrategyUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetStrategyID sets the "strategy_id" field.
func (_u *StrategyUpdateOne) SetStrategyID(v string) *StrategyUpdateOne {
	_u.mutation.SetStrategyID(v)
	return _u
}

// SetNillableStrategyID sets the "strategy_id" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableStrategyID(v *string) *StrategyUpdateOne {
	if v != nil {
		_u.SetStrategyID(*v)
	}
	return _u
}

// SetTemplateID sets the "template_id" field.
func (_u *StrategyUpdateOne) SetTemplateID(v uuid.UUID) *StrategyUpdateOne {
	_u.mutation.SetTemplateID(v)
	return _u
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableTemplateID(v *uuid.UUID) *StrategyUpdateOne {
	if v != nil {
		_u.SetTemplateID(*v)
	}
	return _u
}

// ClearTemplateID clears the value of the "template_id" field.
func (_u *StrategyUpdateOne) ClearTemplateID() *StrategyUpdateOne {
	_u.mutation.ClearTemplateID()
	return _u
}

// SetName sets the "name" field.
func (_u *StrategyUpdateOne) SetName(v string) *StrategyUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableName(v *string) *StrategyUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *StrategyUpdateOne) SetDescription(v string) *StrategyUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableDescription(v *string) *StrategyUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *StrategyUpdateOne) ClearDescription() *StrategyUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetSymbol sets the "symbol" field.
func (_u *StrategyUpdateOne) SetSymbol(v string) *StrategyUpdateOne {
	_u.mutation.SetSymbol(v)
	return _u
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableSymbol(v *string) *StrategyUpdateOne {
	if v != nil {
		_u.SetSymbol(*v)
	}
	return _u
}

// SetUserInputs sets the "user_inputs" field.
func (_u *StrategyUpdateOne) SetUserInputs(v map[string]interface{}) *StrategyUpdateOne {
	_u.mutation.SetUserInputs(v)
	return _u
}

// SetSettings sets the "settings" field.
func (_u *StrategyUpdateOne) SetSettings(v map[string]interface{}) *StrategyUpdateOne {
	_u.mutation.SetSettings(v)
	return _u
}

// SetActive sets the "active" field.
func (_u *StrategyUpdateOne) SetActive(v bool) *StrategyUpdateOne {
	_u.mutation.SetActive(v)
	return _u
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableActive(v *bool) *StrategyUpdateOne {
	if v != nil {
		_u.SetActive(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StrategyUpdateOne) SetUpdatedAt(v time.Time) *StrategyUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *StrategyUpdateOne) ClearUpdatedAt() *StrategyUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *StrategyUpdateOne) SetUser(v *User) *StrategyUpdateOne {
	return _u.SetUserID(v.ID)
}

// SetTemplate sets the "template" edge to the StrategyTemplate entity.
func (_u *StrategyUpdateOne) SetTemplate(v *StrategyTemplate) *StrategyUpdateOne {
	return _u.SetTemplateID(v.ID)
}

// AddExecutionIDs adds the "executions" edge to the StrategyExecution entity by IDs.
func (_u *StrategyUpdateOne) AddExecutionIDs(ids ...int64) *StrategyUpdateOne {
	_u.mutation.AddExecutionIDs(ids...)
	return _u
}

// AddExecutions adds the "executions" edges to the StrategyExecution entity.
func (_u *StrategyUpdateOne) AddExecutions(v ...*StrategyExecution) *StrategyUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddExecutionIDs(ids...)
}

// SetPerformanceID sets the "performance" edge to the StrategyPerformance entity by ID.
func (_u *StrategyUpdateOne) SetPerformanceID(id int) *StrategyUpdateOne {
	_u.mutation.SetPerformanceID(id)
	return _u
}

// SetNillablePerformanceID sets the "performance" edge to the StrategyPerformance entity by ID if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillablePerformanceID(id *int) *StrategyUpdateOne {
	if id != nil {
		_u = _u.SetPerformanceID(*id)
	}
	return _u
}

// SetPerformance sets the "performance" edge to the StrategyPerformance entity.
func (_u *StrategyUpdateOne) SetPerformance(v *StrategyPerformance) *StrategyUpdateOne {
	return _u.SetPerformanceID(v.ID)
}

// SetStatusID sets the "status" edge to the StrategyStatus entity by ID.
func (_u *StrategyUpdateOne) SetStatusID(id int) *StrategyUpdateOne {
	_u.mutation.SetStatusID(id)
	return _u
}

// SetNillableStatusID sets the "status" edge to the StrategyStatus entity by ID if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableStatusID(id *int) *StrategyUpdateOne {
	if id != nil {
		_u = _u.SetStatusID(*id)
	}
	return _u
}

// SetStatus sets the "status" edge to the StrategyStatus entity.
func (_u *StrategyUpdateOne) SetStatus(v *StrategyStatus) *StrategyUpdateOne {
	return _u.SetStatusID(v.ID)
}

// Mutation returns the StrategyMutation object of the builder.
func (_u *StrategyUpdateOne) Mutation() *StrategyMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *StrategyUpdateOne) ClearUser() *StrategyUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearTemplate clears the "template" edge to the StrategyTemplate entity.
func (_u *StrategyUpdateOne) ClearTemplate() *StrategyUpdateOne {
	_u.mutation.ClearTemplate()
	return _u
}

// ClearExecutions clears all "executions" edges to the StrategyExecution entity.
func (_u *StrategyUpdateOne) ClearExecutions() *StrategyUpdateOne {
	_u.mutation.ClearExecutions()
	return _u
}

// RemoveExecutionIDs removes the "executions" edge to StrategyExecution entities by IDs.
func (_u *StrategyUpdateOne) RemoveExecutionIDs(ids ...int64) *StrategyUpdateOne {
	_u.mutation.RemoveExecutionIDs(ids...)
	return _u
}

// RemoveExecutions removes "executions" edges to StrategyExecution entities.
func (_u *StrategyUpdateOne) RemoveExecutions(v ...*StrategyExecution) *StrategyUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveExecutionIDs(ids...)
}

// ClearPerformance clears the "performance" edge to the StrategyPerformance entity.
func (_u *StrategyUpdateOne) ClearPerformance() *StrategyUpdateOne {
	_u.mutation.ClearPerformance()
	return _u
}

// ClearStatus clears the "status" edge to the StrategyStatus entity.
func (_u *StrategyUpdateOne) ClearStatus() *StrategyUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// Where appends a list predicates to the StrategyUpdate builder.
func (_u *StrategyUpdateOne) Where(ps ...predicate.Strategy) *StrategyUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *StrategyUpdateOne) Select(field string, fields ...string) *StrategyUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Strategy entity.
func (_u *StrategyUpdateOne) Save(ctx context.Context) (*Strategy, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StrategyUpdateOne) SaveX(ctx context.Context) *Strategy {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *StrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StrategyUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StrategyUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		v := strategy.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StrategyUpdateOne) check() error {
	if v, ok := _u.mutation.StrategyID(); ok {
		if err := strategy.StrategyIDValidator(v); err != nil {
			return &ValidationError{Name: "strategy_id", err: fmt.Errorf(`ent: validator failed for field "Strategy.strategy_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := strategy.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Strategy.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Symbol(); ok {
		if err := strategy.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Strategy.symbol": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Strategy.user"`)
	}
	return nil
}

func (_u *StrategyUpdateOne) sqlSave(ctx context.Context) (_node *Strategy, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(strategy.Table, strategy.Columns, sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Strategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, strategy.FieldID)
		for _, f := range fields {
			if !strategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != strategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.StrategyID(); ok {
		_spec.SetField(strategy.FieldStrategyID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(strategy.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(strategy.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(strategy.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Symbol(); ok {
		_spec.SetField(strategy.FieldSymbol, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserInputs(); ok {
		_spec.SetField(strategy.FieldUserInputs, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Settings(); ok {
		_spec.SetField(strategy.FieldSettings, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Active(); ok {
		_spec.SetField(strategy.FieldActive, field.TypeBool, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(strategy.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(strategy.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(strategy.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategy.UserTable,
			Columns: []string{strategy.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategy.UserTable,
			Columns: []string{strategy.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategy.TemplateTable,
			Columns: []string{strategy.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategytemplate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategy.TemplateTable,
			Columns: []string{strategy.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategytemplate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.ExecutionsTable,
			Columns: []string{strategy.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategyexecution.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !_u.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.ExecutionsTable,
			Columns: []string{strategy.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategyexecution.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategy.ExecutionsTable,
			Columns: []string{strategy.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategyexecution.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PerformanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   strategy.PerformanceTable,
			Columns: []string{strategy.PerformanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategyperformance.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PerformanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   strategy.PerformanceTable,
			Columns: []string{strategy.PerformanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategyperformance.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   strategy.StatusTable,
			Columns: []string{strategy.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategystatus.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   strategy.StatusTable,
			Columns: []string{strategy.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategystatus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Strategy{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{strategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
