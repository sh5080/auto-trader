// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auto-trader/ent/strategy"
	"auto-trader/ent/strategyexecution"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// StrategyExecution is the model entity for the StrategyExecution schema.
type StrategyExecution struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// StrategyID holds the value of the "strategy_id" field.
	StrategyID *uuid.UUID `json:"strategy_id,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
	// Action holds the value of the "action" field.
	Action strategyexecution.Action `json:"action,omitempty"`
	// Price holds the value of the "price" field.
	Price *decimal.Decimal `json:"price,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity *int `json:"quantity,omitempty"`
	// Reasoning holds the value of the "reasoning" field.
	Reasoning *string `json:"reasoning,omitempty"`
	// ExecutedAt holds the value of the "executed_at" field.
	ExecutedAt *time.Time `json:"executed_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StrategyExecutionQuery when eager-loading is set.
	Edges        StrategyExecutionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StrategyExecutionEdges holds the relations/edges for other nodes in the graph.
type StrategyExecutionEdges struct {
	// Strategy holds the value of the strategy edge.
	Strategy *Strategy `json:"strategy,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StrategyOrErr returns the Strategy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StrategyExecutionEdges) StrategyOrErr() (*Strategy, error) {
	if e.Strategy != nil {
		return e.Strategy, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: strategy.Label}
	}
	return nil, &NotLoadedError{edge: "strategy"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StrategyExecution) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case strategyexecution.FieldPrice:
			values[i] = &sql.NullScanner{S: new(decimal.Decimal)}
		case strategyexecution.FieldStrategyID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case strategyexecution.FieldID, strategyexecution.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case strategyexecution.FieldSymbol, strategyexecution.FieldAction, strategyexecution.FieldReasoning:
			values[i] = new(sql.NullString)
		case strategyexecution.FieldExecutedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StrategyExecution fields.
func (_m *StrategyExecution) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case strategyexecution.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int64(value.Int64)
		case strategyexecution.FieldStrategyID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field strategy_id", values[i])
			} else if value.Valid {
				_m.StrategyID = new(uuid.UUID)
				*_m.StrategyID = *value.S.(*uuid.UUID)
			}
		case strategyexecution.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				_m.Symbol = value.String
			}
		case strategyexecution.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				_m.Action = strategyexecution.Action(value.String)
			}
		case strategyexecution.FieldPrice:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				_m.Price = new(decimal.Decimal)
				*_m.Price = *value.S.(*decimal.Decimal)
			}
		case strategyexecution.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				_m.Quantity = new(int)
				*_m.Quantity = int(value.Int64)
			}
		case strategyexecution.FieldReasoning:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reasoning", values[i])
			} else if value.Valid {
				_m.Reasoning = new(string)
				*_m.Reasoning = value.String
			}
		case strategyexecution.FieldExecutedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field executed_at", values[i])
			} else if value.Valid {
				_m.ExecutedAt = new(time.Time)
				*_m.ExecutedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StrategyExecution.
// This includes values selected through modifiers, order, etc.
func (_m *StrategyExecution) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryStrategy queries the "strategy" edge of the StrategyExecution entity.
func (_m *StrategyExecution) QueryStrategy() *StrategyQuery {
	return NewStrategyExecutionClient(_m.config).QueryStrategy(_m)
}

// Update returns a builder for updating this StrategyExecution.
// Note that you need to call StrategyExecution.Unwrap() before calling this method if this StrategyExecution
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *StrategyExecution) Update() *StrategyExecutionUpdateOne {
	return NewStrategyExecutionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the StrategyExecution entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *StrategyExecution) Unwrap() *StrategyExecution {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: StrategyExecution is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *StrategyExecution) String() string {
	var builder strings.Builder
	builder.WriteString("StrategyExecution(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	if v := _m.StrategyID; v != nil {
		builder.WriteString("strategy_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("symbol=")
	builder.WriteString(_m.Symbol)
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(fmt.Sprintf("%v", _m.Action))
	builder.WriteString(", ")
	if v := _m.Price; v != nil {
		builder.WriteString("price=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.Quantity; v != nil {
		builder.WriteString("quantity=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.Reasoning; v != nil {
		builder.WriteString("reasoning=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.ExecutedAt; v != nil {
		builder.WriteString("executed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// StrategyExecutions is a parsable slice of StrategyExecution.
type StrategyExecutions []*StrategyExecution
