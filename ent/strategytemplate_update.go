// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auto-trader/ent/predicate"
	"auto-trader/ent/strategy"
	"auto-trader/ent/strategytemplate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// StrategyTemplateUpdate is the builder for updating StrategyTemplate entities.
type StrategyTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *StrategyTemplateMutation
}

// Where appends a list predicates to the StrategyTemplateUpdate builder.
func (_u *StrategyTemplateUpdate) Where(ps ...predicate.StrategyTemplate) *StrategyTemplateUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *StrategyTemplateUpdate) SetName(v string) *StrategyTemplateUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *StrategyTemplateUpdate) SetNillableName(v *string) *StrategyTemplateUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *StrategyTemplateUpdate) SetDescription(v string) *StrategyTemplateUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *StrategyTemplateUpdate) SetNillableDescription(v *string) *StrategyTemplateUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *StrategyTemplateUpdate) ClearDescription() *StrategyTemplateUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetCategory sets the "category" field.
func (_u *StrategyTemplateUpdate) SetCategory(v string) *StrategyTemplateUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *StrategyTemplateUpdate) SetNillableCategory(v *string) *StrategyTemplateUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// SetTemplateConfig sets the "template_config" field.
func (_u *StrategyTemplateUpdate) SetTemplateConfig(v map[string]interface{}) *StrategyTemplateUpdate {
	_u.mutation.SetTemplateConfig(v)
	return _u
}

// SetInputSchema sets the "input_schema" field.
func (_u *StrategyTemplateUpdate) SetInputSchema(v map[string]interface{}) *StrategyTemplateUpdate {
	_u.mutation.SetInputSchema(v)
	return _u
}

// SetVersion sets the "version" field.
func (_u *StrategyTemplateUpdate) SetVersion(v string) *StrategyTemplateUpdate {
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *StrategyTemplateUpdate) SetNillableVersion(v *string) *StrategyTemplateUpdate {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StrategyTemplateUpdate) SetUpdatedAt(v time.Time) *StrategyTemplateUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddStrategyIDs adds the "strategies" edge to the Strategy entity by IDs.
func (_u *StrategyTemplateUpdate) AddStrategyIDs(ids ...uuid.UUID) *StrategyTemplateUpdate {
	_u.mutation.AddStrategyIDs(ids...)
	return _u
}

// AddStrategies adds the "strategies" edges to the Strategy entity.
func (_u *StrategyTemplateUpdate) AddStrategies(v ...*Strategy) *StrategyTemplateUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStrategyIDs(ids...)
}

// Mutation returns the StrategyTemplateMutation object of the builder.
func (_u *StrategyTemplateUpdate) Mutation() *StrategyTemplateMutation {
	return _u.mutation
}

// ClearStrategies clears all "strategies" edges to the Strategy entity.
func (_u *StrategyTemplateUpdate) ClearStrategies() *StrategyTemplateUpdate {
	_u.mutation.ClearStrategies()
	return _u
}

// RemoveStrategyIDs removes the "strategies" edge to Strategy entities by IDs.
func (_u *StrategyTemplateUpdate) RemoveStrategyIDs(ids ...uuid.UUID) *StrategyTemplateUpdate {
	_u.mutation.RemoveStrategyIDs(ids...)
	return _u
}

// RemoveStrategies removes "strategies" edges to Strategy entities.
func (_u *StrategyTemplateUpdate) RemoveStrategies(v ...*Strategy) *StrategyTemplateUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStrategyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *StrategyTemplateUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StrategyTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *StrategyTemplateUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StrategyTemplateUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StrategyTemplateUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := strategytemplate.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StrategyTemplateUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := strategytemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "StrategyTemplate.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Category(); ok {
		if err := strategytemplate.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "StrategyTemplate.category": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Version(); ok {
		if err := strategytemplate.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "StrategyTemplate.version": %w`, err)}
		}
	}
	return nil
}

func (_u *StrategyTemplateUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(strategytemplate.Table, strategytemplate.Columns, sqlgraph.NewFieldSpec(strategytemplate.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(strategytemplate.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(strategytemplate.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(strategytemplate.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(strategytemplate.FieldCategory, field.TypeString, value)
	}
	if value, ok := _u.mutation.TemplateConfig(); ok {
		_spec.SetField(strategytemplate.FieldTemplateConfig, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.InputSchema(); ok {
		_spec.SetField(strategytemplate.FieldInputSchema, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(strategytemplate.FieldVersion, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(strategytemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.StrategiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategytemplate.StrategiesTable,
			Columns: []string{strategytemplate.StrategiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStrategiesIDs(); len(nodes) > 0 && !_u.mutation.StrategiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategytemplate.StrategiesTable,
			Columns: []string{strategytemplate.StrategiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StrategiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategytemplate.StrategiesTable,
			Columns: []string{strategytemplate.StrategiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{strategytemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// StrategyTemplateUpdateOne is the builder for updating a single StrategyTemplate entity.
type StrategyTemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StrategyTemplateMutation
}

// SetName sets the "name" field.
func (_u *StrategyTemplateUpdateOne) SetName(v string) *StrategyTemplateUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *StrategyTemplateUpdateOne) SetNillableName(v *string) *StrategyTemplateUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *StrategyTemplateUpdateOne) SetDescription(v string) *StrategyTemplateUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *StrategyTemplateUpdateOne) SetNillableDescription(v *string) *StrategyTemplateUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *StrategyTemplateUpdateOne) ClearDescription() *StrategyTemplateUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetCategory sets the "category" field.
func (_u *StrategyTemplateUpdateOne) SetCategory(v string) *StrategyTemplateUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *StrategyTemplateUpdateOne) SetNillableCategory(v *string) *StrategyTemplateUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// SetTemplateConfig sets the "template_config" field.
func (_u *StrategyTemplateUpdateOne) SetTemplateConfig(v map[string]interface{}) *StrategyTemplateUpdateOne {
	_u.mutation.SetTemplateConfig(v)
	return _u
}

// SetInputSchema sets the "input_schema" field.
func (_u *StrategyTemplateUpdateOne) SetInputSchema(v map[string]interface{}) *StrategyTemplateUpdateOne {
	_u.mutation.SetInputSchema(v)
	return _u
}

// SetVersion sets the "version" field.
func (_u *StrategyTemplateUpdateOne) SetVersion(v string) *StrategyTemplateUpdateOne {
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *StrategyTemplateUpdateOne) SetNillableVersion(v *string) *StrategyTemplateUpdateOne {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StrategyTemplateUpdateOne) SetUpdatedAt(v time.Time) *StrategyTemplateUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddStrategyIDs adds the "strategies" edge to the Strategy entity by IDs.
func (_u *StrategyTemplateUpdateOne) AddStrategyIDs(ids ...uuid.UUID) *StrategyTemplateUpdateOne {
	_u.mutation.AddStrategyIDs(ids...)
	return _u
}

// AddStrategies adds the "strategies" edges to the Strategy entity.
func (_u *StrategyTemplateUpdateOne) AddStrategies(v ...*Strategy) *StrategyTemplateUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStrategyIDs(ids...)
}

// Mutation returns the StrategyTemplateMutation object of the builder.
func (_u *StrategyTemplateUpdateOne) Mutation() *StrategyTemplateMutation {
	return _u.mutation
}

// ClearStrategies clears all "strategies" edges to the Strategy entity.
func (_u *StrategyTemplateUpdateOne) ClearStrategies() *StrategyTemplateUpdateOne {
	_u.mutation.ClearStrategies()
	return _u
}

// RemoveStrategyIDs removes the "strategies" edge to Strategy entities by IDs.
func (_u *StrategyTemplateUpdateOne) RemoveStrategyIDs(ids ...uuid.UUID) *StrategyTemplateUpdateOne {
	_u.mutation.RemoveStrategyIDs(ids...)
	return _u
}

// RemoveStrategies removes "strategies" edges to Strategy entities.
func (_u *StrategyTemplateUpdateOne) RemoveStrategies(v ...*Strategy) *StrategyTemplateUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStrategyIDs(ids...)
}

// Where appends a list predicates to the StrategyTemplateUpdate builder.
func (_u *StrategyTemplateUpdateOne) Where(ps ...predicate.StrategyTemplate) *StrategyTemplateUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *StrategyTemplateUpdateOne) Select(field string, fields ...string) *StrategyTemplateUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated StrategyTemplate entity.
func (_u *StrategyTemplateUpdateOne) Save(ctx context.Context) (*StrategyTemplate, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StrategyTemplateUpdateOne) SaveX(ctx context.Context) *StrategyTemplate {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *StrategyTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StrategyTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StrategyTemplateUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := strategytemplate.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StrategyTemplateUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := strategytemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "StrategyTemplate.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Category(); ok {
		if err := strategytemplate.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "StrategyTemplate.category": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Version(); ok {
		if err := strategytemplate.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "StrategyTemplate.version": %w`, err)}
		}
	}
	return nil
}

func (_u *StrategyTemplateUpdateOne) sqlSave(ctx context.Context) (_node *StrategyTemplate, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(strategytemplate.Table, strategytemplate.Columns, sqlgraph.NewFieldSpec(strategytemplate.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StrategyTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, strategytemplate.FieldID)
		for _, f := range fields {
			if !strategytemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != strategytemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(strategytemplate.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(strategytemplate.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(strategytemplate.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(strategytemplate.FieldCategory, field.TypeString, value)
	}
	if value, ok := _u.mutation.TemplateConfig(); ok {
		_spec.SetField(strategytemplate.FieldTemplateConfig, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.InputSchema(); ok {
		_spec.SetField(strategytemplate.FieldInputSchema, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(strategytemplate.FieldVersion, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(strategytemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.StrategiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategytemplate.StrategiesTable,
			Columns: []string{strategytemplate.StrategiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStrategiesIDs(); len(nodes) > 0 && !_u.mutation.StrategiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategytemplate.StrategiesTable,
			Columns: []string{strategytemplate.StrategiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StrategiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   strategytemplate.StrategiesTable,
			Columns: []string{strategytemplate.StrategiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StrategyTemplate{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{strategytemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
