// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auto-trader/ent/portfolio"
	"auto-trader/ent/schema"
	"auto-trader/ent/strategy"
	"auto-trader/ent/strategyexecution"
	"auto-trader/ent/strategyperformance"
	"auto-trader/ent/strategystatus"
	"auto-trader/ent/strategytemplate"
	"auto-trader/ent/user"
	"time"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	portfolioFields := schema.Portfolio{}.Fields()
	_ = portfolioFields
	// portfolioDescSymbol is the schema descriptor for symbol field.
	portfolioDescSymbol := portfolioFields[2].Descriptor()
	// portfolio.SymbolValidator is a validator for the "symbol" field. It is called by the builders before save.
	portfolio.SymbolValidator = portfolioDescSymbol.Validators[0].(func(string) error)
	// portfolioDescQuantity is the schema descriptor for quantity field.
	portfolioDescQuantity := portfolioFields[3].Descriptor()
	// portfolio.DefaultQuantity holds the default value on creation for the quantity field.
	portfolio.DefaultQuantity = portfolioDescQuantity.Default.(decimal.Decimal)
	// portfolioDescAveragePrice is the schema descriptor for average_price field.
	portfolioDescAveragePrice := portfolioFields[4].Descriptor()
	// portfolio.DefaultAveragePrice holds the default value on creation for the average_price field.
	portfolio.DefaultAveragePrice = portfolioDescAveragePrice.Default.(decimal.Decimal)
	// portfolioDescMarketValue is the schema descriptor for market_value field.
	portfolioDescMarketValue := portfolioFields[6].Descriptor()
	// portfolio.DefaultMarketValue holds the default value on creation for the market_value field.
	portfolio.DefaultMarketValue = portfolioDescMarketValue.Default.(decimal.Decimal)
	// portfolioDescTotalCost is the schema descriptor for total_cost field.
	portfolioDescTotalCost := portfolioFields[7].Descriptor()
	// portfolio.DefaultTotalCost holds the default value on creation for the total_cost field.
	portfolio.DefaultTotalCost = portfolioDescTotalCost.Default.(decimal.Decimal)
	// portfolioDescUnrealizedPnl is the schema descriptor for unrealized_pnl field.
	portfolioDescUnrealizedPnl := portfolioFields[8].Descriptor()
	// portfolio.DefaultUnrealizedPnl holds the default value on creation for the unrealized_pnl field.
	portfolio.DefaultUnrealizedPnl = portfolioDescUnrealizedPnl.Default.(decimal.Decimal)
	// portfolioDescRealizedPnl is the schema descriptor for realized_pnl field.
	portfolioDescRealizedPnl := portfolioFields[9].Descriptor()
	// portfolio.DefaultRealizedPnl holds the default value on creation for the realized_pnl field.
	portfolio.DefaultRealizedPnl = portfolioDescRealizedPnl.Default.(decimal.Decimal)
	// portfolioDescLastUpdated is the schema descriptor for last_updated field.
	portfolioDescLastUpdated := portfolioFields[10].Descriptor()
	// portfolio.DefaultLastUpdated holds the default value on creation for the last_updated field.
	portfolio.DefaultLastUpdated = portfolioDescLastUpdated.Default.(func() time.Time)
	// portfolio.UpdateDefaultLastUpdated holds the default value on update for the last_updated field.
	portfolio.UpdateDefaultLastUpdated = portfolioDescLastUpdated.UpdateDefault.(func() time.Time)
	// portfolioDescCreatedAt is the schema descriptor for created_at field.
	portfolioDescCreatedAt := portfolioFields[11].Descriptor()
	// portfolio.DefaultCreatedAt holds the default value on creation for the created_at field.
	portfolio.DefaultCreatedAt = portfolioDescCreatedAt.Default.(func() time.Time)
	// portfolioDescUpdatedAt is the schema descriptor for updated_at field.
	portfolioDescUpdatedAt := portfolioFields[12].Descriptor()
	// portfolio.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	portfolio.DefaultUpdatedAt = portfolioDescUpdatedAt.Default.(func() time.Time)
	// portfolio.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	portfolio.UpdateDefaultUpdatedAt = portfolioDescUpdatedAt.UpdateDefault.(func() time.Time)
	// portfolioDescID is the schema descriptor for id field.
	portfolioDescID := portfolioFields[0].Descriptor()
	// portfolio.DefaultID holds the default value on creation for the id field.
	portfolio.DefaultID = portfolioDescID.Default.(func() uuid.UUID)
	strategyFields := schema.Strategy{}.Fields()
	_ = strategyFields
	// strategyDescStrategyID is the schema descriptor for strategy_id field.
	strategyDescStrategyID := strategyFields[2].Descriptor()
	// strategy.StrategyIDValidator is a validator for the "strategy_id" field. It is called by the builders before save.
	strategy.StrategyIDValidator = strategyDescStrategyID.Validators[0].(func(string) error)
	// strategyDescName is the schema descriptor for name field.
	strategyDescName := strategyFields[4].Descriptor()
	// strategy.NameValidator is a validator for the "name" field. It is called by the builders before save.
	strategy.NameValidator = strategyDescName.Validators[0].(func(string) error)
	// strategyDescSymbol is the schema descriptor for symbol field.
	strategyDescSymbol := strategyFields[6].Descriptor()
	// strategy.SymbolValidator is a validator for the "symbol" field. It is called by the builders before save.
	strategy.SymbolValidator = strategyDescSymbol.Validators[0].(func(string) error)
	// strategyDescUserInputs is the schema descriptor for user_inputs field.
	strategyDescUserInputs := strategyFields[7].Descriptor()
	// strategy.DefaultUserInputs holds the default value on creation for the user_inputs field.
	strategy.DefaultUserInputs = strategyDescUserInputs.Default.(map[string]interface{})
	// strategyDescSettings is the schema descriptor for settings field.
	strategyDescSettings := strategyFields[8].Descriptor()
	// strategy.DefaultSettings holds the default value on creation for the settings field.
	strategy.DefaultSettings = strategyDescSettings.Default.(map[string]interface{})
	// strategyDescActive is the schema descriptor for active field.
	strategyDescActive := strategyFields[9].Descriptor()
	// strategy.DefaultActive holds the default value on creation for the active field.
	strategy.DefaultActive = strategyDescActive.Default.(bool)
	// strategyDescCreatedAt is the schema descriptor for created_at field.
	strategyDescCreatedAt := strategyFields[10].Descriptor()
	// strategy.DefaultCreatedAt holds the default value on creation for the created_at field.
	strategy.DefaultCreatedAt = strategyDescCreatedAt.Default.(func() time.Time)
	// strategyDescUpdatedAt is the schema descriptor for updated_at field.
	strategyDescUpdatedAt := strategyFields[11].Descriptor()
	// strategy.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	strategy.DefaultUpdatedAt = strategyDescUpdatedAt.Default.(func() time.Time)
	// strategy.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	strategy.UpdateDefaultUpdatedAt = strategyDescUpdatedAt.UpdateDefault.(func() time.Time)
	// strategyDescID is the schema descriptor for id field.
	strategyDescID := strategyFields[0].Descriptor()
	// strategy.DefaultID holds the default value on creation for the id field.
	strategy.DefaultID = strategyDescID.Default.(func() uuid.UUID)
	strategyexecutionFields := schema.StrategyExecution{}.Fields()
	_ = strategyexecutionFields
	// strategyexecutionDescSymbol is the schema descriptor for symbol field.
	strategyexecutionDescSymbol := strategyexecutionFields[2].Descriptor()
	// strategyexecution.SymbolValidator is a validator for the "symbol" field. It is called by the builders before save.
	strategyexecution.SymbolValidator = strategyexecutionDescSymbol.Validators[0].(func(string) error)
	// strategyexecutionDescExecutedAt is the schema descriptor for executed_at field.
	strategyexecutionDescExecutedAt := strategyexecutionFields[7].Descriptor()
	// strategyexecution.DefaultExecutedAt holds the default value on creation for the executed_at field.
	strategyexecution.DefaultExecutedAt = strategyexecutionDescExecutedAt.Default.(func() time.Time)
	// strategyexecutionDescID is the schema descriptor for id field.
	strategyexecutionDescID := strategyexecutionFields[0].Descriptor()
	// strategyexecution.IDValidator is a validator for the "id" field. It is called by the builders before save.
	strategyexecution.IDValidator = strategyexecutionDescID.Validators[0].(func(int64) error)
	strategyperformanceFields := schema.StrategyPerformance{}.Fields()
	_ = strategyperformanceFields
	// strategyperformanceDescTotalReturn is the schema descriptor for total_return field.
	strategyperformanceDescTotalReturn := strategyperformanceFields[1].Descriptor()
	// strategyperformance.DefaultTotalReturn holds the default value on creation for the total_return field.
	strategyperformance.DefaultTotalReturn = strategyperformanceDescTotalReturn.Default.(decimal.Decimal)
	// strategyperformanceDescWinRate is the schema descriptor for win_rate field.
	strategyperformanceDescWinRate := strategyperformanceFields[2].Descriptor()
	// strategyperformance.DefaultWinRate holds the default value on creation for the win_rate field.
	strategyperformance.DefaultWinRate = strategyperformanceDescWinRate.Default.(decimal.Decimal)
	// strategyperformanceDescProfitLoss is the schema descriptor for profit_loss field.
	strategyperformanceDescProfitLoss := strategyperformanceFields[3].Descriptor()
	// strategyperformance.DefaultProfitLoss holds the default value on creation for the profit_loss field.
	strategyperformance.DefaultProfitLoss = strategyperformanceDescProfitLoss.Default.(decimal.Decimal)
	// strategyperformanceDescTradeCount is the schema descriptor for trade_count field.
	strategyperformanceDescTradeCount := strategyperformanceFields[4].Descriptor()
	// strategyperformance.DefaultTradeCount holds the default value on creation for the trade_count field.
	strategyperformance.DefaultTradeCount = strategyperformanceDescTradeCount.Default.(int64)
	// strategyperformanceDescMaxDrawdown is the schema descriptor for max_drawdown field.
	strategyperformanceDescMaxDrawdown := strategyperformanceFields[6].Descriptor()
	// strategyperformance.DefaultMaxDrawdown holds the default value on creation for the max_drawdown field.
	strategyperformance.DefaultMaxDrawdown = strategyperformanceDescMaxDrawdown.Default.(decimal.Decimal)
	// strategyperformanceDescSharpeRatio is the schema descriptor for sharpe_ratio field.
	strategyperformanceDescSharpeRatio := strategyperformanceFields[7].Descriptor()
	// strategyperformance.DefaultSharpeRatio holds the default value on creation for the sharpe_ratio field.
	strategyperformance.DefaultSharpeRatio = strategyperformanceDescSharpeRatio.Default.(decimal.Decimal)
	// strategyperformanceDescCreatedAt is the schema descriptor for created_at field.
	strategyperformanceDescCreatedAt := strategyperformanceFields[8].Descriptor()
	// strategyperformance.DefaultCreatedAt holds the default value on creation for the created_at field.
	strategyperformance.DefaultCreatedAt = strategyperformanceDescCreatedAt.Default.(func() time.Time)
	// strategyperformanceDescUpdatedAt is the schema descriptor for updated_at field.
	strategyperformanceDescUpdatedAt := strategyperformanceFields[9].Descriptor()
	// strategyperformance.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	strategyperformance.DefaultUpdatedAt = strategyperformanceDescUpdatedAt.Default.(func() time.Time)
	// strategyperformance.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	strategyperformance.UpdateDefaultUpdatedAt = strategyperformanceDescUpdatedAt.UpdateDefault.(func() time.Time)
	strategystatusFields := schema.StrategyStatus{}.Fields()
	_ = strategystatusFields
	// strategystatusDescExecutionCount is the schema descriptor for execution_count field.
	strategystatusDescExecutionCount := strategystatusFields[3].Descriptor()
	// strategystatus.DefaultExecutionCount holds the default value on creation for the execution_count field.
	strategystatus.DefaultExecutionCount = strategystatusDescExecutionCount.Default.(int64)
	// strategystatusDescUptimeSeconds is the schema descriptor for uptime_seconds field.
	strategystatusDescUptimeSeconds := strategystatusFields[5].Descriptor()
	// strategystatus.DefaultUptimeSeconds holds the default value on creation for the uptime_seconds field.
	strategystatus.DefaultUptimeSeconds = strategystatusDescUptimeSeconds.Default.(int64)
	// strategystatusDescCreatedAt is the schema descriptor for created_at field.
	strategystatusDescCreatedAt := strategystatusFields[6].Descriptor()
	// strategystatus.DefaultCreatedAt holds the default value on creation for the created_at field.
	strategystatus.DefaultCreatedAt = strategystatusDescCreatedAt.Default.(func() time.Time)
	// strategystatusDescUpdatedAt is the schema descriptor for updated_at field.
	strategystatusDescUpdatedAt := strategystatusFields[7].Descriptor()
	// strategystatus.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	strategystatus.DefaultUpdatedAt = strategystatusDescUpdatedAt.Default.(func() time.Time)
	// strategystatus.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	strategystatus.UpdateDefaultUpdatedAt = strategystatusDescUpdatedAt.UpdateDefault.(func() time.Time)
	strategytemplateFields := schema.StrategyTemplate{}.Fields()
	_ = strategytemplateFields
	// strategytemplateDescName is the schema descriptor for name field.
	strategytemplateDescName := strategytemplateFields[1].Descriptor()
	// strategytemplate.NameValidator is a validator for the "name" field. It is called by the builders before save.
	strategytemplate.NameValidator = strategytemplateDescName.Validators[0].(func(string) error)
	// strategytemplateDescCategory is the schema descriptor for category field.
	strategytemplateDescCategory := strategytemplateFields[3].Descriptor()
	// strategytemplate.CategoryValidator is a validator for the "category" field. It is called by the builders before save.
	strategytemplate.CategoryValidator = strategytemplateDescCategory.Validators[0].(func(string) error)
	// strategytemplateDescVersion is the schema descriptor for version field.
	strategytemplateDescVersion := strategytemplateFields[6].Descriptor()
	// strategytemplate.DefaultVersion holds the default value on creation for the version field.
	strategytemplate.DefaultVersion = strategytemplateDescVersion.Default.(string)
	// strategytemplate.VersionValidator is a validator for the "version" field. It is called by the builders before save.
	strategytemplate.VersionValidator = strategytemplateDescVersion.Validators[0].(func(string) error)
	// strategytemplateDescCreatedAt is the schema descriptor for created_at field.
	strategytemplateDescCreatedAt := strategytemplateFields[7].Descriptor()
	// strategytemplate.DefaultCreatedAt holds the default value on creation for the created_at field.
	strategytemplate.DefaultCreatedAt = strategytemplateDescCreatedAt.Default.(func() time.Time)
	// strategytemplateDescUpdatedAt is the schema descriptor for updated_at field.
	strategytemplateDescUpdatedAt := strategytemplateFields[8].Descriptor()
	// strategytemplate.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	strategytemplate.DefaultUpdatedAt = strategytemplateDescUpdatedAt.Default.(func() time.Time)
	// strategytemplate.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	strategytemplate.UpdateDefaultUpdatedAt = strategytemplateDescUpdatedAt.UpdateDefault.(func() time.Time)
	// strategytemplateDescID is the schema descriptor for id field.
	strategytemplateDescID := strategytemplateFields[0].Descriptor()
	// strategytemplate.DefaultID holds the default value on creation for the id field.
	strategytemplate.DefaultID = strategytemplateDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.DefaultName holds the default value on creation for the name field.
	user.DefaultName = userDescName.Default.(string)
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescNickname is the schema descriptor for nickname field.
	userDescNickname := userFields[2].Descriptor()
	// user.DefaultNickname holds the default value on creation for the nickname field.
	user.DefaultNickname = userDescNickname.Default.(string)
	// user.NicknameValidator is a validator for the "nickname" field. It is called by the builders before save.
	user.NicknameValidator = func() func(string) error {
		validators := userDescNickname.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(nickname string) error {
			for _, fn := range fns {
				if err := fn(nickname); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[3].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[4].Descriptor()
	// user.DefaultPassword holds the default value on creation for the password field.
	user.DefaultPassword = userDescPassword.Default.(string)
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = func() func(string) error {
		validators := userDescPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescIsValid is the schema descriptor for is_valid field.
	userDescIsValid := userFields[5].Descriptor()
	// user.DefaultIsValid holds the default value on creation for the is_valid field.
	user.DefaultIsValid = userDescIsValid.Default.(bool)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[6].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[7].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
