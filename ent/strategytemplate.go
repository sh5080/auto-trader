// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auto-trader/ent/strategytemplate"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// StrategyTemplate is the model entity for the StrategyTemplate schema.
type StrategyTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// TemplateConfig holds the value of the "template_config" field.
	TemplateConfig map[string]interface{} `json:"template_config,omitempty"`
	// InputSchema holds the value of the "input_schema" field.
	InputSchema map[string]interface{} `json:"input_schema,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StrategyTemplateQuery when eager-loading is set.
	Edges        StrategyTemplateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StrategyTemplateEdges holds the relations/edges for other nodes in the graph.
type StrategyTemplateEdges struct {
	// Strategies holds the value of the strategies edge.
	Strategies []*Strategy `json:"strategies,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StrategiesOrErr returns the Strategies value or an error if the edge
// was not loaded in eager-loading.
func (e StrategyTemplateEdges) StrategiesOrErr() ([]*Strategy, error) {
	if e.loadedTypes[0] {
		return e.Strategies, nil
	}
	return nil, &NotLoadedError{edge: "strategies"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StrategyTemplate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case strategytemplate.FieldTemplateConfig, strategytemplate.FieldInputSchema:
			values[i] = new([]byte)
		case strategytemplate.FieldName, strategytemplate.FieldDescription, strategytemplate.FieldCategory, strategytemplate.FieldVersion:
			values[i] = new(sql.NullString)
		case strategytemplate.FieldCreatedAt, strategytemplate.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case strategytemplate.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StrategyTemplate fields.
func (_m *StrategyTemplate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case strategytemplate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case strategytemplate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case strategytemplate.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = new(string)
				*_m.Description = value.String
			}
		case strategytemplate.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				_m.Category = value.String
			}
		case strategytemplate.FieldTemplateConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field template_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.TemplateConfig); err != nil {
					return fmt.Errorf("unmarshal field template_config: %w", err)
				}
			}
		case strategytemplate.FieldInputSchema:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field input_schema", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.InputSchema); err != nil {
					return fmt.Errorf("unmarshal field input_schema: %w", err)
				}
			}
		case strategytemplate.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				_m.Version = value.String
			}
		case strategytemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case strategytemplate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StrategyTemplate.
// This includes values selected through modifiers, order, etc.
func (_m *StrategyTemplate) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryStrategies queries the "strategies" edge of the StrategyTemplate entity.
func (_m *StrategyTemplate) QueryStrategies() *StrategyQuery {
	return NewStrategyTemplateClient(_m.config).QueryStrategies(_m)
}

// Update returns a builder for updating this StrategyTemplate.
// Note that you need to call StrategyTemplate.Unwrap() before calling this method if this StrategyTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *StrategyTemplate) Update() *StrategyTemplateUpdateOne {
	return NewStrategyTemplateClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the StrategyTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *StrategyTemplate) Unwrap() *StrategyTemplate {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: StrategyTemplate is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *StrategyTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("StrategyTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	if v := _m.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(_m.Category)
	builder.WriteString(", ")
	builder.WriteString("template_config=")
	builder.WriteString(fmt.Sprintf("%v", _m.TemplateConfig))
	builder.WriteString(", ")
	builder.WriteString("input_schema=")
	builder.WriteString(fmt.Sprintf("%v", _m.InputSchema))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(_m.Version)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StrategyTemplates is a parsable slice of StrategyTemplate.
type StrategyTemplates []*StrategyTemplate
