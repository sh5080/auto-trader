// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auto-trader/ent/predicate"
	"auto-trader/ent/strategy"
	"auto-trader/ent/strategystatus"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// StrategyStatusUpdate is the builder for updating StrategyStatus entities.
type StrategyStatusUpdate struct {
	config
	hooks    []Hook
	mutation *StrategyStatusMutation
}

// Where appends a list predicates to the StrategyStatusUpdate builder.
func (_u *StrategyStatusUpdate) Where(ps ...predicate.StrategyStatus) *StrategyStatusUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStrategyID sets the "strategy_id" field.
func (_u *StrategyStatusUpdate) SetStrategyID(v uuid.UUID) *StrategyStatusUpdate {
	_u.mutation.SetStrategyID(v)
	return _u
}

// SetNillableStrategyID sets the "strategy_id" field if the given value is not nil.
func (_u *StrategyStatusUpdate) SetNillableStrategyID(v *uuid.UUID) *StrategyStatusUpdate {
	if v != nil {
		_u.SetStrategyID(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *StrategyStatusUpdate) SetStatus(v strategystatus.Status) *StrategyStatusUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *StrategyStatusUpdate) SetNillableStatus(v *strategystatus.Status) *StrategyStatusUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetLastExecution sets the "last_execution" field.
func (_u *StrategyStatusUpdate) SetLastExecution(v time.Time) *StrategyStatusUpdate {
	_u.mutation.SetLastExecution(v)
	return _u
}

// SetNillableLastExecution sets the "last_execution" field if the given value is not nil.
func (_u *StrategyStatusUpdate) SetNillableLastExecution(v *time.Time) *StrategyStatusUpdate {
	if v != nil {
		_u.SetLastExecution(*v)
	}
	return _u
}

// ClearLastExecution clears the value of the "last_execution" field.
func (_u *StrategyStatusUpdate) ClearLastExecution() *StrategyStatusUpdate {
	_u.mutation.ClearLastExecution()
	return _u
}

// SetExecutionCount sets the "execution_count" field.
func (_u *StrategyStatusUpdate) SetExecutionCount(v int64) *StrategyStatusUpdate {
	_u.mutation.ResetExecutionCount()
	_u.mutation.SetExecutionCount(v)
	return _u
}

// SetNillableExecutionCount sets the "execution_count" field if the given value is not nil.
func (_u *StrategyStatusUpdate) SetNillableExecutionCount(v *int64) *StrategyStatusUpdate {
	if v != nil {
		_u.SetExecutionCount(*v)
	}
	return _u
}

// AddExecutionCount adds value to the "execution_count" field.
func (_u *StrategyStatusUpdate) AddExecutionCount(v int64) *StrategyStatusUpdate {
	_u.mutation.AddExecutionCount(v)
	return _u
}

// SetErrorMessage sets the "error_message" field.
func (_u *StrategyStatusUpdate) SetErrorMessage(v string) *StrategyStatusUpdate {
	_u.mutation.SetErrorMessage(v)
	return _u
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_u *StrategyStatusUpdate) SetNillableErrorMessage(v *string) *StrategyStatusUpdate {
	if v != nil {
		_u.SetErrorMessage(*v)
	}
	return _u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (_u *StrategyStatusUpdate) ClearErrorMessage() *StrategyStatusUpdate {
	_u.mutation.ClearErrorMessage()
	return _u
}

// SetUptimeSeconds sets the "uptime_seconds" field.
func (_u *StrategyStatusUpdate) SetUptimeSeconds(v int64) *StrategyStatusUpdate {
	_u.mutation.ResetUptimeSeconds()
	_u.mutation.SetUptimeSeconds(v)
	return _u
}

// SetNillableUptimeSeconds sets the "uptime_seconds" field if the given value is not nil.
func (_u *StrategyStatusUpdate) SetNillableUptimeSeconds(v *int64) *StrategyStatusUpdate {
	if v != nil {
		_u.SetUptimeSeconds(*v)
	}
	return _u
}

// AddUptimeSeconds adds value to the "uptime_seconds" field.
func (_u *StrategyStatusUpdate) AddUptimeSeconds(v int64) *StrategyStatusUpdate {
	_u.mutation.AddUptimeSeconds(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StrategyStatusUpdate) SetUpdatedAt(v time.Time) *StrategyStatusUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStrategy sets the "strategy" edge to the Strategy entity.
func (_u *StrategyStatusUpdate) SetStrategy(v *Strategy) *StrategyStatusUpdate {
	return _u.SetStrategyID(v.ID)
}

// Mutation returns the StrategyStatusMutation object of the builder.
func (_u *StrategyStatusUpdate) Mutation() *StrategyStatusMutation {
	return _u.mutation
}

// ClearStrategy clears the "strategy" edge to the Strategy entity.
func (_u *StrategyStatusUpdate) ClearStrategy() *StrategyStatusUpdate {
	_u.mutation.ClearStrategy()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *StrategyStatusUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StrategyStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *StrategyStatusUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StrategyStatusUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StrategyStatusUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := strategystatus.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StrategyStatusUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := strategystatus.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "StrategyStatus.status": %w`, err)}
		}
	}
	if _u.mutation.StrategyCleared() && len(_u.mutation.StrategyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "StrategyStatus.strategy"`)
	}
	return nil
}

func (_u *StrategyStatusUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(strategystatus.Table, strategystatus.Columns, sqlgraph.NewFieldSpec(strategystatus.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(strategystatus.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.LastExecution(); ok {
		_spec.SetField(strategystatus.FieldLastExecution, field.TypeTime, value)
	}
	if _u.mutation.LastExecutionCleared() {
		_spec.ClearField(strategystatus.FieldLastExecution, field.TypeTime)
	}
	if value, ok := _u.mutation.ExecutionCount(); ok {
		_spec.SetField(strategystatus.FieldExecutionCount, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedExecutionCount(); ok {
		_spec.AddField(strategystatus.FieldExecutionCount, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.ErrorMessage(); ok {
		_spec.SetField(strategystatus.FieldErrorMessage, field.TypeString, value)
	}
	if _u.mutation.ErrorMessageCleared() {
		_spec.ClearField(strategystatus.FieldErrorMessage, field.TypeString)
	}
	if value, ok := _u.mutation.UptimeSeconds(); ok {
		_spec.SetField(strategystatus.FieldUptimeSeconds, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUptimeSeconds(); ok {
		_spec.AddField(strategystatus.FieldUptimeSeconds, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(strategystatus.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.StrategyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   strategystatus.StrategyTable,
			Columns: []string{strategystatus.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StrategyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   strategystatus.StrategyTable,
			Columns: []string{strategystatus.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{strategystatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// StrategyStatusUpdateOne is the builder for updating a single StrategyStatus entity.
type StrategyStatusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StrategyStatusMutation
}

// SetStrategyID sets the "strategy_id" field.
func (_u *StrategyStatusUpdateOne) SetStrategyID(v uuid.UUID) *StrategyStatusUpdateOne {
	_u.mutation.SetStrategyID(v)
	return _u
}

// SetNillableStrategyID sets the "strategy_id" field if the given value is not nil.
func (_u *StrategyStatusUpdateOne) SetNillableStrategyID(v *uuid.UUID) *StrategyStatusUpdateOne {
	if v != nil {
		_u.SetStrategyID(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *StrategyStatusUpdateOne) SetStatus(v strategystatus.Status) *StrategyStatusUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *StrategyStatusUpdateOne) SetNillableStatus(v *strategystatus.Status) *StrategyStatusUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetLastExecution sets the "last_execution" field.
func (_u *StrategyStatusUpdateOne) SetLastExecution(v time.Time) *StrategyStatusUpdateOne {
	_u.mutation.SetLastExecution(v)
	return _u
}

// SetNillableLastExecution sets the "last_execution" field if the given value is not nil.
func (_u *StrategyStatusUpdateOne) SetNillableLastExecution(v *time.Time) *StrategyStatusUpdateOne {
	if v != nil {
		_u.SetLastExecution(*v)
	}
	return _u
}

// ClearLastExecution clears the value of the "last_execution" field.
func (_u *StrategyStatusUpdateOne) ClearLastExecution() *StrategyStatusUpdateOne {
	_u.mutation.ClearLastExecution()
	return _u
}

// SetExecutionCount sets the "execution_count" field.
func (_u *StrategyStatusUpdateOne) SetExecutionCount(v int64) *StrategyStatusUpdateOne {
	_u.mutation.ResetExecutionCount()
	_u.mutation.SetExecutionCount(v)
	return _u
}

// SetNillableExecutionCount sets the "execution_count" field if the given value is not nil.
func (_u *StrategyStatusUpdateOne) SetNillableExecutionCount(v *int64) *StrategyStatusUpdateOne {
	if v != nil {
		_u.SetExecutionCount(*v)
	}
	return _u
}

// AddExecutionCount adds value to the "execution_count" field.
func (_u *StrategyStatusUpdateOne) AddExecutionCount(v int64) *StrategyStatusUpdateOne {
	_u.mutation.AddExecutionCount(v)
	return _u
}

// SetErrorMessage sets the "error_message" field.
func (_u *StrategyStatusUpdateOne) SetErrorMessage(v string) *StrategyStatusUpdateOne {
	_u.mutation.SetErrorMessage(v)
	return _u
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_u *StrategyStatusUpdateOne) SetNillableErrorMessage(v *string) *StrategyStatusUpdateOne {
	if v != nil {
		_u.SetErrorMessage(*v)
	}
	return _u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (_u *StrategyStatusUpdateOne) ClearErrorMessage() *StrategyStatusUpdateOne {
	_u.mutation.ClearErrorMessage()
	return _u
}

// SetUptimeSeconds sets the "uptime_seconds" field.
func (_u *StrategyStatusUpdateOne) SetUptimeSeconds(v int64) *StrategyStatusUpdateOne {
	_u.mutation.ResetUptimeSeconds()
	_u.mutation.SetUptimeSeconds(v)
	return _u
}

// SetNillableUptimeSeconds sets the "uptime_seconds" field if the given value is not nil.
func (_u *StrategyStatusUpdateOne) SetNillableUptimeSeconds(v *int64) *StrategyStatusUpdateOne {
	if v != nil {
		_u.SetUptimeSeconds(*v)
	}
	return _u
}

// AddUptimeSeconds adds value to the "uptime_seconds" field.
func (_u *StrategyStatusUpdateOne) AddUptimeSeconds(v int64) *StrategyStatusUpdateOne {
	_u.mutation.AddUptimeSeconds(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StrategyStatusUpdateOne) SetUpdatedAt(v time.Time) *StrategyStatusUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStrategy sets the "strategy" edge to the Strategy entity.
func (_u *StrategyStatusUpdateOne) SetStrategy(v *Strategy) *StrategyStatusUpdateOne {
	return _u.SetStrategyID(v.ID)
}

// Mutation returns the StrategyStatusMutation object of the builder.
func (_u *StrategyStatusUpdateOne) Mutation() *StrategyStatusMutation {
	return _u.mutation
}

// ClearStrategy clears the "strategy" edge to the Strategy entity.
func (_u *StrategyStatusUpdateOne) ClearStrategy() *StrategyStatusUpdateOne {
	_u.mutation.ClearStrategy()
	return _u
}

// Where appends a list predicates to the StrategyStatusUpdate builder.
func (_u *StrategyStatusUpdateOne) Where(ps ...predicate.StrategyStatus) *StrategyStatusUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *StrategyStatusUpdateOne) Select(field string, fields ...string) *StrategyStatusUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated StrategyStatus entity.
func (_u *StrategyStatusUpdateOne) Save(ctx context.Context) (*StrategyStatus, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StrategyStatusUpdateOne) SaveX(ctx context.Context) *StrategyStatus {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *StrategyStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StrategyStatusUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StrategyStatusUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := strategystatus.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StrategyStatusUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := strategystatus.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "StrategyStatus.status": %w`, err)}
		}
	}
	if _u.mutation.StrategyCleared() && len(_u.mutation.StrategyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "StrategyStatus.strategy"`)
	}
	return nil
}

func (_u *StrategyStatusUpdateOne) sqlSave(ctx context.Context) (_node *StrategyStatus, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(strategystatus.Table, strategystatus.Columns, sqlgraph.NewFieldSpec(strategystatus.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StrategyStatus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, strategystatus.FieldID)
		for _, f := range fields {
			if !strategystatus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != strategystatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(strategystatus.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.LastExecution(); ok {
		_spec.SetField(strategystatus.FieldLastExecution, field.TypeTime, value)
	}
	if _u.mutation.LastExecutionCleared() {
		_spec.ClearField(strategystatus.FieldLastExecution, field.TypeTime)
	}
	if value, ok := _u.mutation.ExecutionCount(); ok {
		_spec.SetField(strategystatus.FieldExecutionCount, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedExecutionCount(); ok {
		_spec.AddField(strategystatus.FieldExecutionCount, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.ErrorMessage(); ok {
		_spec.SetField(strategystatus.FieldErrorMessage, field.TypeString, value)
	}
	if _u.mutation.ErrorMessageCleared() {
		_spec.ClearField(strategystatus.FieldErrorMessage, field.TypeString)
	}
	if value, ok := _u.mutation.UptimeSeconds(); ok {
		_spec.SetField(strategystatus.FieldUptimeSeconds, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUptimeSeconds(); ok {
		_spec.AddField(strategystatus.FieldUptimeSeconds, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(strategystatus.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.StrategyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   strategystatus.StrategyTable,
			Columns: []string{strategystatus.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StrategyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   strategystatus.StrategyTable,
			Columns: []string{strategystatus.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StrategyStatus{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{strategystatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
