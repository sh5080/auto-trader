// Code generated by ent, DO NOT EDIT.

package strategy

import (
	"auto-trader/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldUserID, v))
}

// StrategyID applies equality check predicate on the "strategy_id" field. It's identical to StrategyIDEQ.
func StrategyID(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldStrategyID, v))
}

// TemplateID applies equality check predicate on the "template_id" field. It's identical to TemplateIDEQ.
func TemplateID(v uuid.UUID) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldTemplateID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldDescription, v))
}

// Symbol applies equality check predicate on the "symbol" field. It's identical to SymbolEQ.
func Symbol(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldSymbol, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldActive, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldUserID, vs...))
}

// StrategyIDEQ applies the EQ predicate on the "strategy_id" field.
func StrategyIDEQ(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldStrategyID, v))
}

// StrategyIDNEQ applies the NEQ predicate on the "strategy_id" field.
func StrategyIDNEQ(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldStrategyID, v))
}

// StrategyIDIn applies the In predicate on the "strategy_id" field.
func StrategyIDIn(vs ...string) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldStrategyID, vs...))
}

// StrategyIDNotIn applies the NotIn predicate on the "strategy_id" field.
func StrategyIDNotIn(vs ...string) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldStrategyID, vs...))
}

// StrategyIDGT applies the GT predicate on the "strategy_id" field.
func StrategyIDGT(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldStrategyID, v))
}

// StrategyIDGTE applies the GTE predicate on the "strategy_id" field.
func StrategyIDGTE(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldStrategyID, v))
}

// StrategyIDLT applies the LT predicate on the "strategy_id" field.
func StrategyIDLT(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldStrategyID, v))
}

// StrategyIDLTE applies the LTE predicate on the "strategy_id" field.
func StrategyIDLTE(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldStrategyID, v))
}

// StrategyIDContains applies the Contains predicate on the "strategy_id" field.
func StrategyIDContains(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldContains(FieldStrategyID, v))
}

// StrategyIDHasPrefix applies the HasPrefix predicate on the "strategy_id" field.
func StrategyIDHasPrefix(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldHasPrefix(FieldStrategyID, v))
}

// StrategyIDHasSuffix applies the HasSuffix predicate on the "strategy_id" field.
func StrategyIDHasSuffix(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldHasSuffix(FieldStrategyID, v))
}

// StrategyIDEqualFold applies the EqualFold predicate on the "strategy_id" field.
func StrategyIDEqualFold(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEqualFold(FieldStrategyID, v))
}

// StrategyIDContainsFold applies the ContainsFold predicate on the "strategy_id" field.
func StrategyIDContainsFold(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldContainsFold(FieldStrategyID, v))
}

// TemplateIDEQ applies the EQ predicate on the "template_id" field.
func TemplateIDEQ(v uuid.UUID) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldTemplateID, v))
}

// TemplateIDNEQ applies the NEQ predicate on the "template_id" field.
func TemplateIDNEQ(v uuid.UUID) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldTemplateID, v))
}

// TemplateIDIn applies the In predicate on the "template_id" field.
func TemplateIDIn(vs ...uuid.UUID) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldTemplateID, vs...))
}

// TemplateIDNotIn applies the NotIn predicate on the "template_id" field.
func TemplateIDNotIn(vs ...uuid.UUID) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldTemplateID, vs...))
}

// TemplateIDIsNil applies the IsNil predicate on the "template_id" field.
func TemplateIDIsNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldIsNull(FieldTemplateID))
}

// TemplateIDNotNil applies the NotNil predicate on the "template_id" field.
func TemplateIDNotNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldNotNull(FieldTemplateID))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldContainsFold(FieldDescription, v))
}

// SymbolEQ applies the EQ predicate on the "symbol" field.
func SymbolEQ(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldSymbol, v))
}

// SymbolNEQ applies the NEQ predicate on the "symbol" field.
func SymbolNEQ(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldSymbol, v))
}

// SymbolIn applies the In predicate on the "symbol" field.
func SymbolIn(vs ...string) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldSymbol, vs...))
}

// SymbolNotIn applies the NotIn predicate on the "symbol" field.
func SymbolNotIn(vs ...string) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldSymbol, vs...))
}

// SymbolGT applies the GT predicate on the "symbol" field.
func SymbolGT(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldSymbol, v))
}

// SymbolGTE applies the GTE predicate on the "symbol" field.
func SymbolGTE(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldSymbol, v))
}

// SymbolLT applies the LT predicate on the "symbol" field.
func SymbolLT(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldSymbol, v))
}

// SymbolLTE applies the LTE predicate on the "symbol" field.
func SymbolLTE(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldSymbol, v))
}

// SymbolContains applies the Contains predicate on the "symbol" field.
func SymbolContains(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldContains(FieldSymbol, v))
}

// SymbolHasPrefix applies the HasPrefix predicate on the "symbol" field.
func SymbolHasPrefix(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldHasPrefix(FieldSymbol, v))
}

// SymbolHasSuffix applies the HasSuffix predicate on the "symbol" field.
func SymbolHasSuffix(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldHasSuffix(FieldSymbol, v))
}

// SymbolEqualFold applies the EqualFold predicate on the "symbol" field.
func SymbolEqualFold(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEqualFold(FieldSymbol, v))
}

// SymbolContainsFold applies the ContainsFold predicate on the "symbol" field.
func SymbolContainsFold(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldContainsFold(FieldSymbol, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldActive, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldNotNull(FieldUpdatedAt))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Strategy {
	return predicate.Strategy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Strategy {
	return predicate.Strategy(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTemplate applies the HasEdge predicate on the "template" edge.
func HasTemplate() predicate.Strategy {
	return predicate.Strategy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TemplateTable, TemplateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTemplateWith applies the HasEdge predicate on the "template" edge with a given conditions (other predicates).
func HasTemplateWith(preds ...predicate.StrategyTemplate) predicate.Strategy {
	return predicate.Strategy(func(s *sql.Selector) {
		step := newTemplateStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExecutions applies the HasEdge predicate on the "executions" edge.
func HasExecutions() predicate.Strategy {
	return predicate.Strategy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExecutionsTable, ExecutionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExecutionsWith applies the HasEdge predicate on the "executions" edge with a given conditions (other predicates).
func HasExecutionsWith(preds ...predicate.StrategyExecution) predicate.Strategy {
	return predicate.Strategy(func(s *sql.Selector) {
		step := newExecutionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPerformance applies the HasEdge predicate on the "performance" edge.
func HasPerformance() predicate.Strategy {
	return predicate.Strategy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, PerformanceTable, PerformanceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPerformanceWith applies the HasEdge predicate on the "performance" edge with a given conditions (other predicates).
func HasPerformanceWith(preds ...predicate.StrategyPerformance) predicate.Strategy {
	return predicate.Strategy(func(s *sql.Selector) {
		step := newPerformanceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatus applies the HasEdge predicate on the "status" edge.
func HasStatus() predicate.Strategy {
	return predicate.Strategy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, StatusTable, StatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusWith applies the HasEdge predicate on the "status" edge with a given conditions (other predicates).
func HasStatusWith(preds ...predicate.StrategyStatus) predicate.Strategy {
	return predicate.Strategy(func(s *sql.Selector) {
		step := newStatusStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Strategy) predicate.Strategy {
	return predicate.Strategy(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Strategy) predicate.Strategy {
	return predicate.Strategy(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Strategy) predicate.Strategy {
	return predicate.Strategy(sql.NotPredicates(p))
}
