// Code generated by ent, DO NOT EDIT.

package strategyexecution

import (
	"auto-trader/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldLTE(FieldID, id))
}

// StrategyID applies equality check predicate on the "strategy_id" field. It's identical to StrategyIDEQ.
func StrategyID(v uuid.UUID) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldEQ(FieldStrategyID, v))
}

// Symbol applies equality check predicate on the "symbol" field. It's identical to SymbolEQ.
func Symbol(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldEQ(FieldSymbol, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v decimal.Decimal) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldEQ(FieldPrice, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldEQ(FieldQuantity, v))
}

// Reasoning applies equality check predicate on the "reasoning" field. It's identical to ReasoningEQ.
func Reasoning(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldEQ(FieldReasoning, v))
}

// ExecutedAt applies equality check predicate on the "executed_at" field. It's identical to ExecutedAtEQ.
func ExecutedAt(v time.Time) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldEQ(FieldExecutedAt, v))
}

// StrategyIDEQ applies the EQ predicate on the "strategy_id" field.
func StrategyIDEQ(v uuid.UUID) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldEQ(FieldStrategyID, v))
}

// StrategyIDNEQ applies the NEQ predicate on the "strategy_id" field.
func StrategyIDNEQ(v uuid.UUID) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldNEQ(FieldStrategyID, v))
}

// StrategyIDIn applies the In predicate on the "strategy_id" field.
func StrategyIDIn(vs ...uuid.UUID) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldIn(FieldStrategyID, vs...))
}

// StrategyIDNotIn applies the NotIn predicate on the "strategy_id" field.
func StrategyIDNotIn(vs ...uuid.UUID) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldNotIn(FieldStrategyID, vs...))
}

// StrategyIDIsNil applies the IsNil predicate on the "strategy_id" field.
func StrategyIDIsNil() predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldIsNull(FieldStrategyID))
}

// StrategyIDNotNil applies the NotNil predicate on the "strategy_id" field.
func StrategyIDNotNil() predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldNotNull(FieldStrategyID))
}

// SymbolEQ applies the EQ predicate on the "symbol" field.
func SymbolEQ(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldEQ(FieldSymbol, v))
}

// SymbolNEQ applies the NEQ predicate on the "symbol" field.
func SymbolNEQ(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldNEQ(FieldSymbol, v))
}

// SymbolIn applies the In predicate on the "symbol" field.
func SymbolIn(vs ...string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldIn(FieldSymbol, vs...))
}

// SymbolNotIn applies the NotIn predicate on the "symbol" field.
func SymbolNotIn(vs ...string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldNotIn(FieldSymbol, vs...))
}

// SymbolGT applies the GT predicate on the "symbol" field.
func SymbolGT(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldGT(FieldSymbol, v))
}

// SymbolGTE applies the GTE predicate on the "symbol" field.
func SymbolGTE(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldGTE(FieldSymbol, v))
}

// SymbolLT applies the LT predicate on the "symbol" field.
func SymbolLT(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldLT(FieldSymbol, v))
}

// SymbolLTE applies the LTE predicate on the "symbol" field.
func SymbolLTE(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldLTE(FieldSymbol, v))
}

// SymbolContains applies the Contains predicate on the "symbol" field.
func SymbolContains(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldContains(FieldSymbol, v))
}

// SymbolHasPrefix applies the HasPrefix predicate on the "symbol" field.
func SymbolHasPrefix(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldHasPrefix(FieldSymbol, v))
}

// SymbolHasSuffix applies the HasSuffix predicate on the "symbol" field.
func SymbolHasSuffix(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldHasSuffix(FieldSymbol, v))
}

// SymbolEqualFold applies the EqualFold predicate on the "symbol" field.
func SymbolEqualFold(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldEqualFold(FieldSymbol, v))
}

// SymbolContainsFold applies the ContainsFold predicate on the "symbol" field.
func SymbolContainsFold(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldContainsFold(FieldSymbol, v))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v Action) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v Action) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...Action) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...Action) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldNotIn(FieldAction, vs...))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v decimal.Decimal) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v decimal.Decimal) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...decimal.Decimal) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...decimal.Decimal) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v decimal.Decimal) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v decimal.Decimal) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v decimal.Decimal) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v decimal.Decimal) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldLTE(FieldPrice, v))
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldIsNull(FieldPrice))
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldNotNull(FieldPrice))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldLTE(FieldQuantity, v))
}

// QuantityIsNil applies the IsNil predicate on the "quantity" field.
func QuantityIsNil() predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldIsNull(FieldQuantity))
}

// QuantityNotNil applies the NotNil predicate on the "quantity" field.
func QuantityNotNil() predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldNotNull(FieldQuantity))
}

// ReasoningEQ applies the EQ predicate on the "reasoning" field.
func ReasoningEQ(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldEQ(FieldReasoning, v))
}

// ReasoningNEQ applies the NEQ predicate on the "reasoning" field.
func ReasoningNEQ(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldNEQ(FieldReasoning, v))
}

// ReasoningIn applies the In predicate on the "reasoning" field.
func ReasoningIn(vs ...string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldIn(FieldReasoning, vs...))
}

// ReasoningNotIn applies the NotIn predicate on the "reasoning" field.
func ReasoningNotIn(vs ...string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldNotIn(FieldReasoning, vs...))
}

// ReasoningGT applies the GT predicate on the "reasoning" field.
func ReasoningGT(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldGT(FieldReasoning, v))
}

// ReasoningGTE applies the GTE predicate on the "reasoning" field.
func ReasoningGTE(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldGTE(FieldReasoning, v))
}

// ReasoningLT applies the LT predicate on the "reasoning" field.
func ReasoningLT(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldLT(FieldReasoning, v))
}

// ReasoningLTE applies the LTE predicate on the "reasoning" field.
func ReasoningLTE(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldLTE(FieldReasoning, v))
}

// ReasoningContains applies the Contains predicate on the "reasoning" field.
func ReasoningContains(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldContains(FieldReasoning, v))
}

// ReasoningHasPrefix applies the HasPrefix predicate on the "reasoning" field.
func ReasoningHasPrefix(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldHasPrefix(FieldReasoning, v))
}

// ReasoningHasSuffix applies the HasSuffix predicate on the "reasoning" field.
func ReasoningHasSuffix(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldHasSuffix(FieldReasoning, v))
}

// ReasoningIsNil applies the IsNil predicate on the "reasoning" field.
func ReasoningIsNil() predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldIsNull(FieldReasoning))
}

// ReasoningNotNil applies the NotNil predicate on the "reasoning" field.
func ReasoningNotNil() predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldNotNull(FieldReasoning))
}

// ReasoningEqualFold applies the EqualFold predicate on the "reasoning" field.
func ReasoningEqualFold(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldEqualFold(FieldReasoning, v))
}

// ReasoningContainsFold applies the ContainsFold predicate on the "reasoning" field.
func ReasoningContainsFold(v string) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldContainsFold(FieldReasoning, v))
}

// ExecutedAtEQ applies the EQ predicate on the "executed_at" field.
func ExecutedAtEQ(v time.Time) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldEQ(FieldExecutedAt, v))
}

// ExecutedAtNEQ applies the NEQ predicate on the "executed_at" field.
func ExecutedAtNEQ(v time.Time) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldNEQ(FieldExecutedAt, v))
}

// ExecutedAtIn applies the In predicate on the "executed_at" field.
func ExecutedAtIn(vs ...time.Time) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldIn(FieldExecutedAt, vs...))
}

// ExecutedAtNotIn applies the NotIn predicate on the "executed_at" field.
func ExecutedAtNotIn(vs ...time.Time) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldNotIn(FieldExecutedAt, vs...))
}

// ExecutedAtGT applies the GT predicate on the "executed_at" field.
func ExecutedAtGT(v time.Time) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldGT(FieldExecutedAt, v))
}

// ExecutedAtGTE applies the GTE predicate on the "executed_at" field.
func ExecutedAtGTE(v time.Time) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldGTE(FieldExecutedAt, v))
}

// ExecutedAtLT applies the LT predicate on the "executed_at" field.
func ExecutedAtLT(v time.Time) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldLT(FieldExecutedAt, v))
}

// ExecutedAtLTE applies the LTE predicate on the "executed_at" field.
func ExecutedAtLTE(v time.Time) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldLTE(FieldExecutedAt, v))
}

// ExecutedAtIsNil applies the IsNil predicate on the "executed_at" field.
func ExecutedAtIsNil() predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldIsNull(FieldExecutedAt))
}

// ExecutedAtNotNil applies the NotNil predicate on the "executed_at" field.
func ExecutedAtNotNil() predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.FieldNotNull(FieldExecutedAt))
}

// HasStrategy applies the HasEdge predicate on the "strategy" edge.
func HasStrategy() predicate.StrategyExecution {
	return predicate.StrategyExecution(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StrategyTable, StrategyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStrategyWith applies the HasEdge predicate on the "strategy" edge with a given conditions (other predicates).
func HasStrategyWith(preds ...predicate.Strategy) predicate.StrategyExecution {
	return predicate.StrategyExecution(func(s *sql.Selector) {
		step := newStrategyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StrategyExecution) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StrategyExecution) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StrategyExecution) predicate.StrategyExecution {
	return predicate.StrategyExecution(sql.NotPredicates(p))
}
