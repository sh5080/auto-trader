// Code generated by ent, DO NOT EDIT.

package strategyexecution

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the strategyexecution type in the database.
	Label = "strategy_execution"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStrategyID holds the string denoting the strategy_id field in the database.
	FieldStrategyID = "strategy_id"
	// FieldSymbol holds the string denoting the symbol field in the database.
	FieldSymbol = "symbol"
	// FieldAction holds the string denoting the action field in the database.
	FieldAction = "action"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldReasoning holds the string denoting the reasoning field in the database.
	FieldReasoning = "reasoning"
	// FieldExecutedAt holds the string denoting the executed_at field in the database.
	FieldExecutedAt = "executed_at"
	// EdgeStrategy holds the string denoting the strategy edge name in mutations.
	EdgeStrategy = "strategy"
	// Table holds the table name of the strategyexecution in the database.
	Table = "strategy_executions"
	// StrategyTable is the table that holds the strategy relation/edge.
	StrategyTable = "strategy_executions"
	// StrategyInverseTable is the table name for the Strategy entity.
	// It exists in this package in order to avoid circular dependency with the "strategy" package.
	StrategyInverseTable = "strategies"
	// StrategyColumn is the table column denoting the strategy relation/edge.
	StrategyColumn = "strategy_id"
)

// Columns holds all SQL columns for strategyexecution fields.
var Columns = []string{
	FieldID,
	FieldStrategyID,
	FieldSymbol,
	FieldAction,
	FieldPrice,
	FieldQuantity,
	FieldReasoning,
	FieldExecutedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SymbolValidator is a validator for the "symbol" field. It is called by the builders before save.
	SymbolValidator func(string) error
	// DefaultExecutedAt holds the default value on creation for the "executed_at" field.
	DefaultExecutedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// Action defines the type for the "action" enum field.
type Action string

// Action values.
const (
	ActionBUY  Action = "BUY"
	ActionSELL Action = "SELL"
	ActionHOLD Action = "HOLD"
)

func (a Action) String() string {
	return string(a)
}

// ActionValidator is a validator for the "action" field enum values. It is called by the builders before save.
func ActionValidator(a Action) error {
	switch a {
	case ActionBUY, ActionSELL, ActionHOLD:
		return nil
	default:
		return fmt.Errorf("strategyexecution: invalid enum value for action field: %q", a)
	}
}

// OrderOption defines the ordering options for the StrategyExecution queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStrategyID orders the results by the strategy_id field.
func ByStrategyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStrategyID, opts...).ToFunc()
}

// BySymbol orders the results by the symbol field.
func BySymbol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSymbol, opts...).ToFunc()
}

// ByAction orders the results by the action field.
func ByAction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAction, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// ByReasoning orders the results by the reasoning field.
func ByReasoning(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReasoning, opts...).ToFunc()
}

// ByExecutedAt orders the results by the executed_at field.
func ByExecutedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecutedAt, opts...).ToFunc()
}

// ByStrategyField orders the results by strategy field.
func ByStrategyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStrategyStep(), sql.OrderByField(field, opts...))
	}
}
func newStrategyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StrategyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StrategyTable, StrategyColumn),
	)
}
