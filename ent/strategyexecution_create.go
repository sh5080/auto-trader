// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auto-trader/ent/strategy"
	"auto-trader/ent/strategyexecution"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// StrategyExecutionCreate is the builder for creating a StrategyExecution entity.
type StrategyExecutionCreate struct {
	config
	mutation *StrategyExecutionMutation
	hooks    []Hook
}

// SetStrategyID sets the "strategy_id" field.
func (_c *StrategyExecutionCreate) SetStrategyID(v uuid.UUID) *StrategyExecutionCreate {
	_c.mutation.SetStrategyID(v)
	return _c
}

// SetNillableStrategyID sets the "strategy_id" field if the given value is not nil.
func (_c *StrategyExecutionCreate) SetNillableStrategyID(v *uuid.UUID) *StrategyExecutionCreate {
	if v != nil {
		_c.SetStrategyID(*v)
	}
	return _c
}

// SetSymbol sets the "symbol" field.
func (_c *StrategyExecutionCreate) SetSymbol(v string) *StrategyExecutionCreate {
	_c.mutation.SetSymbol(v)
	return _c
}

// SetAction sets the "action" field.
func (_c *StrategyExecutionCreate) SetAction(v strategyexecution.Action) *StrategyExecutionCreate {
	_c.mutation.SetAction(v)
	return _c
}

// SetPrice sets the "price" field.
func (_c *StrategyExecutionCreate) SetPrice(v decimal.Decimal) *StrategyExecutionCreate {
	_c.mutation.SetPrice(v)
	return _c
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (_c *StrategyExecutionCreate) SetNillablePrice(v *decimal.Decimal) *StrategyExecutionCreate {
	if v != nil {
		_c.SetPrice(*v)
	}
	return _c
}

// SetQuantity sets the "quantity" field.
func (_c *StrategyExecutionCreate) SetQuantity(v int) *StrategyExecutionCreate {
	_c.mutation.SetQuantity(v)
	return _c
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (_c *StrategyExecutionCreate) SetNillableQuantity(v *int) *StrategyExecutionCreate {
	if v != nil {
		_c.SetQuantity(*v)
	}
	return _c
}

// SetReasoning sets the "reasoning" field.
func (_c *StrategyExecutionCreate) SetReasoning(v string) *StrategyExecutionCreate {
	_c.mutation.SetReasoning(v)
	return _c
}

// SetNillableReasoning sets the "reasoning" field if the given value is not nil.
func (_c *StrategyExecutionCreate) SetNillableReasoning(v *string) *StrategyExecutionCreate {
	if v != nil {
		_c.SetReasoning(*v)
	}
	return _c
}

// SetExecutedAt sets the "executed_at" field.
func (_c *StrategyExecutionCreate) SetExecutedAt(v time.Time) *StrategyExecutionCreate {
	_c.mutation.SetExecutedAt(v)
	return _c
}

// SetNillableExecutedAt sets the "executed_at" field if the given value is not nil.
func (_c *StrategyExecutionCreate) SetNillableExecutedAt(v *time.Time) *StrategyExecutionCreate {
	if v != nil {
		_c.SetExecutedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *StrategyExecutionCreate) SetID(v int64) *StrategyExecutionCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetStrategy sets the "strategy" edge to the Strategy entity.
func (_c *StrategyExecutionCreate) SetStrategy(v *Strategy) *StrategyExecutionCreate {
	return _c.SetStrategyID(v.ID)
}

// Mutation returns the StrategyExecutionMutation object of the builder.
func (_c *StrategyExecutionCreate) Mutation() *StrategyExecutionMutation {
	return _c.mutation
}

// Save creates the StrategyExecution in the database.
func (_c *StrategyExecutionCreate) Save(ctx context.Context) (*StrategyExecution, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *StrategyExecutionCreate) SaveX(ctx context.Context) *StrategyExecution {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StrategyExecutionCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StrategyExecutionCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *StrategyExecutionCreate) defaults() {
	if _, ok := _c.mutation.ExecutedAt(); !ok {
		v := strategyexecution.DefaultExecutedAt()
		_c.mutation.SetExecutedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *StrategyExecutionCreate) check() error {
	if _, ok := _c.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "StrategyExecution.symbol"`)}
	}
	if v, ok := _c.mutation.Symbol(); ok {
		if err := strategyexecution.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "StrategyExecution.symbol": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "StrategyExecution.action"`)}
	}
	if v, ok := _c.mutation.Action(); ok {
		if err := strategyexecution.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "StrategyExecution.action": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := strategyexecution.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "StrategyExecution.id": %w`, err)}
		}
	}
	return nil
}

func (_c *StrategyExecutionCreate) sqlSave(ctx context.Context) (*StrategyExecution, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *StrategyExecutionCreate) createSpec() (*StrategyExecution, *sqlgraph.CreateSpec) {
	var (
		_node = &StrategyExecution{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(strategyexecution.Table, sqlgraph.NewFieldSpec(strategyexecution.FieldID, field.TypeInt64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Symbol(); ok {
		_spec.SetField(strategyexecution.FieldSymbol, field.TypeString, value)
		_node.Symbol = value
	}
	if value, ok := _c.mutation.Action(); ok {
		_spec.SetField(strategyexecution.FieldAction, field.TypeEnum, value)
		_node.Action = value
	}
	if value, ok := _c.mutation.Price(); ok {
		_spec.SetField(strategyexecution.FieldPrice, field.TypeOther, value)
		_node.Price = &value
	}
	if value, ok := _c.mutation.Quantity(); ok {
		_spec.SetField(strategyexecution.FieldQuantity, field.TypeInt, value)
		_node.Quantity = &value
	}
	if value, ok := _c.mutation.Reasoning(); ok {
		_spec.SetField(strategyexecution.FieldReasoning, field.TypeString, value)
		_node.Reasoning = &value
	}
	if value, ok := _c.mutation.ExecutedAt(); ok {
		_spec.SetField(strategyexecution.FieldExecutedAt, field.TypeTime, value)
		_node.ExecutedAt = &value
	}
	if nodes := _c.mutation.StrategyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   strategyexecution.StrategyTable,
			Columns: []string{strategyexecution.StrategyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StrategyID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StrategyExecutionCreateBulk is the builder for creating many StrategyExecution entities in bulk.
type StrategyExecutionCreateBulk struct {
	config
	err      error
	builders []*StrategyExecutionCreate
}

// Save creates the StrategyExecution entities in the database.
func (_c *StrategyExecutionCreateBulk) Save(ctx context.Context) ([]*StrategyExecution, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*StrategyExecution, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StrategyExecutionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *StrategyExecutionCreateBulk) SaveX(ctx context.Context) []*StrategyExecution {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StrategyExecutionCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StrategyExecutionCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
